<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MapAround.Core</name>
    </assembly>
    <members>
        <member name="T:MapAround.Caching.NamespaceDoc">
            <summary>
            The MapAround.Caching namespace contains interfaces 
            and classes for caching map data, such as features and 
            rasters.
            </summary>
        </member>
        <member name="T:MapAround.Caching.IFeatureCollectionCacheAccessor">
            <summary>
            Provides access to the cache of feature collection
            <para>
            Instances, that implement this interface can be used
            by data providers to access to the specific caches (eg,
            System.Web.Caching.Cache) to speed up access and / or
            data sharing.
            </para>
            </summary>
        </member>
        <member name="M:MapAround.Caching.IFeatureCollectionCacheAccessor.SaveFeatures(System.Collections.Generic.ICollection{MapAround.Mapping.Feature},MapAround.Mapping.FeatureType)">
            <summary>
            Saves a feature collection to the cache.
            </summary>
            <param name="features">Feature collection</param>
            <param name="featureType">Type of features</param>
        </member>
        <member name="M:MapAround.Caching.IFeatureCollectionCacheAccessor.RestoreFeatures(MapAround.Mapping.FeatureType)">
            <summary>
            Restores a feature collection from the cache.
            </summary>
            <param name="featureType">Type of features</param>
            <returns>Restored collection of features</returns>
        </member>
        <member name="M:MapAround.Caching.IFeatureCollectionCacheAccessor.SaveFeaturesIndex(MapAround.Indexing.ISpatialIndex,MapAround.Mapping.FeatureType)">
            <summary>
            Saves a spatial index containing features to the cache.
            </summary>
            <param name="index">Spatial index</param>
            <param name="featureType">Type of features in index</param>
        </member>
        <member name="M:MapAround.Caching.IFeatureCollectionCacheAccessor.RestoreFeaturesIndex(MapAround.Mapping.FeatureType)">
            <summary>
            Restores a spatial index containing features from cache.
            </summary>
            <param name="featureType">Feature type</param>
            <returns>Restored spatial index</returns>
        </member>
        <member name="M:MapAround.Caching.IFeatureCollectionCacheAccessor.SaveAttributeNames(System.Collections.Generic.IList{System.String})">
            <summary>
            Saves a list of attribute names to the cache.
            </summary>
            <param name="attributeNames">List of attribute names</param>
        </member>
        <member name="M:MapAround.Caching.IFeatureCollectionCacheAccessor.RestoreAttributeNames">
            <summary>
            Restores a list of attribute names from the cache
            </summary>
            <returns>List of attribute names </returns>
        </member>
        <member name="P:MapAround.Caching.IFeatureCollectionCacheAccessor.Key">
            <summary>
            Gets or sets cache access key.
            </summary>
        </member>
        <member name="P:MapAround.Caching.IFeatureCollectionCacheAccessor.ExistsInCache">
            <summary>
            Gets a value indicating whether the objects 
            corresponding to the <see cref="P:MapAround.Caching.IFeatureCollectionCacheAccessor.Key"/> exist in cache.
            </summary>
        </member>
        <member name="T:MapAround.Caching.FeatureCollectionCacheAccessorBase">
            <summary>
            Base class providing access to feature caching.
            </summary>
        </member>
        <member name="M:MapAround.Caching.FeatureCollectionCacheAccessorBase.CheckKeyString(System.String)">
            <summary>
            Checks a value for validity when using as the access key.
            </summary>
            <param name="key">Value need to be checked</param>
            <returns>True, if passed value is valid, else false</returns>
        </member>
        <member name="M:MapAround.Caching.FeatureCollectionCacheAccessorBase.AddOrReplaceCollection(System.Collections.Generic.ICollection{MapAround.Mapping.Feature},MapAround.Mapping.FeatureType)">
            <summary>
            Adds a collection to the cache or replaces it.
            </summary>
            <param name="features">Feature collection</param>
            <param name="featureType">Feature type</param>
        </member>
        <member name="M:MapAround.Caching.FeatureCollectionCacheAccessorBase.ExtractCollection(MapAround.Mapping.FeatureType)">
            <summary>
            Extracts a collection from cache.
            </summary>
            <param name="featureType">Type of features in the collection</param>
            <returns>Extracted collection</returns>
        </member>
        <member name="M:MapAround.Caching.FeatureCollectionCacheAccessorBase.AddOrReplaceIndex(MapAround.Indexing.ISpatialIndex,MapAround.Mapping.FeatureType)">
            <summary>
            Adds a feature index to the cache or replaces it.
            </summary>
            <param name="featureType">Feature type</param>
            <param name="index">Spatial index</param>
        </member>
        <member name="M:MapAround.Caching.FeatureCollectionCacheAccessorBase.ExtractIndex(MapAround.Mapping.FeatureType)">
            <summary>
            Extracts a feature index from cache.
            </summary>
            <param name="featureType">Feature type</param>
            <returns>Spatial index</returns>
        </member>
        <member name="M:MapAround.Caching.FeatureCollectionCacheAccessorBase.SaveFeatures(System.Collections.Generic.ICollection{MapAround.Mapping.Feature},MapAround.Mapping.FeatureType)">
            <summary>
            Saves a feature collection to the cache.
            </summary>
            <param name="features">Feature collection</param>
            <param name="featureType">Type of features</param>
        </member>
        <member name="M:MapAround.Caching.FeatureCollectionCacheAccessorBase.RestoreFeatures(MapAround.Mapping.FeatureType)">
            <summary>
            Restores a feature collection from the cache.
            </summary>
            <param name="featureType">Type of features</param>
            <returns>Restored collection of features</returns>
        </member>
        <member name="M:MapAround.Caching.FeatureCollectionCacheAccessorBase.SaveFeaturesIndex(MapAround.Indexing.ISpatialIndex,MapAround.Mapping.FeatureType)">
            <summary>
            Saves a spatial index containing features to the cache.
            </summary>
            <param name="index">Spatial index</param>
            <param name="featureType">Type of features in index</param>
        </member>
        <member name="M:MapAround.Caching.FeatureCollectionCacheAccessorBase.RestoreFeaturesIndex(MapAround.Mapping.FeatureType)">
            <summary>
            Restores a spatial index containing features from cache.
            </summary>
            <param name="featureType">Feature type</param>
            <returns>Restored spatial index</returns>
        </member>
        <member name="M:MapAround.Caching.FeatureCollectionCacheAccessorBase.SaveAttributeNames(System.Collections.Generic.IList{System.String})">
            <summary>
            Saves a list of attribute names to the cache.
            </summary>
            <param name="attributeNames">List of attribute names</param>
        </member>
        <member name="M:MapAround.Caching.FeatureCollectionCacheAccessorBase.RestoreAttributeNames">
            <summary>
            Restores a list of attribute names from the cache
            </summary>
            <returns>List of attribute names </returns>
        </member>
        <member name="M:MapAround.Caching.FeatureCollectionCacheAccessorBase.AddOrReplaceAttributeNames(System.Collections.Generic.IList{System.String})">
            <summary>
            Saves an attribute list into cache.
            </summary>
            <param name="attributeNames">Attribute list</param>
        </member>
        <member name="M:MapAround.Caching.FeatureCollectionCacheAccessorBase.ExtractAttributeNames">
            <summary>
            Extracts an attribute list from cache.
            </summary>
            <returns>Attribute list</returns>
        </member>
        <member name="P:MapAround.Caching.FeatureCollectionCacheAccessorBase.Key">
            <summary>
            Gets or sets an access key value.
            </summary>
        </member>
        <member name="P:MapAround.Caching.FeatureCollectionCacheAccessorBase.ExistsInCache">
            <summary>
            Gets a value indicating whether the objects 
            corresponding to the <see cref="P:MapAround.Caching.FeatureCollectionCacheAccessorBase.Key"/> exist in cache.
            </summary>
        </member>
        <member name="T:MapAround.Caching.SimpleSpatialDataCache">
            <summary>
            Simple in-memory cache.
            <para>
            Use this class when you need
            1. to store objects that are the same for many layers
            2. to reduce time needed to access the frequently requested data
            </para>
            </summary>
        </member>
        <member name="M:MapAround.Caching.SimpleSpatialDataCache.Add(System.String,System.Object)">
            <summary>
            Adds an object to the cache.
            </summary>
            <param name="key">Key</param>
            <param name="obj">Object</param>
        </member>
        <member name="M:MapAround.Caching.SimpleSpatialDataCache.Get(System.String)">
            <summary>
            Gets an object from cache.
            </summary>
            <param name="key">Key</param>
            <returns>Object</returns>
        </member>
        <member name="M:MapAround.Caching.SimpleSpatialDataCache.Insert(System.String,System.Object)">
            <summary>
            Inserts an object to the cache.
            </summary>
            <param name="key">Key</param>
            <param name="obj">Object</param>
        </member>
        <member name="M:MapAround.Caching.SimpleSpatialDataCache.Remove(System.String)">
            <summary>
            Removes an object from cache.
            </summary>
            <param name="key">Object key</param>
        </member>
        <member name="P:MapAround.Caching.SimpleSpatialDataCache.Item(System.String)">
            <summary>
            Gets an object from the cache by its key or places new object (replaces existing).
            </summary>
            <param name="key">Obect key</param>
            <returns>Object</returns>
        </member>
        <member name="T:MapAround.Caching.SimpleCacheAccessor">
            <summary>
            Instances of this class provides access to the MapAround.Caching.SimpleSpatialDataCache
            and can be used by data providers as a tempopary storage of retrieved data.
            Spatial data providers must to clone features after extracting from cache for correct 
            work in multithreading environment.
            </summary>
        </member>
        <member name="M:MapAround.Caching.SimpleCacheAccessor.CheckKeyString(System.String)">
            <summary>
            Checks a value for validity when using as the access key.
            </summary>
            <param name="key">Value need to be checked</param>
            <returns>True, if passed value is valid, else false</returns>
        </member>
        <member name="M:MapAround.Caching.SimpleCacheAccessor.AddOrReplaceCollection(System.Collections.Generic.ICollection{MapAround.Mapping.Feature},MapAround.Mapping.FeatureType)">
            <summary>
            Adds a collection to the cache or replaces it.
            </summary>
            <param name="features">Feature collection</param>
            <param name="featureType">Feature type</param>
        </member>
        <member name="M:MapAround.Caching.SimpleCacheAccessor.ExtractCollection(MapAround.Mapping.FeatureType)">
            <summary>
            Extracts a collection from cache.
            </summary>
            <param name="featureType">Type of features in the collection</param>
            <returns>Extracted collection</returns>
        </member>
        <member name="M:MapAround.Caching.SimpleCacheAccessor.ExtractIndex(MapAround.Mapping.FeatureType)">
            <summary>
            Extracts a feature index from cache.
            </summary>
            <param name="featureType">Feature type</param>
            <returns>Spatial index</returns>
        </member>
        <member name="M:MapAround.Caching.SimpleCacheAccessor.AddOrReplaceIndex(MapAround.Indexing.ISpatialIndex,MapAround.Mapping.FeatureType)">
            <summary>
            Adds a feature index to the cache or replaces it.
            </summary>
            <param name="featureType">Feature type</param>
            <param name="index">Spatial index</param>
        </member>
        <member name="M:MapAround.Caching.SimpleCacheAccessor.AddOrReplaceAttributeNames(System.Collections.Generic.IList{System.String})">
            <summary>
            Saves an attribute list into cache.
            </summary>
            <param name="attributeNames">Attribute list</param>
        </member>
        <member name="M:MapAround.Caching.SimpleCacheAccessor.ExtractAttributeNames">
            <summary>
            Extracts an attribute list from cache.
            </summary>
            <returns>Attribute list</returns>
        </member>
        <member name="M:MapAround.Caching.SimpleCacheAccessor.#ctor(MapAround.Caching.SimpleSpatialDataCache)">
            <summary>
            Initializes a new instance of Maparaound.Caching.SimpleCacheAccessor.
            </summary>
            <param name="cache">Maparaound.Caching.SimpleSpatialDataCache instance</param>
        </member>
        <member name="P:MapAround.Caching.SimpleCacheAccessor.ExistsInCache">
            <summary>
            Gets a value indicating whether the objects 
            corresponding to the Key exist in cache.
            </summary>
        </member>
        <member name="T:MapAround.Caching.IJSONCacheAccessor">
            <summary>
            Represents an object that provides an access to the JSON cache. 
            </summary>
        </member>
        <member name="M:MapAround.Caching.IJSONCacheAccessor.ExtractJSONBytes(System.String)">
            <summary>
            Extracts a string representation of JSON object from cache.
            </summary>
            <param name="key">Access key</param>
            <returns>Byte array that contains a binary representation of a JSON object</returns>
        </member>
        <member name="M:MapAround.Caching.IJSONCacheAccessor.SaveJSONBytes(System.String,System.String)">
            <summary>
            Saves a string representation of an JSON object into cache.
            </summary>
            <param name="key">Access key</param>
            <param name="jsonObject">JSON object</param>
        </member>
        <member name="T:MapAround.Caching.ITileCacheAccessor">
            <summary>
            Represents an object that provides an access to the tile cache.
            </summary>
        </member>
        <member name="M:MapAround.Caching.ITileCacheAccessor.ExtractTileBytes(System.String,MapAround.Geometry.BoundingRectangle,System.String,System.String)">
            <summary>
            Extracts a binary representation of tile from cache.
            </summary>
            <param name="layer">Layer name</param>
            <param name="area">Area description</param>
            <param name="key">Access key</param>
            <param name="contentType">Type data in array</param>
            <returns>Byte array that contains a binary representation of a tile image</returns>
        </member>
        <member name="M:MapAround.Caching.ITileCacheAccessor.SaveTileBytes(System.String,MapAround.Geometry.BoundingRectangle,System.String,System.Byte[],System.String)">
            <summary>
            Saves a binary representation of an image into cache.
            </summary>
            <param name="layer">Layer name</param>
            <param name="area">Area description</param>
            <param name="key">Access key</param>
            <param name="tile">Byte array that contains a binary representation of a tile image</param>
            <param name="contentType">Type data in array</param>
        </member>
        <member name="T:MapAround.CoordinateSystems.NamespaceDoc">
            <summary>
            Содержит интерфейсы и классы для определение системы координат.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.IUnit">
            <summary>
            The MapAround.CoordinateSystems.IUnit interface abstracts 
            different kinds of units, it has no methods.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.IInfo">
            <summary>
            The IInfo interface defines the standard
            information stored with spatial reference objects. This
            interface is reused for many of the spatial reference
            objects in the system.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.IInfo.EqualParams(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal, false otherwise</returns>
        </member>
        <member name="P:MapAround.CoordinateSystems.IInfo.Name">
            <summary>
            Gets or sets the name of the object.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.IInfo.Authority">
            <summary>
            Gets or sets the authority name for this object, e.g., "POSC",
            is this is a standard object with an authority specific
            identity code. Returns "CUSTOM" if this is a custom object.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.IInfo.AuthorityCode">
            <summary>
            Gets or sets the authority specific identification code of the object
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.IInfo.Alias">
            <summary>
            Gets or sets the alias of the object.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.IInfo.Abbreviation">
            <summary>
            Gets or sets the abbreviation of the object.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.IInfo.Remarks">
            <summary>
            Gets or sets the provider-supplied remarks for the object.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.IInfo.WKT">
            <summary>
            Gats a well-known text representation of this object.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.IInfo.XML">
            <summary>
            Gets an XML representation of this object.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.IAngularUnit">
            <summary>
            Defines methods of angular units.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.IAngularUnit.RadiansPerUnit">
            <summary>
            Gets or sets the number of radians per angular unit.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.ILinearUnit">
            <summary>
            Defines methods of linear units.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.ILinearUnit.MetersPerUnit">
            <summary>
            Gets or sets the number of meters per unit.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.Unit">
            <summary>
            Represents units of measurement.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.SpatialReferenceInfo">
            <summary>
            Implements the IInfo interface.
            Defines the standard information stored with spatial reference objects.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.SpatialReferenceInfo.#ctor(System.String,System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the MapAround.CoordinateSystems.Info.
            </summary>
            <remarks>
            <para>The metadata items "Abbreviation", "Alias", "Authority", "AuthorityCode", "Name" and 
            "Remarks" were specified in the Simple Features interfaces, so they have been kept 
            here.</para>
            <para>This specification does not dictate what the contents of these items
            should be. However, the following guidelines are suggested:</para>
            <para>When <see cref="T:MapAround.CoordinateSystems.ICoordinateSystemAuthorityFactory"/> is used to create an object, 
            the "Authority" and "AuthorityCode" values should be set to the authority name of the factory 
            object, and the authority code supplied by the client, respectively. The other values may or 
            may not be set. (If the authority is EPSG, the implementer may consider using the corresponding 
            metadata values in the EPSG tables.)</para>
            <para>When <see cref="T:MapAround.CoordinateSystems.CoordinateSystemFactory"/> creates an object, the "Name" should be set 
            to the value supplied by the client. All of the other metadata items should be left empty
            </para>
            </remarks>
            <param name="name">Name</param>
            <param name="authority">Authority name</param>
            <param name="code">Authority-specific identification code.</param>
            <param name="alias">Alias</param>
            <param name="abbreviation">Abbreviation</param>
            <param name="remarks">Provider-supplied remarks</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.SpatialReferenceInfo.ToString">
            <summary>
            Returns the well-known of this object.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.SpatialReferenceInfo.EqualParams(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal, false otherwise</returns>
        </member>
        <member name="P:MapAround.CoordinateSystems.SpatialReferenceInfo.Name">
            <summary>
            Gets or sets the name of the object.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.SpatialReferenceInfo.Authority">
            <summary>
            Gets or sets the authority name for this object, e.g., "EPSG",
            is this is a standard object with an authority specific
            identity code. Returns "CUSTOM" if this is a custom object.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.SpatialReferenceInfo.AuthorityCode">
            <summary>
            Gets or sets the authority specific identification code of the object
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.SpatialReferenceInfo.Alias">
            <summary>
            Gets or sets the alias of the object.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.SpatialReferenceInfo.Abbreviation">
            <summary>
            Gets or sets the abbreviation of the object.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.SpatialReferenceInfo.Remarks">
            <summary>
            Gets or sets the provider-supplied remarks for the object.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.SpatialReferenceInfo.WKT">
            <summary>
            Gats a well-known text representation of this object.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.SpatialReferenceInfo.XML">
            <summary>
            Gets an XML representation of this object.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.SpatialReferenceInfo.InfoXml">
            <summary>
            Returns an XML string of the info object
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Unit.#ctor(System.Double,System.String,System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the MapAround.CoordinateSystems.Unit.
            </summary>
            <param name="conversionFactor">Conversion factor to base unit</param>
            <param name="name">Name of unit</param>
            <param name="authority">Authority name</param>
            <param name="authorityCode">Authority-specific identification code</param>
            <param name="alias">Alias</param>
            <param name="abbreviation">Abbreviation</param>
            <param name="remarks">Provider-supplied remarks</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Unit.#ctor(System.String,System.Double)">
            <summary>
            Initializes a new instance of the MapAround.CoordinateSystems.Unit.
            </summary>
            <param name="name">Name of unit</param>
            <param name="conversionFactor">Conversion factor to base unit</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Unit.EqualParams(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal, false otherwise</returns>
        </member>
        <member name="P:MapAround.CoordinateSystems.Unit.ConversionFactor">
            <summary>
            Gets or sets the number of units per base-unit.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Unit.WKT">
            <summary>
            Gats a well-known text representation of this object.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Unit.XML">
            <summary>
            Gets an XML representation of this object.
            </summary>
            <exception cref="T:System.NotImplementedException">Throws always</exception>
        </member>
        <member name="T:MapAround.CoordinateSystems.LinearUnit">
            <summary>
            Represents a linear unit of measurement.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.LinearUnit.#ctor(System.Double,System.String,System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of an instance of the MapAround.CoordinateSystems.LinearUnit.
            </summary>
            <param name="metersPerUnit">Number of meters per LinearUnit></param>
            <param name="name">Name</param>
            <param name="authority">Authority name</param>
            <param name="authorityCode">Authority-specific identification code</param>
            <param name="alias">Alias</param>
            <param name="abbreviation">Abbreviation</param>
            <param name="remarks">Provider-supplied remarks</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.LinearUnit.EqualParams(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal</returns>
        </member>
        <member name="P:MapAround.CoordinateSystems.LinearUnit.Metre">
            <summary>
            Gets the International metre. SI standard unit.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.LinearUnit.Foot">
            <summary>
            Gets the foot linear unit (1ft = 0.3048m).
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.LinearUnit.USSurveyFoot">
            <summary>
            Gets the US Survey foot linear unit (1ftUS = 0.304800609601219m).
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.LinearUnit.NauticalMile">
            <summary>
            Gets the Nautical Mile linear unit (1NM = 1852m).
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.LinearUnit.ClarkesFoot">
            <summary>
            Gets Clarke's foot.
            </summary>
            <remarks>
            Assumes Clarke's 1865 ratio of 1 British foot = 0.3047972654 French legal metres applies to the international metre.
            Used in older Australian, southern African &amp; British West Indian mapping.
            </remarks>
        </member>
        <member name="P:MapAround.CoordinateSystems.LinearUnit.MetersPerUnit">
            <summary>
            Gets or sets the number of meters per LinearUnit>.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.LinearUnit.WKT">
            <summary>
            Gets a well-known text representation of this object.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.LinearUnit.XML">
            <summary>
            Gets an XML representation of this object.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.AngularUnit">
            <summary>
            Represents an angular unit of measurement.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.AngularUnit.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the MapAround.CoordinateSystems.AngularUnit.
            </summary>
            <param name="radiansPerUnit">Radians per unit</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.AngularUnit.#ctor(System.Double,System.String,System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the MapAround.CoordinateSystems.AngularUnit.
            </summary>
            <param name="radiansPerUnit">Radians per unit</param>
            <param name="name">Name</param>
            <param name="authority">Authority name</param>
            <param name="authorityCode">Authority-specific identification code.</param>
            <param name="alias">Alias</param>
            <param name="abbreviation">Abbreviation</param>
            <param name="remarks">Provider-supplied remarks</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.AngularUnit.EqualParams(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal, false otherwise</returns>
        </member>
        <member name="P:MapAround.CoordinateSystems.AngularUnit.Degrees">
            <summary>
            Gets the angular degrees that is PI/180 = 0.017453292519943295769236907684886 radians
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.AngularUnit.Radian">
            <summary>
            Gets the radian. SI standard unit.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.AngularUnit.Grad">
            <summary>
            Gets the grad. PI / 200 = 0.015707963267948966192313216916398 radians
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.AngularUnit.Gon">
            <summary>
            Gets the gon. PI / 200 = 0.015707963267948966192313216916398 radians
            </summary>
            
        </member>
        <member name="P:MapAround.CoordinateSystems.AngularUnit.RadiansPerUnit">
            <summary>
            Gets or sets the number of radians per <see cref="T:MapAround.CoordinateSystems.AngularUnit"/>.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.AngularUnit.WKT">
            <summary>
            Gets a well-known text representation of this object.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.AngularUnit.XML">
            <summary>
            Gets an XML representation of this object.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.IEllipsoid">
            <summary>
            Defines the standard information stored with ellipsoid objects.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.IEllipsoid.SurfaceArea">
            <summary>
            Calculates an area of the ellipsoid surface.
            </summary>
            <returns>an area of the ellipsoid surface</returns>
        </member>
        <member name="P:MapAround.CoordinateSystems.IEllipsoid.SemiMajorAxis">
            <summary>
            Gets or sets the value of the semi-major axis.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.IEllipsoid.SemiMinorAxis">
            <summary>
            Gets or sets the value of the semi-minor axis.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.IEllipsoid.InverseFlattening">
            <summary>
            Gets or sets the value of the inverse of the flattening constant of the ellipsoid.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.IEllipsoid.AxisUnit">
            <summary>
            Gets or sets the value of the axis unit.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.IEllipsoid.IsInvFDefinitive">
            <summary>
            Gets a value indicating whether the Inverse Flattening is definitive 
            for this ellipsoid. 
            <para>Some ellipsoids use the IVF as the defining value, 
            and calculate the polar radius whenever asked. Otherellipsoids use the 
            polar radius to calculate the IVF whenever asked. This distinction can 
            be important to avoid floating-point rounding errors.
            </para>
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.Ellipsoid">
            <summary>
            Represents an ellipsoid.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Ellipsoid.#ctor(System.Double,System.Double,System.Double,System.Boolean,MapAround.CoordinateSystems.ILinearUnit,System.String,System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the MapAround.CoordinateSystems.Ellipsoid.
            </summary>
            <param name="semiMajorAxis">Semi major axis</param>
            <param name="semiMinorAxis">Semi minor axis</param>
            <param name="inverseFlattening">Inverse flattening</param>
            <param name="isIvfDefinitive">Inverse Flattening is definitive for this ellipsoid (Semi-minor axis will be overridden)</param>
            <param name="axisUnit">Axis unit</param>
            <param name="name">Name</param>
            <param name="authority">Authority name</param>
            <param name="code">Authority-specific identification code.</param>
            <param name="alias">Alias</param>
            <param name="abbreviation">Abbreviation</param>
            <param name="remarks">Provider-supplied remarks</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Ellipsoid.SurfaceArea">
            <summary>
            Calculates an area of the ellipsoid surface.
            </summary>
            <returns>An area of the ellipsoid surface.</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Ellipsoid.EqualParams(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal, false otherwise</returns>
        </member>
        <member name="P:MapAround.CoordinateSystems.Ellipsoid.Krasovsky1940">
            <summary>
            Gets the Krassovsky ellipsoid.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Ellipsoid.PZ90">
            <summary>
            Gets the PZ90 ellipsoid which is used by GLONASS system.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Ellipsoid.WGS84">
            <summary>
            Gets the WGS84 ellipsoid.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Ellipsoid.WGS72">
            <summary>
            Gets the WGS72 ellipsoid.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Ellipsoid.GRS80">
            <summary>
            Gets the GRS 1980 ellipsoid.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Ellipsoid.International1924">
            <summary>
            Gets the International 1924 ellipsoid.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Ellipsoid.Sphere">
            <summary>
            Gets an authalic sphere derived from GRS 1980 ellipsoid (code 7019).
            </summary>
            <remarks>
             An authalic sphere is one with a surface area equal to the surface 
             area of the ellipsoid). 1/f is infinite.
            </remarks>
        </member>
        <member name="P:MapAround.CoordinateSystems.Ellipsoid.SemiMajorAxis">
            <summary>
            Gets or sets the value of the semi-major axis.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Ellipsoid.SemiMinorAxis">
            <summary>
            Gets or sets the value of the semi-minor axis.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Ellipsoid.InverseFlattening">
            <summary>
            Gets or sets the value of the inverse of the flattening constant of the ellipsoid.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Ellipsoid.AxisUnit">
            <summary>
            Gets or sets the value of the axis unit.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Ellipsoid.IsInvFDefinitive">
            <summary>
            Gets or sets a value indicating whether the Inverse Flattening is definitive 
            for this ellipsoid. 
            <para>Some ellipsoids use the IVF as the defining value, 
            and calculate the polar radius whenever asked. Otherellipsoids use the 
            polar radius to calculate the IVF whenever asked. This distinction can 
            be important to avoid floating-point rounding errors.
            </para>
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Ellipsoid.WKT">
            <summary>
            Gats a well-known text representation of this object.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Ellipsoid.XML">
            <summary>
            Gets an XML representation of this object.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.IDatum">
            <summary>
            Provides access to members of the datum object.
            </summary>
            <remarks>
            For the OGC abstract model, it can be defined as a set of real points on the Earth
            that have coordinates. A datum can be thought of as a set of parameters
            defining completely the origin and orientation of a coordinate system with respect
            to the earth. A textual description and/or a set of parameters describing the
            relationship of a coordinate system to some predefined physical locations (such
            as center of mass) and physical directions (such as axis of spin). The definition
            of the datum may also include the temporal behavior (such as the rate of change of
            the orientation of the coordinate axes).
            </remarks>
        </member>
        <member name="P:MapAround.CoordinateSystems.IDatum.DatumType">
            <summary>
            Gets or sets the type of the datum.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.IPrimeMeridian">
            <summary>
            Defines the standard information stored with prime
            meridian objects. Any prime meridian object must 
            implement this interface as well as the IInfo 
            interface.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.IPrimeMeridian.Longitude">
            <summary>
            Gets or sets the longitude of the prime meridian 
            (relative to the Greenwich prime meridian).
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.IPrimeMeridian.AngularUnit">
            <summary>
            Gets or sets the AngularUnits.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.PrimeMeridian">
            <summary>
            Represents a meridian used to take longitude 
            measurements from.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.PrimeMeridian.#ctor(System.Double,MapAround.CoordinateSystems.IAngularUnit,System.String,System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the MapAround.CoordinateSystems.PrimeMeridian .
            </summary>
            <param name="longitude">Longitude of prime meridian</param>
            <param name="angularUnit">Angular unit</param>
            <param name="name">Name</param>
            <param name="authority">Authority name</param>
            <param name="authorityCode">Authority-specific identification code.</param>
            <param name="alias">Alias</param>
            <param name="abbreviation">Abbreviation</param>
            <param name="remarks">Provider-supplied remarks</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.PrimeMeridian.EqualParams(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal, false otherwise</returns>
        </member>
        <member name="P:MapAround.CoordinateSystems.PrimeMeridian.Greenwich">
            <summary>
            Gets the Greenwich prime meridian.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.PrimeMeridian.Lisbon">
            <summary>
            Gets the Lisbon prime meridian.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.PrimeMeridian.Paris">
            <summary>
            Gets the Paris prime meridian.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.PrimeMeridian.Madrid">
            <summary>
            Gets the Madrid prime meridian.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.PrimeMeridian.Rome">
            <summary>
            Gets the Rome prime meridian.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.PrimeMeridian.Bern">
            <summary>
            Gets the Bern prime meridian.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.PrimeMeridian.Jakarta">
            <summary>
            Gets the Jakarta prime meridian.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.PrimeMeridian.Brussels">
            <summary>
            Gets the Brussels prime meridian.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.PrimeMeridian.Stockholm">
            <summary>
            Gets the Stockholm prime meridian.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.PrimeMeridian.Athens">
            <summary>
            Gets the Athens prime meridian.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.PrimeMeridian.Oslo">
            <summary>
            Gets the Oslo prime meridian.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.PrimeMeridian.Longitude">
            <summary>
            Gets or sets the longitude of the prime meridian (relative to the Greenwich prime meridian).
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.PrimeMeridian.AngularUnit">
            <summary>
            Gets or sets the AngularUnits.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.PrimeMeridian.WKT">
            <summary>
            Gats a well-known text representation of this object.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.PrimeMeridian.XML">
            <summary>
            Gets an XML representation of this object.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.IHorizontalDatum">
            <summary>
            Provides access to members of the horizontal datum object.
            Used to measure positions on the surface of the Earth.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.IHorizontalDatum.Ellipsoid">
            <summary>
            Gets or sets the ellipsoid of the datum.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.IHorizontalDatum.Wgs84Parameters">
            <summary>
            Gets preferred parameters for a Bursa Wolf transformation into WGS84. 
            The 7 returned values correspond to (dx,dy,dz) in meters, 
            (ex,ey,ez) in arc-seconds, and scaling in parts-per-million.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.IVerticalDatum">
            <summary>
            Provides access to members of the vertival datum object.
            Used to measure vertical distances.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.ILocalDatum">
            <summary>
            Provides access to members of the local datum object.
            If two local datum objects have the same datum type and name,
            then they can be considered equal. This means that coordinates can be
            transformed between two different local coordinate systems, as long as
            they are based on the same local datum.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.DatumType">
            <summary>
            Types of datums.
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.DatumType.HD_Min">
            <summary>
            Lowest possible value for horizontal datum types
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.DatumType.HD_Other">
            <summary>
            Unspecified horizontal datum type. Horizontal datums with this type should never
            supply a conversion to WGS84 using Bursa Wolf parameters.
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.DatumType.HD_Classic">
            <summary>
            These datums, such as ED50, NAD27 and NAD83, have been designed to support
            horizontal positions on the ellipsoid as opposed to positions in 3-D space. 
            These datums were designed mainly to support a horizontal component of 
            a position in a domain of limited extent, such as a country, a region 
            or a continent.
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.DatumType.HD_Geocentric">
            <summary>
            A geocentric datum is a "satellite age" modern geodetic datum mainly of global
            extent, such as WGS84 (used in GPS), PZ90 (used in GLONASS) and ITRF. These
            datums were designed to support both a horizontal component of position and
            a vertical component of position (through ellipsoidal heights). The regional
            realizations of ITRF, such as ETRF, are also included in this category.
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.DatumType.HD_Max">
            <summary>
            Highest possible value for horizontal datum types.
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.DatumType.VD_Min">
            <summary>
            Lowest possible value for vertical datum types.
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.DatumType.VD_Other">
            <summary>
            Unspecified vertical datum type.
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.DatumType.VD_Orthometric">
            <summary>
            A vertical datum for orthometric heights that are measured along the plumb line.
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.DatumType.VD_Ellipsoidal">
            <summary>
            A vertical datum for ellipsoidal heights that are measured along the normal to
            the ellipsoid used in the definition of horizontal datum.
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.DatumType.VD_AltitudeBarometric">
            <summary>
            The vertical datum of altitudes or heights in the atmosphere. These are
            approximations of orthometric heights obtained with the help of a barometer or
            a barometric altimeter. These values are usually expressed in one of the
            following units: meters, feet, millibars (used to measure pressure levels), or
            theta value (units used to measure geopotential height).
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.DatumType.VD_Normal">
            <summary>
            A normal height system.
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.DatumType.VD_GeoidModelDerived">
            <summary>
            A vertical datum of geoid model derived heights, also called GPS-derived heights.
            These heights are approximations of orthometric heights (H), constructed from the
            ellipsoidal heights (h) by the use of the given geoid undulation model (N)
            through the equation: H=h-N.
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.DatumType.VD_Depth">
            <summary>
            This attribute is used to support the set of datums generated for hydrographic
            engineering projects where depth measurements below sea level are needed. It is
            often called a hydrographic or a marine datum. Depths are measured in the
            direction perpendicular (approximately) to the actual equipotential surfaces of
            the earth's gravity field, using such procedures as echo-sounding.
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.DatumType.VD_Max">
            <summary>
            Highest possible value for vertical datum types.
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.DatumType.LD_Min">
            <summary>
            Lowest possible value for vertical datum types.
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.DatumType.LD_Max">
            <summary>
            Highest possible value for local datum types.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.Datum">
            <summary>
            Represents a datum. Datum is a set of quantities from which other 
            quantities are calculated.
            </summary>
            <remarks>
            For the OGC abstract model, it can be defined as a set of real points on the earth
            that have coordinates. EG. A datum can be thought of as a set of parameters
            defining completely the origin and orientation of a coordinate system with respect
            to the earth. A textual description and/or a set of parameters describing the
            relationship of a coordinate system to some predefined physical locations (such
            as center of mass) and physical directions (such as axis of spin). The definition
            of the datum may also include the temporal behavior (such as the rate of change of
            the orientation of the coordinate axes).
            </remarks>
        </member>
        <member name="M:MapAround.CoordinateSystems.Datum.#ctor(MapAround.CoordinateSystems.DatumType,System.String,System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the MapAround.CoordinateSystems.Datum.
            </summary>
            <param name="type">Datum type</param>
            <param name="name">Name</param>
            <param name="authority">Authority name</param>
            <param name="code">Authority-specific identification code</param>
            <param name="alias">Alias</param>
            <param name="abbreviation">Abbreviation</param>
            <param name="remarks">Provider-supplied remarks</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Datum.EqualParams(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal, false otherwise</returns>
        </member>
        <member name="P:MapAround.CoordinateSystems.Datum.DatumType">
            <summary>
            Gets or sets the type of the datum.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.HorizontalDatum">
            <summary>
            Represents a horizontal datum.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.HorizontalDatum.#ctor(MapAround.CoordinateSystems.IEllipsoid,MapAround.CoordinateSystems.Wgs84ConversionInfo,MapAround.CoordinateSystems.DatumType,System.String,System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the MapAround.CoordinateSystems.HorizontalDatum.
            </summary>
            <param name="ellipsoid">Ellipsoid</param>
            <param name="toWgs84">Parameters for a Bursa Wolf transformation into WGS84</param>
            <param name="type">Datum type</param>
            <param name="name">Name</param>
            <param name="authority">Authority name</param>
            <param name="code">Authority-specific identification code.</param>
            <param name="alias">Alias</param>
            <param name="abbreviation">Abbreviation</param>
            <param name="remarks">Provider-supplied remarks</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.HorizontalDatum.EqualParams(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal, false otherwise</returns>
        </member>
        <member name="P:MapAround.CoordinateSystems.HorizontalDatum.WGS84">
            <summary>
            EPSG WGS84
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.HorizontalDatum.WGS72">
            <summary>
            World Geodetic System 1972
            </summary>
            <remarks>
            <para>Was used by GPS NAVSTAR up to the 1987</para>
            </remarks>
        </member>
        <member name="P:MapAround.CoordinateSystems.HorizontalDatum.ETRF89">
            <summary>
            Gets the European Terrestrial Reference System 1989.
            </summary>
            <remarks>
            <para>Area of use:
            Europe: Albania; Andorra; Austria; Belgium; Bosnia and Herzegovina; Bulgaria; Croatia;
            Cyprus; Czech Republic; Denmark; Estonia; Finland; Faroe Islands; France; Germany; Greece;
            Hungary; Ireland; Italy; Latvia; Liechtenstein; Lithuania; Luxembourg; Malta; Netherlands;
            Norway; Poland; Portugal; Romania; San Marino; Serbia and Montenegro; Slovakia; Slovenia;
            Spain; Svalbard; Sweden; Switzerland; United Kingdom (UK) including Channel Islands and
            Isle of Man; Vatican City State.</para>
            <para>Origin description: Fixed to the stable part of the Eurasian continental
            plate and consistent with ITRS at the epoch 1989.0.</para>
            </remarks>
        </member>
        <member name="P:MapAround.CoordinateSystems.HorizontalDatum.ED50">
            <summary>
            Gets the European Datum 1950.
            </summary>
            <remarks>
            <para>Area of use:
            Europe - west - Denmark; Faroe Islands; France offshore; Israel offshore; Italy including San
            Marino and Vatican City State; Ireland offshore; Netherlands offshore; Germany; Greece (offshore);
            North Sea; Norway; Spain; Svalbard; Turkey; United Kingdom UKCS offshore. Egypt - Western Desert.
            </para>
            <para>Origin description: Fundamental point: Potsdam (Helmert Tower).
            Latitude: 52 deg 22 min 51.4456 sec N; Longitude: 13 deg  3 min 58.9283 sec E (of Greenwich).</para>
            </remarks>
        </member>
        <member name="P:MapAround.CoordinateSystems.HorizontalDatum.Ellipsoid">
            <summary>
            Gets or sets the ellipsoid of the datum
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.HorizontalDatum.Wgs84Parameters">
            <summary>
            Gets preferred parameters for a Bursa Wolf transformation into WGS84
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.HorizontalDatum.WKT">
            <summary>
            Gats a well-known text representation of this object.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.HorizontalDatum.XML">
            <summary>
            Gets an XML representation of this object.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.AxisOrientationEnum">
            <summary>
            Possible oriantetions of axis. Some coordinate systems use non-standard orientations.
            For example, the first axis in South African grids usually points West,
            instead of East. This information is obviously relevant for algorithms
            converting South African grid coordinates into Lat/Long.
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.AxisOrientationEnum.Other">
            <summary>
            Unknown or unspecified axis orientation. This can be used for local or fitted coordinate systems.
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.AxisOrientationEnum.North">
            <summary>
            Increasing ordinates values go North. This is usually used for Grid Y coordinates and Latitude.
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.AxisOrientationEnum.South">
            <summary>
            Increasing ordinates values go South. This is rarely used.
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.AxisOrientationEnum.East">
            <summary>
            Increasing ordinates values go East. This is rarely used.
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.AxisOrientationEnum.West">
            <summary>
            Increasing ordinates values go West. This is usually used for Grid X coordinates and Longitude.
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.AxisOrientationEnum.Up">
            <summary>
            Increasing ordinates values go up. This is used for vertical coordinate systems.
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.AxisOrientationEnum.Down">
            <summary>
            Increasing ordinates values go down. This is used for vertical coordinate systems.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.AxisInfo">
            <summary>
            Represents the coordinate axis information.
            This is used to label axes, and indicate the orientation.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.AxisInfo.#ctor(System.String,MapAround.CoordinateSystems.AxisOrientationEnum)">
            <summary>
            Initializes a new instance of the MapAround.CoordinateSystems.AxisInfo.
            </summary>
            <param name="name">Name of axis</param>
            <param name="orientation">Axis orientation</param>
        </member>
        <member name="P:MapAround.CoordinateSystems.AxisInfo.Name">
            <summary>
            Gets or sets a human readable name for axis. 
            Possible values are X, Y, Long, Lat or any other short string.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.AxisInfo.Orientation">
            <summary>
            Gets or sets the orientation of this axis.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.AxisInfo.WKT">
            <summary>
            Gats a well-known text representation of this object.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.AxisInfo.XML">
            <summary>
            Gets an XML representation of this object.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.ICoordinateSystemAuthorityFactory">
            <summary>
            Represents an object that creates spatial reference objects 
            using codes.
            </summary>
            <remarks>
            The codes are maintained by an external authority. A commonly used authority 
            is EPSG, which is also used in the GeoTIFF standard.
            </remarks>
        </member>
        <member name="M:MapAround.CoordinateSystems.ICoordinateSystemAuthorityFactory.CreateProjectedCoordinateSystem(System.Int64)">
            <summary>
            Returns a projected coordinate system object corresponding to the given code.
            </summary>
            <param name="code">The identification code</param>
            <returns>The projected coordinate system object with the given code</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.ICoordinateSystemAuthorityFactory.CreateGeographicCoordinateSystem(System.Int64)">
            <summary>
            Returns a geographic coordinate system object corresponding to the given code.
            </summary>
            <param name="code">The identification code</param>
            <returns>The geographic coordinate system object with the given code</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.ICoordinateSystemAuthorityFactory.CreateHorizontalDatum(System.Int64)">
            <summary>
            Returns a horizontal datum object corresponding to the given code.
            </summary>
            <param name="code">The identification code</param>
            <returns>The horizontal datum object with the given code</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.ICoordinateSystemAuthorityFactory.CreateEllipsoid(System.Int64)">
            <summary>
            Returns an ellipsoid object corresponding to the given code.
            </summary>
            <param name="code">The identification code</param>
            <returns>The ellipsoid object with the given code</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.ICoordinateSystemAuthorityFactory.CreatePrimeMeridian(System.Int64)">
            <summary>
            Returns a prime meridian object corresponding to the given code.
            </summary>
            <param name="code">The identification code</param>
            <returns>The prime meridian object with the given code</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.ICoordinateSystemAuthorityFactory.CreateLinearUnit(System.Int64)">
            <summary>
            Returns a linear unit object corresponding to the given code.
            </summary>
            <param name="code">The identification code</param>
            <returns>The linear unit object with the given code</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.ICoordinateSystemAuthorityFactory.CreateAngularUnit(System.Int64)">
            <summary>
            Returns an <see cref="T:MapAround.CoordinateSystems.IAngularUnit">angular unit</see> object corresponding to the given code.
            </summary>
            <param name="code">The identification code</param>
            <returns>The angular unit object for the given code</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.ICoordinateSystemAuthorityFactory.CreateVerticalDatum(System.Int64)">
            <summary>
            Creates a <see cref="T:MapAround.CoordinateSystems.IVerticalDatum"/> from a code.
            </summary>
            <param name="code">Authority code</param>
            <returns>Vertical datum for the given code</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.ICoordinateSystemAuthorityFactory.CreateVerticalCoordinateSystem(System.Int64)">
            <summary>
            Create a <see cref="T:MapAround.CoordinateSystems.IVerticalCoordinateSystem">vertical coordinate system</see> from a code.
            </summary>
            <param name="code">Authority code</param>
            <returns></returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.ICoordinateSystemAuthorityFactory.CreateCompoundCoordinateSystem(System.Int64)">
            <summary>
            Creates a 3D coordinate system from a code.
            </summary>
            <param name="code">Authority code</param>
            <returns>Compound coordinate system for the given code</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.ICoordinateSystemAuthorityFactory.CreateHorizontalCoordinateSystem(System.Int64)">
            <summary>
            Creates a <see cref="T:MapAround.CoordinateSystems.IHorizontalCoordinateSystem">horizontal co-ordinate system</see> from a code.
            The horizontal coordinate system could be geographic or projected.
            </summary>
            <param name="code">Authority code</param>
            <returns>Horizontal coordinate system for the given code</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.ICoordinateSystemAuthorityFactory.GeoidFromWktName(System.String)">
            <summary>
            Gets the Geoid code from a WKT name.
            </summary>
            <remarks>
            In the OGC definition of WKT horizontal datums, the geoid is referenced
            by a quoted string, which is used as a key value. This method converts
            the key value string into a code recognized by this authority.
            </remarks>
            <param name="wkt"></param>
            <returns>A string representing Geoid</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.ICoordinateSystemAuthorityFactory.WktGeoidName(System.String)">
            <summary>
            Gets the WKT name of a Geoid.
            </summary>
            <remarks>
            In the OGC definition of WKT horizontal datums, the geoid is referenced by
            a quoted string, which is used as a key value. This method gets the OGC WKT
            key value from a geoid code.
            </remarks>
            <param name="geoid">A string representing Geoid</param>
            <returns>the WKT name of a Geoid</returns>
        </member>
        <member name="P:MapAround.CoordinateSystems.ICoordinateSystemAuthorityFactory.Authority">
            <summary>
            Gets the authority name for this factory (e.g., "EPSG" or "POSC").
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.ICoordinateSystemAuthorityFactory.DescriptionText">
            <summary>
            Gets a description of the object corresponding to a code.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.ICoordinateSystemFactory">
            <summary>
            Builds up complex coordinate systym objects 
            from simpler objects or values.
            </summary>
            <remarks>
            <para>ICoordinateSystemFactory allows applications to make coordinate systems that
            cannot be created by a <see cref="T:MapAround.CoordinateSystems.ICoordinateSystemAuthorityFactory"/>. This factory is very
            flexible, whereas the authority factory is easier to use.</para>
            <para>So <see cref="T:MapAround.CoordinateSystems.ICoordinateSystemAuthorityFactory"/>can be used to make 'standard' coordinate
            systems, and <see cref="T:MapAround.CoordinateSystems.CoordinateSystemFactory"/> can be used to make 'special'
            coordinate systems.</para>
            <para>For example, the EPSG authority has codes for USA state plane coordinate systems
            using the NAD83 datum, but these coordinate systems always use meters. EPSG does not
            have codes for NAD83 state plane coordinate systems that use feet units. This factory
            lets an application create such a hybrid coordinate system.</para>
            </remarks>
        </member>
        <member name="M:MapAround.CoordinateSystems.ICoordinateSystemFactory.CreateCompoundCoordinateSystem(System.String,MapAround.CoordinateSystems.ICoordinateSystem,MapAround.CoordinateSystems.ICoordinateSystem)">
            <summary>
            Creates a <see cref="T:MapAround.CoordinateSystems.ICompoundCoordinateSystem"/>.
            </summary>
            <param name="name">Name of compound coordinate system.</param>
            <param name="head">Head coordinate system</param>
            <param name="tail">Tail coordinate system</param>
            <returns>Compound coordinate system</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.ICoordinateSystemFactory.CreateEllipsoid(System.String,System.Double,System.Double,MapAround.CoordinateSystems.ILinearUnit)">
            <summary>
            Creates an <see cref="T:MapAround.CoordinateSystems.IEllipsoid"/> from radius values.
            </summary>
            <seealso cref="M:Topology.CoordinateSystems.ICoordinateSystemFactory.CreateFlattenedSphere(System.String,System.Double,System.Double,Topology.CoordinateSystems.ILinearUnit)"/>
            <param name="name">Name of ellipsoid</param>
            <param name="semiMajorAxis"></param>
            <param name="semiMinorAxis"></param>
            <param name="linearUnit"></param>
            <returns>Ellipsoid</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.ICoordinateSystemFactory.CreateFittedCoordinateSystem(System.String,MapAround.CoordinateSystems.ICoordinateSystem,System.String,System.Collections.Generic.List{MapAround.CoordinateSystems.AxisInfo})">
            <summary>
            Creates a <see cref="T:MapAround.CoordinateSystems.IFittedCoordinateSystem"/>.
            </summary>
            <remarks>The units of the axes in the fitted coordinate system will be
            inferred from the units of the base coordinate system. If the affine map
            performs a rotation, then any mixed axes must have identical units. For
            example, a (lat_deg,lon_deg,height_feet) system can be rotated in the
            (lat,lon) plane, since both affected axes are in degrees. But you
            should not rotate this coordinate system in any other plane.</remarks>
            <param name="name">Name of coordinate system</param>
            <param name="baseCoordinateSystem">Base coordinate system</param>
            <param name="toBaseWkt"></param>
            <param name="arAxes"></param>
            <returns>Fitted coordinate system</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.ICoordinateSystemFactory.CreateFlattenedSphere(System.String,System.Double,System.Double,MapAround.CoordinateSystems.ILinearUnit)">
            <summary>
            Creates an <see cref="T:MapAround.CoordinateSystems.IEllipsoid"/> from an major radius, and inverse flattening.
            </summary>
            <param name="name">Name of ellipsoid</param>
            <param name="semiMajorAxis">Semi major-axis</param>
            <param name="inverseFlattening">Inverse flattening</param>
            <param name="linearUnit">Linear unit</param>
            <returns>Ellipsoid</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.ICoordinateSystemFactory.CreateFromXml(System.String)">
            <summary>
            Creates a coordinate system object from an XML string.
            </summary>
            <param name="xml">XML representation for the spatial reference</param>
            <returns>The resulting spatial reference object</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.ICoordinateSystemFactory.CreateFromWkt(System.String)">
            <summary>
            Creates a spatial reference object given its Well-known text representation.
            The output object may be either a <see cref="T:MapAround.CoordinateSystems.IGeographicCoordinateSystem"/> or
            a <see cref="T:MapAround.CoordinateSystems.IProjectedCoordinateSystem"/>.
            </summary>
            <param name="WKT">The Well-known text representation for the spatial reference</param>
            <returns>The resulting spatial reference object</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.ICoordinateSystemFactory.CreateGeographicCoordinateSystem(System.String,MapAround.CoordinateSystems.IAngularUnit,MapAround.CoordinateSystems.IHorizontalDatum,MapAround.CoordinateSystems.IPrimeMeridian,MapAround.CoordinateSystems.AxisInfo,MapAround.CoordinateSystems.AxisInfo)">
            <summary>
            Creates a <see cref="T:MapAround.CoordinateSystems.IGeographicCoordinateSystem"/>, which could be Lat/Lon or Lon/Lat.
            </summary>
            <param name="name">Name of geographical coordinate system</param>
            <param name="angularUnit">Angular units</param>
            <param name="datum">Horizontal datum</param>
            <param name="primeMeridian">Prime meridian</param>
            <param name="axis0">First axis</param>
            <param name="axis1">Second axis</param>
            <returns>Geographic coordinate system</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.ICoordinateSystemFactory.CreateHorizontalDatum(System.String,MapAround.CoordinateSystems.DatumType,MapAround.CoordinateSystems.IEllipsoid,MapAround.CoordinateSystems.Wgs84ConversionInfo)">
            <summary>
            Creates <see cref="T:MapAround.CoordinateSystems.IHorizontalDatum"/> from ellipsoid and Bursa-World parameters.
            </summary>
            <remarks>
            Since this method contains a set of Bursa-Wolf parameters, the created
            datum will always have a relationship to WGS84. If you wish to create a
            horizontal datum that has no relationship with WGS84, then you can
            either specify a <see cref="T:MapAround.CoordinateSystems.DatumType">horizontalDatumType</see> 
            of <see cref="F:MapAround.CoordinateSystems.DatumType.HD_Other"/>, 
            or create it via WKT.
            </remarks>
            <param name="name">Name of ellipsoid</param>
            <param name="datumType">Type of datum</param>
            <param name="ellipsoid">Ellipsoid</param>
            <param name="toWgs84">Wgs84 conversion parameters</param>
            <returns>Horizontal datum</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.ICoordinateSystemFactory.CreateLocalCoordinateSystem(System.String,MapAround.CoordinateSystems.ILocalDatum,MapAround.CoordinateSystems.IUnit,System.Collections.Generic.List{MapAround.CoordinateSystems.AxisInfo})">
            <summary>
            Creates a local coordinate system.
            </summary>
            <param name="name">Name</param>
            <param name="datum">Local datum</param>
            <param name="unit"> Unit of measurement </param>
            <param name="axes">The coordinate axes</param>
            <returns>Local coordinate system</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.ICoordinateSystemFactory.CreateLocalDatum(System.String,MapAround.CoordinateSystems.DatumType)">
            <summary>
            Creates a <see cref="T:MapAround.CoordinateSystems.ILocalDatum" />.
            </summary>
            <param name="name">Name of datum</param>
            <param name="datumType">Datum type</param>
            <returns></returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.ICoordinateSystemFactory.CreatePrimeMeridian(System.String,MapAround.CoordinateSystems.IAngularUnit,System.Double)">
            <summary>
            Creates a <see cref="T:MapAround.CoordinateSystems.IPrimeMeridian"/>, relative to Greenwich.
            </summary>
            <param name="name">Name of prime meridian</param>
            <param name="angularUnit">Angular unit</param>
            <param name="longitude">Longitude</param>
            <returns>Prime meridian</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.ICoordinateSystemFactory.CreateProjectedCoordinateSystem(System.String,MapAround.CoordinateSystems.IGeographicCoordinateSystem,MapAround.CoordinateSystems.IProjection,MapAround.CoordinateSystems.ILinearUnit,MapAround.CoordinateSystems.AxisInfo,MapAround.CoordinateSystems.AxisInfo)">
            <summary>
            Creates a <see cref="T:MapAround.CoordinateSystems.IProjectedCoordinateSystem"/> using a projection object.
            </summary>
            <param name="name">Name of projected coordinate system</param>
            <param name="gcs">Geographic coordinate system</param>
            <param name="projection">Projection</param>
            <param name="linearUnit">Linear unit</param>
            <param name="axis0">Primary axis</param>
            <param name="axis1">Secondary axis</param>
            <returns>Projected coordinate system</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.ICoordinateSystemFactory.CreateProjection(System.String,System.String,System.Collections.Generic.List{MapAround.CoordinateSystems.Projections.ProjectionParameter})">
            <summary>
            Creates a <see cref="T:MapAround.CoordinateSystems.IProjection"/>.
            </summary>
            <param name="name">Name of projection</param>
            <param name="wktProjectionClass">Projection class</param>
            <param name="Parameters">Projection parameters</param>
            <returns>Projection</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.ICoordinateSystemFactory.CreateVerticalCoordinateSystem(System.String,MapAround.CoordinateSystems.IVerticalDatum,MapAround.CoordinateSystems.ILinearUnit,MapAround.CoordinateSystems.AxisInfo)">
            <summary>
            Creates a vertical coordinate system.
            </summary>
            <param name="name">Name</param>
            <param name="datum">Vertical Datum</param>
            <param name="verticalUnit">The unit of measurement of height (depth, etc.)</param>
            <param name="axis">Coordinate axis</param>
            <returns>The vertical coordinate</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.ICoordinateSystemFactory.CreateVerticalDatum(System.String,MapAround.CoordinateSystems.DatumType)">
            <summary>
            Creates a <see cref="T:MapAround.CoordinateSystems.IVerticalDatum"/> from an enumerated type value.
            </summary>
            <param name="name">Name of datum</param>
            <param name="datumType">Type of datum</param>
            <returns>Vertical datum</returns>
        </member>
        <member name="T:MapAround.CoordinateSystems.ICoordinateSystem">
            <summary>
            Base interface for all coordinate systems
            </summary>
            <remarks>
            <para>A coordinate system is a mathematical space, where the elements of the space are called
            positions. Each position is described by a list of numbers. The length of the list corresponds
            to the dimension of the coordinate system. So in a 2D coordinate system each position is
            described by a list containing 2 numbers.</para>
            <para>
            However, in a coordinate system, not all lists of numbers correspond to a position -
            some lists may be outside the domain of the coordinate system. For example, in a 2D Lat/Lon
            coordinate system, the list (91,91) does not correspond to a position.</para>
            <para>
            Some coordinate systems also have a mapping from the mathematical space into locations
            in the real world. So in a Lat/Lon coordinate system, the mathematical position (lat, long)
            corresponds to a location on the surface of the Earth. This mapping from the mathematical
            space into real-world locations is called a Datum.</para>
            </remarks>
        </member>
        <member name="M:MapAround.CoordinateSystems.ICoordinateSystem.GetAxis(System.Int32)">
            <summary>
            Gets an axis details for dimension within coordinate system.
            </summary>
            <param name="dimension">Dimension</param>
            <returns>Axis info</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.ICoordinateSystem.GetUnits(System.Int32)">
            <summary>
            Returns units for dimension within coordinate system.
            </summary>
            <returns>Units for dimension within coordinate system</returns>
        </member>
        <member name="P:MapAround.CoordinateSystems.ICoordinateSystem.Dimension">
            <summary>
            Gets a dimension of the coordinate system.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.ICoordinateSystem.DefaultEnvelope">
            <summary>
            Gets default envelope of coordinate system.
            </summary>
            <remarks>
            Gets default envelope of coordinate system. Coordinate systems
            which are bounded should return the minimum bounding box of their
            domain. Unbounded coordinate systems should return a box which is
            as large as is likely to be used. For example, a (lon,lat)
            geographic coordinate system in degrees should return a box from
            (-180,-90) to (180,90), and a geocentric coordinate system could
            return a box from (-r,-r,-r) to (+r,+r,+r) where r is the
            approximate radius of the Earth.
            </remarks>
        </member>
        <member name="T:MapAround.CoordinateSystems.IHorizontalCoordinateSystem">
            <summary>
            Provides access to methods of a 2D coordinate system 
            suitable for positions on the Earth's surface.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.IHorizontalCoordinateSystem.HorizontalDatum">
            <summary>
            Gets or sets the HorizontalDatum.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.ILocalCoordinateSystem">
            <summary>
            Provides access to methods of a local coordinate system, 
            with uncertain relationship to the world.
            </summary>
            <remarks>In general, a local coordinate system cannot be related to other coordinate
            systems. However, if two objects supporting this interface have the same dimension,
            axes, units and datum then client code is permitted to assume that the two coordinate
            systems are identical. This allows several datasets from a common source (e.g. a CAD
            system) to be overlaid. In addition, some implementations of the Coordinate
            Transformation (CT) package may have a mechanism for correlating local datums. (E.g.
            from a database of transformations, which is created and maintained from real-world
            measurements.)
            </remarks>
        </member>
        <member name="P:MapAround.CoordinateSystems.ILocalCoordinateSystem.LocalDatum">
            <summary>
            Gets or sets the local datum
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.IProjectedCoordinateSystem">
            <summary>
            The IProjectedCoordinateSystem interface defines the standard information stored with
            projected coordinate system objects. A projected coordinate system is defined using a
            geographic coordinate system object and a projection object that defines the
            coordinate transformation from the geographic coordinate system to the projected
            coordinate systems. The instances of a single ProjectedCoordinateSystem COM class can
            be used to model different projected coordinate systems (e.g., UTM Zone 10, Albers)
            by associating the ProjectedCoordinateSystem instances with Projection instances
            belonging to different Projection COM classes (Transverse Mercator and Albers,
            respectively).
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.IProjectedCoordinateSystem.GeographicCoordinateSystem">
            <summary>
            Gets or sets the geographic coordinate system associated with the projected
            coordinate system.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.IProjectedCoordinateSystem.LinearUnit">
            <summary>
            Gets or sets the linear (projected) units of the projected coordinate system.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.IProjectedCoordinateSystem.Projection">
            <summary>
            Gets or sets the projection for the projected coordinate system.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.ICompoundCoordinateSystem">
            <summary>
            An aggregate of two coordinate systems (CRS). One of these is usually a
            CRS based on a two dimensional coordinate system such as a geographic or
            a projected coordinate system with a horizontal datum. The other is a
            vertical CRS which is a one-dimensional coordinate system with a vertical
            datum.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.ICompoundCoordinateSystem.HeadCS">
            <summary>
            Gets first sub-coordinate system.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.ICompoundCoordinateSystem.TailCS">
            <summary>
            Gets second sub-coordinate system.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.IGeocentricCoordinateSystem">
            <summary>
            A 3D coordinate system, with its origin at the center of the Earth.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.IGeocentricCoordinateSystem.HorizontalDatum">
            <summary>
            Gets or sets the HorizontalDatum. The horizontal datum is used to determine where
            the centre of the Earth is considered to be. All coordinate points will be
            measured from the centre of the Earth, and not the surface.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.IGeocentricCoordinateSystem.LinearUnit">
            <summary>
            Gets or sets the units used along all the axes.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.IGeocentricCoordinateSystem.PrimeMeridian">
            <summary>
            Gets or sets the PrimeMeridian.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.IGeographicCoordinateSystem">
            <summary>
            The IGeographicCoordinateSystem interface is a subclass of IGeodeticSpatialReference and
            defines the standard information stored with geographic coordinate system objects.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.IGeographicCoordinateSystem.GetWgs84ConversionInfo(System.Int32)">
            <summary>
            Gets details on a conversion to WGS84.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.IGeographicCoordinateSystem.AngularUnit">
            <summary>
            Gets or sets the angular units of the geographic coordinate system.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.IGeographicCoordinateSystem.PrimeMeridian">
            <summary>
            Gets or sets the prime meridian.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.IGeographicCoordinateSystem.NumConversionToWGS84">
            <summary>
            Gets the number of available conversions to WGS84 coordinates.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.IGeodeticSpatialReference">
            <summary>
            The IGeodeticSpatialReference interface defines a root interface for all types of geodetic
            spatial references, it is a subclass of ICoordinateSystem.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.IFittedCoordinateSystem">
            <summary>
            Defines a coordinate system which sits inside another coordinate system. The fitted
            coordinate system can be rotated and shifted, or use any other math transform
            to inject itself into the base coordinate system.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.IFittedCoordinateSystem.ToBase">
            <summary>
            Returns well-known text of a math transform to the base coordinate system.
            The dimension of this fitted coordinate system is determined by the source
            dimension of the math transform. The transform should be one-to-one within
            this coordinate system's domain, and the base coordinate system dimension
            must be at least as big as the dimension of this coordinate system.
            </summary>
            <returns>Well-known text of a math transform to the base coordinate system</returns>
        </member>
        <member name="P:MapAround.CoordinateSystems.IFittedCoordinateSystem.BaseCoordinateSystem">
            <summary>
            Gets underlying coordinate system.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.IVerticalCoordinateSystem">
            <summary>
            A one-dimensional coordinate system suitable for vertical measurements.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.IVerticalCoordinateSystem.VerticalDatum">
            <summary>
            Gets or sets the vertical datum, which indicates the measurement method
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.IVerticalCoordinateSystem.VerticalUnit">
            <summary>
            Gets or sets the units used along the vertical axis.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.IProjection">
            <summary>
            Provides access to members of the projection object.
            A projection object implements a coordinate transformation 
            from a geographic coordinate system to a projected coordinate system, 
            given the ellipsoid for the geographic coordinate system. 
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.IProjection.GetParameter(System.Int32)">
            <summary>
            Gets a parameter by its index.
            </summary>
            <param name="n">An index of the parameter</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.IProjection.GetParameter(System.String)">
            <summary>
            Gets a projection parameter by its name.
            </summary>
            <remarks>The names of parameters are case sensitive.</remarks>
            <param name="name">The parameter name</param>
        </member>
        <member name="P:MapAround.CoordinateSystems.IProjection.NumParameters">
            <summary>
            Gets a number of parameters.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.IProjection.ClassName">
            <summary>
            Gets a class of the projection. "Mercator" for example.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.CoordinateSystem">
            <summary>
            Base class for coordinate system classes.
            </summary>
            <remarks>
            <para>A coordinate system is a mathematical space, where the elements of the space
            are called positions. Each position is described by a list of numbers. The length
            of the list corresponds to the dimension of the coordinate system. So in a 2D
            coordinate system each position is described by a list containing 2 numbers.</para>
            <para>However, in a coordinate system, not all lists of numbers correspond to a
            position - some lists may be outside the domain of the coordinate system. For
            example, in a 2D Lat/Lon coordinate system, the list (91,91) does not correspond
            to a position.</para>
            <para>Some coordinate systems also have a mapping from the mathematical space into
            locations in the real world. So in a Lat/Lon coordinate system, the mathematical
            position (lat, long) corresponds to a location on the surface of the Earth. This
            mapping from the mathematical space into real-world locations is called a Datum.</para>
            </remarks>
        </member>
        <member name="M:MapAround.CoordinateSystems.CoordinateSystem.#ctor(System.String,System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            Инициализирует новый экземпляр
            </summary>
            <param name="name">Название</param>
            <param name="authority">Authority name</param>
            <param name="authorityCode">Authority-specific identification code.</param>
            <param name="alias">Псевдоним</param>
            <param name="abbreviation">Сокращение</param>
            <param name="remarks">Провайдер поставляемых замечаний</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.CoordinateSystem.GetUnits(System.Int32)">
            <summary>
            Возвращает единицы для измерения в системе координат.
            Каждое измерение в системе координат имеет соответствующие единицы.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.CoordinateSystem.GetAxis(System.Int32)">
            <summary>
            Возврат оси подробности для измерения в системе координат.
            </summary>
            <param name="dimension">Размерность</param>
            <returns>Информация оси</returns>
        </member>
        <member name="P:MapAround.CoordinateSystems.CoordinateSystem.Dimension">
            <summary>
            Получает размерность системы координат.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.CoordinateSystem.DefaultEnvelope">
            <summary>
            Gets or sets a default envelope of the coordinate system.
            Получает или задает по умолчанию оболочку системы координат.
            </summary>
            <remarks>
            Coordinate systems which are bounded should return the minimum bounding box of their domain.
            Системы координат, которые ограничены должна возвращать минимальный ограничивающий прямоугольник своей области.
            Unbounded coordinate systems should return a box which is as large as is likely to be used.
            Неограниченные системы координат должен вернуть границу, которая больше, может быть использован.
            For example, a (lon,lat) geographic coordinate system in degrees should return a box from
            (-180,-90) to (180,90), and a geocentric coordinate system could return a box from (-r,-r,-r)
            to (+r,+r,+r) where r is the approximate radius of the Earth.
            Например, (LON, лат) географической системы координат в градусах должен вернуть коробку из (-180, -90) до (180,90), 
            а геоцентрической системе координат может вернуться в коробку из (-r,-r,-r) к (+r,+r,+r), где r является примерный радиус Земли.
            </remarks>
        </member>
        <member name="T:MapAround.CoordinateSystems.CoordinateSystemFactory">
            <summary>
            Builds up complex coordinate system objects from simplier objects or values.
            Укрепляет комплексную координату системные объекты от объектов проще и ценностей.
            </summary>
            <remarks>
            <para>ICoordinateSystemFactory allows applications to make coordinate systems that
            cannot be created by a <see cref="T:Topology.CoordinateSystems.ICoordinateSystemAuthorityFactory"/>. This factory is very
            flexible, whereas the authority factory is easier to use.</para>
            <para>So <see cref="T:MapAround.CoordinateSystems.ICoordinateSystemAuthorityFactory"/>can be used to make 'standard' coordinate
            systems, and <see cref="T:MapAround.CoordinateSystems.CoordinateSystemFactory"/> can be used to make 'special'
            coordinate systems.</para>
            <para>For example, the EPSG authority has codes for USA state plane coordinate systems
            using the NAD83 datum, but these coordinate systems always use meters. EPSG does not
            have codes for NAD83 state plane coordinate systems that use feet units. This factory
            lets an application create such a hybrid coordinate system.</para>
            </remarks>
        </member>
        <member name="M:MapAround.CoordinateSystems.CoordinateSystemFactory.CreateFromXml(System.String)">
            <summary>
            Creates a coordinate system object from an XML string.
            </summary>
            <param name="xml">XML representation for the spatial reference</param>
            <returns>The resulting spatial reference object</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.CoordinateSystemFactory.CreateFromWkt(System.String)">
            <summary>
            Creates a spatial reference object given its well-known text representation.
            The output object may be either a <see cref="T:MapAround.CoordinateSystems.IGeographicCoordinateSystem"/> or
            a <see cref="T:MapAround.CoordinateSystems.IProjectedCoordinateSystem"/>.
            </summary>
            <param name="WKT">The well-known text representation for the spatial reference</param>
            <returns>The resulting spatial reference object</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.CoordinateSystemFactory.CreateCompoundCoordinateSystem(System.String,MapAround.CoordinateSystems.ICoordinateSystem,MapAround.CoordinateSystems.ICoordinateSystem)">
            <summary>
            Creates a <see cref="T:MapAround.CoordinateSystems.ICompoundCoordinateSystem"/>.
            </summary>
            <param name="name">Name of compound coordinate system.</param>
            <param name="head">Head coordinate system</param>
            <param name="tail">Tail coordinate system</param>
            <returns>Compound coordinate system</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.CoordinateSystemFactory.CreateFittedCoordinateSystem(System.String,MapAround.CoordinateSystems.ICoordinateSystem,System.String,System.Collections.Generic.List{MapAround.CoordinateSystems.AxisInfo})">
            <summary>
            Creates a <see cref="T:MapAround.CoordinateSystems.IFittedCoordinateSystem"/>.
            </summary>
            <remarks>The units of the axes in the fitted coordinate system will be
            inferred from the units of the base coordinate system. If the affine map
            performs a rotation, then any mixed axes must have identical units. For
            example, a (lat_deg,lon_deg,height_feet) system can be rotated in the
            (lat,lon) plane, since both affected axes are in degrees. But you
            should not rotate this coordinate system in any other plane.</remarks>
            <param name="name">Name of coordinate system</param>
            <param name="baseCoordinateSystem">Base coordinate system</param>
            <param name="toBaseWkt"></param>
            <param name="arAxes"></param>
            <returns>Fitted coordinate system</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.CoordinateSystemFactory.CreateLocalCoordinateSystem(System.String,MapAround.CoordinateSystems.ILocalDatum,MapAround.CoordinateSystems.IUnit,System.Collections.Generic.List{MapAround.CoordinateSystems.AxisInfo})">
            <summary>
            Creates a <see cref="T:MapAround.CoordinateSystems.ILocalCoordinateSystem">local coordinate system</see>.
            </summary>
            <remarks>
            The dimension of the local coordinate system is determined by the size of
            the axis array. All the axes will have the same units. If you want to make
            a coordinate system with mixed units, then you can make a compound
            coordinate system from different local coordinate systems.
            </remarks>
            <param name="name">Name of local coordinate system</param>
            <param name="datum">Local datum</param>
            <param name="unit">Units</param>
            <param name="axes">Axis info</param>
            <returns>Local coordinate system</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.CoordinateSystemFactory.CreateEllipsoid(System.String,System.Double,System.Double,MapAround.CoordinateSystems.ILinearUnit)">
            <summary>
            Creates an <see cref="T:MapAround.CoordinateSystems.Ellipsoid"/> from radius values.
            </summary>
            <seealso cref="M:Topology.CoordinateSystems.CoordinateSystemFactory.CreateFlattenedSphere(System.String,System.Double,System.Double,Topology.CoordinateSystems.ILinearUnit)"/>
            <param name="name">Name of ellipsoid</param>
            <param name="semiMajorAxis"></param>
            <param name="semiMinorAxis"></param>
            <param name="linearUnit"></param>
            <returns>Ellipsoid</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.CoordinateSystemFactory.CreateFlattenedSphere(System.String,System.Double,System.Double,MapAround.CoordinateSystems.ILinearUnit)">
            <summary>
            Creates an <see cref="T:MapAround.CoordinateSystems.IEllipsoid" /> from an major radius, 
            and inverse flattening.
            </summary>
            <seealso cref="M:Topology.CoordinateSystems.ICoordinateSystemFactory.CreateEllipsoid(System.String,System.Double,System.Double,Topology.CoordinateSystems.ILinearUnit)" />
            <param name="name">Name of ellipsoid</param>
            <param name="semiMajorAxis">Semi major-axis</param>
            <param name="inverseFlattening">Inverse flattening</param>
            <param name="linearUnit">Linear unit</param>
            <returns>Ellipsoid</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.CoordinateSystemFactory.CreateProjectedCoordinateSystem(System.String,MapAround.CoordinateSystems.IGeographicCoordinateSystem,MapAround.CoordinateSystems.IProjection,MapAround.CoordinateSystems.ILinearUnit,MapAround.CoordinateSystems.AxisInfo,MapAround.CoordinateSystems.AxisInfo)">
            <summary>
            Creates a <see cref="T:MapAround.CoordinateSystems.ProjectedCoordinateSystem"/> using a projection object.
            </summary>
            <param name="name">Name of projected coordinate system</param>
            <param name="gcs">Geographic coordinate system</param>
            <param name="projection">Projection</param>
            <param name="linearUnit">Linear unit</param>
            <param name="axis0">Primary axis</param>
            <param name="axis1">Secondary axis</param>
            <returns>Projected coordinate system</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.CoordinateSystemFactory.CreateProjection(System.String,System.String,System.Collections.Generic.List{MapAround.CoordinateSystems.Projections.ProjectionParameter})">
            <summary>
            Creates a <see cref="T:MapAround.CoordinateSystems.Projections.Projection"/>.
            </summary>
            <param name="name">Name of projection</param>
            <param name="wktProjectionClass">Projection class</param>
            <param name="parameters">Projection parameters</param>
            <returns>Projection</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.CoordinateSystemFactory.CreateHorizontalDatum(System.String,MapAround.CoordinateSystems.DatumType,MapAround.CoordinateSystems.IEllipsoid,MapAround.CoordinateSystems.Wgs84ConversionInfo)">
            <summary>
            Creates <see cref="T:MapAround.CoordinateSystems.HorizontalDatum"/> from ellipsoid and Bursa-World parameters.
            </summary>
            <remarks>
            Since this method contains a set of Bursa-Wolf parameters, the created
            datum will always have a relationship to WGS84. If you wish to create a
            horizontal datum that has no relationship with WGS84, then you can
            either specify a <see cref="T:MapAround.CoordinateSystems.DatumType">horizontalDatumType</see> 
            of <see cref="F:MapAround.CoordinateSystems.DatumType.HD_Other"/>, or create it via WKT.
            </remarks>
            <param name="name">Name of ellipsoid</param>
            <param name="datumType">Type of datum</param>
            <param name="ellipsoid">Ellipsoid</param>
            <param name="toWgs84">Wgs84 conversion parameters</param>
            <returns>Horizontal datum</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.CoordinateSystemFactory.CreatePrimeMeridian(System.String,MapAround.CoordinateSystems.IAngularUnit,System.Double)">
            <summary>
            Creates a <see cref="T:MapAround.CoordinateSystems.PrimeMeridian"/>, relative to Greenwich.
            </summary>
            <param name="name">Name of prime meridian</param>
            <param name="angularUnit">Angular unit</param>
            <param name="longitude">Longitude</param>
            <returns>Prime meridian</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.CoordinateSystemFactory.CreateGeographicCoordinateSystem(System.String,MapAround.CoordinateSystems.IAngularUnit,MapAround.CoordinateSystems.IHorizontalDatum,MapAround.CoordinateSystems.IPrimeMeridian,MapAround.CoordinateSystems.AxisInfo,MapAround.CoordinateSystems.AxisInfo)">
            <summary>
            Creates a <see cref="T:MapAround.CoordinateSystems.GeographicCoordinateSystem"/>, which could be Lat/Lon or Lon/Lat.
            </summary>
            <param name="name">Name of geographical coordinate system</param>
            <param name="angularUnit">Angular units</param>
            <param name="datum">Horizontal datum</param>
            <param name="primeMeridian">Prime meridian</param>
            <param name="axis0">First axis</param>
            <param name="axis1">Second axis</param>
            <returns>Geographic coordinate system</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.CoordinateSystemFactory.CreateLocalDatum(System.String,MapAround.CoordinateSystems.DatumType)">
            <summary>
            Creates a <see cref="T:MapAround.CoordinateSystems.ILocalDatum"/>.
            </summary>
            <param name="name">Name of datum</param>
            <param name="datumType">Datum type</param>
            <returns></returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.CoordinateSystemFactory.CreateVerticalDatum(System.String,MapAround.CoordinateSystems.DatumType)">
            <summary>
            Creates a <see cref="T:MapAround.CoordinateSystems.IVerticalDatum"/> from an enumerated type value.
            </summary>
            <param name="name">Name of datum</param>
            <param name="datumType">Type of datum</param>
            <returns>Vertical datum</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.CoordinateSystemFactory.CreateVerticalCoordinateSystem(System.String,MapAround.CoordinateSystems.IVerticalDatum,MapAround.CoordinateSystems.ILinearUnit,MapAround.CoordinateSystems.AxisInfo)">
            <summary>
            Creates a <see cref="T:MapAround.CoordinateSystems.IVerticalCoordinateSystem"/> from a 
            <see cref="T:MapAround.CoordinateSystems.IVerticalDatum">datum</see> and 
            <see cref="T:MapAround.CoordinateSystems.LinearUnit">linear units</see>.
            </summary>
            <param name="name">Name of vertical coordinate system</param>
            <param name="datum">Vertical datum</param>
            <param name="verticalUnit">Unit</param>
            <param name="axis">Axis info</param>
            <returns>Vertical coordinate system</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.CoordinateSystemFactory.CreateGeocentricCoordinateSystem(System.String,MapAround.CoordinateSystems.IHorizontalDatum,MapAround.CoordinateSystems.ILinearUnit,MapAround.CoordinateSystems.IPrimeMeridian)">
            <summary>
            Creates a <see cref="M:MapAround.CoordinateSystems.CoordinateSystemFactory.CreateGeocentricCoordinateSystem(System.String,Topology.CoordinateSystems.IHorizontalDatum,Topology.CoordinateSystems.ILinearUnit,Topology.CoordinateSystems.IPrimeMeridian)"/> from a <see cref="T:Topology.CoordinateSystems.IHorizontalDatum">datum</see>,
            <see cref="T:MapAround.CoordinateSystems.ILinearUnit">linear unit</see> and <see cref="T:MapAround.CoordinateSystems.IPrimeMeridian"/>.
            </summary>
            <param name="name">Name of geocentric coordinate system</param>
            <param name="datum">Horizontal datum</param>
            <param name="linearUnit">Linear unit</param>
            <param name="primeMeridian">Prime meridian</param>
            <returns>Geocentric Coordinate System</returns>
        </member>
        <member name="T:MapAround.CoordinateSystems.GeocentricCoordinateSystem">
            <summary>
            A 3D coordinate system, with its origin at the center of the Earth.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.GeocentricCoordinateSystem.GetUnits(System.Int32)">
            <summary>
            Returns units for dimension within coordinate system. Each dimension in
            the coordinate system has corresponding units.
            </summary>
            <param name="dimension">Dimension</param>
            <returns>Unit</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.GeocentricCoordinateSystem.EqualParams(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal, false otherwise</returns>
        </member>
        <member name="P:MapAround.CoordinateSystems.GeocentricCoordinateSystem.WGS84">
            <summary>
            Creates a geocentric coordinate system based on the WGS84 ellipsoid, 
            suitable for GPS measurements.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.GeocentricCoordinateSystem.HorizontalDatum">
            <summary>
            Gets or sets the HorizontalDatum. The horizontal datum is used to determine where
            the centre of the Earth is considered to be. All coordinate points will be
            measured from the centre of the Earth, and not the surface.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.GeocentricCoordinateSystem.LinearUnit">
            <summary>
            Gets or sets the units used along all the axes.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.GeocentricCoordinateSystem.PrimeMeridian">
            <summary>
            Gets or sets the PrimeMeridian.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.GeocentricCoordinateSystem.WKT">
            <summary>
            Gats a well-known text representation of this object.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.GeocentricCoordinateSystem.XML">
            <summary>
            Gets an XML representation of this object.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.GeographicCoordinateSystem">
            <summary>
            A coordinate system based on latitude and longitude.
            Системы координат на основе широты и долготы.
            </summary>
            <remarks>
            Some geographic coordinate systems are Lat/Lon, and some are Lon/Lat.
            You can find out which this is by examining the axes. You should also
            check the angular units, since not all geographic coordinate systems
            use degrees.
            </remarks>
        </member>
        <member name="T:MapAround.CoordinateSystems.HorizontalCoordinateSystem">
            <summary>
            A 2D coordinate system suitable for positions on the Earth's surface.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.HorizontalCoordinateSystem.#ctor(MapAround.CoordinateSystems.IHorizontalDatum,System.Collections.Generic.List{MapAround.CoordinateSystems.AxisInfo},System.String,System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the MapAround.CoordinateSystems.HorizontalCoordinateSystem.
            </summary>
            <param name="datum">Horizontal datum</param>
            <param name="axisInfo">Axis information</param>
            <param name="name">Name</param>
            <param name="authority">Authority name</param>
            <param name="code">Authority-specific identification code.</param>
            <param name="alias">Alias</param>
            <param name="abbreviation">Abbreviation</param>
            <param name="remarks">Provider-supplied remarks</param>
        </member>
        <member name="P:MapAround.CoordinateSystems.HorizontalCoordinateSystem.HorizontalDatum">
            <summary>
            Gets or sets the HorizontalDatum.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.GeographicCoordinateSystem.#ctor(MapAround.CoordinateSystems.IAngularUnit,MapAround.CoordinateSystems.IHorizontalDatum,MapAround.CoordinateSystems.IPrimeMeridian,System.Collections.Generic.List{MapAround.CoordinateSystems.AxisInfo},System.String,System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            Creates an instance of the MapAround.CoordinateSystems.GeographicCoordinateSystem.
            </summary>
            <param name="angularUnit">Angular units</param>
            <param name="horizontalDatum">Horizontal datum</param>
            <param name="primeMeridian">Prime meridian</param>
            <param name="axisInfo">Axis info</param>
            <param name="name">Name</param>
            <param name="authority">Authority name</param>
            <param name="authorityCode">Authority-specific identification code.</param>
            <param name="alias">Alias</param>
            <param name="abbreviation">Abbreviation</param>
            <param name="remarks">Provider-supplied remarks</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.GeographicCoordinateSystem.GetUnits(System.Int32)">
            <summary>
            Gets units for dimension within coordinate system. Each dimension in
            the coordinate system has corresponding units.
            </summary>
            <param name="dimension">Dimension</param>
            <returns>Unit</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.GeographicCoordinateSystem.GetWgs84ConversionInfo(System.Int32)">
            <summary>
            Gets details of a conversion to WGS84.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.GeographicCoordinateSystem.EqualParams(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal, false otherwise</returns>
        </member>
        <member name="P:MapAround.CoordinateSystems.GeographicCoordinateSystem.WGS84">
            <summary>
            Creates a decimal degrees geographic coordinate system based on the WGS84 ellipsoid, 
            suitable for GPS measurements
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.GeographicCoordinateSystem.AngularUnit">
            <summary>
            Gets or sets the angular units.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.GeographicCoordinateSystem.PrimeMeridian">
            <summary>
            Gets or sets the prime meridian of the geographic coordinate system.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.GeographicCoordinateSystem.NumConversionToWGS84">
            <summary>
            Gets the number of available conversions to WGS84 coordinates.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.GeographicCoordinateSystem.WKT">
            <summary>
            Gats a well-known text representation of this object.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.GeographicCoordinateSystem.XML">
            <summary>
            Gets an XML representation of this object.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.ProjectedCoordinateSystem">
            <summary>
            Represents a 2D cartographic coordinate system.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.ProjectedCoordinateSystem.#ctor(MapAround.CoordinateSystems.IHorizontalDatum,MapAround.CoordinateSystems.IGeographicCoordinateSystem,MapAround.CoordinateSystems.ILinearUnit,MapAround.CoordinateSystems.IProjection,System.Collections.Generic.List{MapAround.CoordinateSystems.AxisInfo},System.String,System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the MapAround.CoordinateSystems.ProjectedCoordinateSystem.
            </summary>
            <param name="datum">Horizontal datum</param>
            <param name="geographicCoordinateSystem">Geographic coordinate system</param>
            <param name="linearUnit">Linear unit</param>
            <param name="projection">Projection</param>
            <param name="axisInfo">Axis info</param>
            <param name="name">Name</param>
            <param name="authority">Authority name</param>
            <param name="code">Authority-specific identification code.</param>
            <param name="alias">Alias</param>
            <param name="abbreviation">Abbreviation</param>
            <param name="remarks">Provider-supplied remarks</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.ProjectedCoordinateSystem.GetUnits(System.Int32)">
            <summary>
            Returns units for dimension within coordinate system. Each dimension in
            the coordinate system has corresponding units.
            </summary>
            <param name="dimension">Dimension</param>
            <returns>Unit</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.ProjectedCoordinateSystem.EqualParams(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal, false otherwise</returns>
        </member>
        <member name="P:MapAround.CoordinateSystems.ProjectedCoordinateSystem.GeographicCoordinateSystem">
            <summary>
            Gets or sets the GeographicCoordinateSystem.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.ProjectedCoordinateSystem.LinearUnit">
            <summary>
            Gets or sets the <see cref="P:MapAround.CoordinateSystems.ProjectedCoordinateSystem.LinearUnit">LinearUnits</see>. 
            The linear unit must be the same as the <see cref="T:MapAround.CoordinateSystems.CoordinateSystem" /> 
            units.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.ProjectedCoordinateSystem.Projection">
            <summary>
            Gets or sets the projection.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.ProjectedCoordinateSystem.WKT">
            <summary>
            Gats a well-known text representation of this object.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.ProjectedCoordinateSystem.XML">
            <summary>
            Gets an XML representation of this object.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.Projections.NamespaceDoc">
            <summary>
            The MapAround.Projections namespace contains interfaces and classes
            that defines projections.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.Projections.IParameterInfo">
            <summary>
            The IParameterInfo interface provides an interface through which clients of a
            Projected Coordinate System or of a Projection can set the parameters of the
            projection. It provides a generic interface for discovering the names and default
            values of parameters, and for setting and getting parameter values. Subclasses of
            this interface may provide projection specific parameter access methods.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.IParameterInfo.DefaultParameters">
            <summary>
            Returns the default parameters for this projection.
            </summary>
            <returns>The default parameters for this projection</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.IParameterInfo.GetParameterByName(System.String)">
            <summary>
            Gets the parameter by its name.
            </summary>
            <param name="name">The name of parameter</param>
            <returns>Requested parameter</returns>
        </member>
        <member name="P:MapAround.CoordinateSystems.Projections.IParameterInfo.NumParameters">
            <summary>
            Gets the number of parameters expected.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Projections.IParameterInfo.Parameters">
            <summary>
            Gets or sets the list of parameters for this projection.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.Projections.Parameter">
            <summary>
            A named parameter value.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.Parameter.#ctor(System.String,System.Double)">
            <summary>
            Initializes a new instance of the MapAround.CoordinateSystems.Projections.Parameter
            </summary>
            <remarks>Units are always either meters or degrees.</remarks>
            <param name="name">The name of parameter</param>
            <param name="value">Value</param>
        </member>
        <member name="P:MapAround.CoordinateSystems.Projections.Parameter.Name">
            <summary>
            Gets or sets a parameter name.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Projections.Parameter.Value">
            <summary>
            Gets or sets a parameter value.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.Projections.ProjectionParameter">
            <summary>
            A named projection parameter value.
            </summary>
            <remarks>
            The linear units of parameters' values match the linear units of the containing 
            projected coordinate system. The angular units of parameter values match the 
            angular units of the geographic coordinate system that the projected coordinate 
            system is based on. (Notice that this is different from <see cref="T:MapAround.CoordinateSystems.Projections.Parameter"/>,
            where the units are always meters and degrees.)
            </remarks>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.ProjectionParameter.#ctor(System.String,System.Double)">
            <summary>
            Initializes a new instance of the MapAround.CoordinateSystems.Projections.ProjectionParameter.
            </summary>
            <param name="name">Name of the parameter</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="P:MapAround.CoordinateSystems.Projections.ProjectionParameter.Name">
            <summary>
            Gets or sets a parameter name.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Projections.ProjectionParameter.Value">
            <summary>
            Gets or sets a parameter value.
            <para>
            The linear units of a parameters' values match the linear units of the containing 
            projected coordinate system. The angular units of parameter values match the 
            angular units of the geographic coordinate system that the projected coordinate 
            system is based on.
            </para>
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Projections.ProjectionParameter.WKT">
            <summary>
            Gets a well-known text representation of this instance.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Projections.ProjectionParameter.XML">
            <summary>
            Получает XML представление данного экземпляра.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.Projections.Projection">
            <summary>
            Represents a cartographic projection.
            Defines the standard information stored with a projection
            objects. A projection object implements a coordinate transformation from a geographic
            coordinate system to a projected coordinate system, given the ellipsoid for the
            geographic coordinate system. It is expected that each coordinate transformation of
            interest, e.g., Transverse Mercator, Lambert, will be implemented as a class of
            type Projection, supporting the IProjection interface.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.Projection.GetParameter(System.Int32)">
            <summary>
            Gets a parameter by its index.
            </summary>
            <param name="n">An index of the parameter</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.Projection.GetParameter(System.String)">
            <summary>
            Gets a projection parameter by its name.
            </summary>
            <remarks>The names of parameters are case sensitive.</remarks>
            <param name="name">The parameter name</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.Projection.EqualParams(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj">Object to compare parameters</param>
            <returns>True if equal</returns>
        </member>
        <member name="P:MapAround.CoordinateSystems.Projections.Projection.NumParameters">
            <summary>
            Gets a number of parameters.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Projections.Projection.Parameters">
            <summary>
            Gets or sets a list containing projection parameters.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Projections.Projection.ClassName">
            <summary>
            Gets a class of the projection. "Mercator" for example.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Projections.Projection.WKT">
            <summary>
            Gets a well-known text representation of this object.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Projections.Projection.XML">
            <summary>
            Gets an XML representation of this object.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.Projections.AlbersProjection">
             <summary>
             Implements the Albers projection.
             </summary>
             <remarks>
             <para>Implements the Albers projection. The Albers projection is most commonly
             used to project the United States of America. It gives the northern
             border with Canada a curved appearance.</para>
            
             <para>The <a href="http://www.geog.mcgill.ca/courses/geo201/mapproj/naaeana.gif">Albers Equal Area</a>
             projection has the property that the area bounded
             by any pair of parallels and meridians is exactly reproduced between the
             image of those parallels and meridians in the projected domain, that is,
             the projection preserves the correct area of the earth though distorts
             direction, distance and shape somewhat.</para>
             </remarks>
        </member>
        <member name="T:MapAround.CoordinateSystems.Projections.MapProjection">
            <summary>
            The base class for the projection classes.
            Contains useful mathematical functions.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.Transformations.MathTransform">
            <summary>
            Abstract class for creating multi-dimensional coordinate points transformations.
            </summary>
            <remarks>
            If a client application wishes to query the source and target coordinate
            systems of a transformation, then it should keep hold of the
            <see cref="T:MapAround.CoordinateSystems.Transformations.ICoordinateTransformation"/> interface, and use the contained
            math transform object whenever it wishes to perform a transform.
            </remarks>
        </member>
        <member name="T:MapAround.CoordinateSystems.Transformations.IMathTransform">
            <summary>
            Transforms multi-dimensional coordinate points.
            </summary>
            <remarks>
            If a client application wishes to query the source and target
            coordinate systems of a transformation, then it should keep hold
            of the ICoordinateTransformation interface, and use the
            contained math transform object whenever it wishes to perform a transform.
            </remarks>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.IMathTransform.Identity">
            <summary>
            Indicates whether this transform does not move any points.
            </summary>
            <returns>True if the transform does not move any points, else otherwise</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.IMathTransform.Derivative(System.Double[])">
            <summary>
            Gets the derivative of this transform at a point.
            </summary>
            <remarks>
            If the transform does not have a well-defined derivative at the point,
            then this function should fail in the usual way for the DCP.
            The derivative is the matrix of the non-translating portion of the
            approximate affine map at the point.  The matrix will have dimensions
            corresponding to the source and target coordinate systems.
            If the input dimension is M, and the output dimension is N, then
            the matrix will have size [M][N].  The elements of the matrix
            {elt[n][m] : n=0..(N-1)} form a vector in the output space which is
            parallel to the displacement caused by a small change in the m'th
            ordinate in the input space.
            </remarks>
            <param name="point">Point in domain at which to get derivative.</param>
            <returns>An array containing the derivative values</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.IMathTransform.GetCodomainConvexHull(System.Collections.Generic.List{System.Double})">
             <summary>
             Gets transformed convex hull.
             </summary>
             <remarks>
              <para>The supplied ordinates are interpreted as a sequence of points, which
              generates a convex hull in the source space.  The returned sequence of
              ordinates represents a convex hull in the output space.  The number of
              output points will often be different from the number of input points.
              Each of the input points should be inside the valid domain (this can be
              checked by testing the points' domain flags individually).  However,
              the convex hull of the input points may go outside the valid domain.
              The returned convex hull should contain the transformed image of the
              intersection of the source convex hull and the source domain. </para>
            
              <para>A convex hull is a shape in a coordinate system, where if two positions A
              and B are inside the shape, then all positions in the straight line
              between A and B are also inside the shape.  So in 3D a cube and a sphere
              are both convex hulls.  Other less obvious examples of convex hulls are
              straight lines, and single points.  (A single point is a convex hull,
              because the positions A and B must both be the same - i.e. the point
              itself.  So the straight line between A and B has zero length.)</para>
            
             <para>Some examples of shapes that are NOT convex hulls are donuts, and horseshoes.</para>
             </remarks>
             <param name="points">Packed ordinates of points used to generate convex hull</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.IMathTransform.GetDomainFlags(System.Collections.Generic.List{System.Double})">
            <summary>
            Gets flags classifying domain points within a convex hull.
            </summary>
            <remarks>
            The supplied ordinates are interpreted as a sequence of points, which
            generates a convex hull in the source space.  Conceptually, each of the
            (usually infinite) points inside the convex hull is then tested against
            the source domain.  The flags of all these tests are then combined.  In
            practice, implementations of different transforms will use different
            short-cuts to avoid doing an infinite number of tests.
            </remarks>
            <param name="points">Packed ordinates of points used to generate convex hull</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.IMathTransform.Inverse">
            <summary>
            Creates the inverse transform of this object.
            </summary>
            <remarks>
            This method may fail if the transform is not one to one.
            However, all cartographic projections should succeed.
            </remarks>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.IMathTransform.Transform(System.Double[])">
            <summary>
            Transforms a coordinate point.
            </summary>
            <remarks>The passed parameter point should not be modified.</remarks>
            <param name="point">An array containing the point coordinates to transform</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.IMathTransform.TransformList(System.Collections.Generic.List{System.Double[]})">
            <summary>
            Transforms a list of coordinate point ordinal values.
            </summary>
            <remarks>
            This method is provided for efficiently transforming many points.
            The supplied array of ordinal values will contain packed ordinal
            values.  For example, if the source dimension is 3, then the ordinals
            will be packed in this order (x0,y0,z0,x1,y1,z1 ...).  The size
            of the passed array must be an integer multiple of DimSource.
            The returned ordinal values are packed in a similar way.
            In some DCPs. the ordinals may be transformed in-place, and the
            returned array may be the same as the passed array.
            So any client code should not attempt to reuse the passed ordinal
            values (although they can certainly reuse the passed array).
            If there is any problem then the server implementation will throw an
            exception.  If this happens then the client should not make any
            assumptions about the state of the ordinal values.
            </remarks>
            <param name="points">Packed ordinates of points to transform</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.IMathTransform.Invert">
            <summary>
            Inverts this transform.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.IMathTransform.DimSource">
            <summary>
            Gets the dimension of input points.
            </summary>
            <returns>The dimension of input points</returns>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.IMathTransform.DimTarget">
            <summary>
            Gets the dimension of output points.
            </summary>
            <returns>The dimension of output points</returns>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.IMathTransform.WKT">
            <summary>
            Gets a well-known text representation of this object.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.IMathTransform.XML">
            <summary>
            Gets an XML representation of this object.
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.Transformations.MathTransform.R2D">
            <summary>
            R2D
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.MathTransform.Identity">
            <summary>
            Indicates whether this transform does not move any points.
            </summary>
            <returns>True if the transform does not move any points, else otherwise</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.MathTransform.Derivative(System.Double[])">
            <summary>
            Gets the derivative of this transform at a point.
            </summary>
            <remarks>
            If the transform does not have a well-defined derivative at the point,
            then this function should fail in the usual way for the DCP.
            The derivative is the matrix of the non-translating portion of the
            approximate affine map at the point.  The matrix will have dimensions
            corresponding to the source and target coordinate systems.
            If the input dimension is M, and the output dimension is N, then
            the matrix will have size [M][N].  The elements of the matrix
            {elt[n][m] : n=0..(N-1)} form a vector in the output space which is
            parallel to the displacement caused by a small change in the m'th
            ordinate in the input space.
            </remarks>
            <param name="point">Point in domain at which to get derivative.</param>
            <returns>An array containing the derivative values</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.MathTransform.GetCodomainConvexHull(System.Collections.Generic.List{System.Double})">
             <summary>
             Gets transformed convex hull.
             </summary>
             <remarks>
              <para>The supplied ordinates are interpreted as a sequence of points, which
              generates a convex hull in the source space.  The returned sequence of
              ordinates represents a convex hull in the output space.  The number of
              output points will often be different from the number of input points.
              Each of the input points should be inside the valid domain (this can be
              checked by testing the points' domain flags individually).  However,
              the convex hull of the input points may go outside the valid domain.
              The returned convex hull should contain the transformed image of the
              intersection of the source convex hull and the source domain. </para>
            
              <para>A convex hull is a shape in a coordinate system, where if two positions A
              and B are inside the shape, then all positions in the straight line
              between A and B are also inside the shape.  So in 3D a cube and a sphere
              are both convex hulls.  Other less obvious examples of convex hulls are
              straight lines, and single points.  (A single point is a convex hull,
              because the positions A and B must both be the same - i.e. the point
              itself.  So the straight line between A and B has zero length.)</para>
            
             <para>Some examples of shapes that are NOT convex hulls are donuts, and horseshoes.</para>
             </remarks>
             <param name="points">Packed ordinates of points used to generate convex hull</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.MathTransform.GetDomainFlags(System.Collections.Generic.List{System.Double})">
            <summary>
            Gets flags classifying domain points within a convex hull.
            </summary>
            <remarks>
            The supplied ordinates are interpreted as a sequence of points, which
            generates a convex hull in the source space.  Conceptually, each of the
            (usually infinite) points inside the convex hull is then tested against
            the source domain.  The flags of all these tests are then combined.  In
            practice, implementations of different transforms will use different
            short-cuts to avoid doing an infinite number of tests.
            </remarks>
            <param name="points">Packed ordinates of points used to generate convex hull.</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.MathTransform.Inverse">
            <summary>
            Creates the inverse transform of this object.
            </summary>
            <remarks>
            This method may fail if the transform is not one to one.
            However, all cartographic projections should succeed.
            </remarks>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.MathTransform.Transform(System.Double[])">
            <summary>
            Transforms a coordinate point.
            </summary>
            <remarks>The passed parameter point should not be modified.</remarks>
            <param name="point">An array containing the point coordinates to transform</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.MathTransform.TransformList(System.Collections.Generic.List{System.Double[]})">
            <summary>
            Transforms a list of coordinate point ordinal values.
            </summary>
            <remarks>
            This method is provided for efficiently transforming many points.
            The supplied array of ordinal values will contain packed ordinal
            values.  For example, if the source dimension is 3, then the ordinals
            will be packed in this order (x0,y0,z0,x1,y1,z1 ...).  The size
            of the passed array must be an integer multiple of DimSource.
            The returned ordinal values are packed in a similar way.
            In some DCPs. the ordinals may be transformed in-place, and the
            returned array may be the same as the passed array.
            So any client code should not attempt to reuse the passed ordinal
            values (although they can certainly reuse the passed array).
            If there is any problem then the server implementation will throw an
            exception.  If this happens then the client should not make any
            assumptions about the state of the ordinal values.
            </remarks>
            <param name="points">Packed ordinates of points to transform</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.MathTransform.Invert">
            <summary>
            Inverts this transform.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.MathTransform.DimSource">
            <summary>
            Gets the dimension of input points.
            </summary>
            <returns>The dimension of input points</returns>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.MathTransform.DimTarget">
            <summary>
            Gets the dimension of output points.
            </summary>
            <returns>The dimension of output points</returns>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.MathTransform.WKT">
            <summary>
            Gets a well-known text representation of this object.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.MathTransform.XML">
            <summary>
            Gets an XML representation of this object.
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.Projections.MapProjection.PI">
            <summary>
            PI
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.Projections.MapProjection.HALF_PI">
            <summary>
            PI / 2
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.Projections.MapProjection.TWO_PI">
            <summary>
            PI * 2
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.Projections.MapProjection.Tolerance">
            <summary>
            Tolerance
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.Projections.MapProjection.S2R">
            <summary>
            S2R
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.Projections.MapProjection.MAX_VAL">
            <summary>
            MAX_VAL
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.Projections.MapProjection.prjMAXLONG">
            <summary>
            prjMAXLONG
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.Projections.MapProjection.DBLLONG">
            <summary>
            DBLLONG
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.MapProjection.#ctor(System.Collections.Generic.List{MapAround.CoordinateSystems.Projections.ProjectionParameter},System.Boolean)">
            <summary>
            Initializes a new instance of the MapAround.CoordinateSystems.Projections.MapProjection.
            </summary>
            <param name="parameters">List of the expected projection parameters</param>
            <param name="isInverse">A value indicating whether the transformation is inverse</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.MapProjection.#ctor(System.Collections.Generic.List{MapAround.CoordinateSystems.Projections.ProjectionParameter})">
            <summary>
            Initializes a new instance of the MapAround.CoordinateSystems.Projections.MapProjection.
            </summary>
            <param name="parameters">List of the expected projection parameters</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.MapProjection.GetParameter(System.Int32)">
            <summary>
            Gets a projection parameter by its index.
            </summary>
            <param name="Index">An index of the requested parameter</param>
            <returns>An object representing the requested parameter</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.MapProjection.GetParameter(System.String)">
            <summary>
            Gets a projection parameter by its name.
            </summary>
            <remarks>The names of parameters are case sensitive.</remarks>
            <param name="name">The parameter name</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.MapProjection.Invert">
            <summary>
            Reverses the transformation
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.MapProjection.Transform(System.Double[])">
            <summary>
            Transforms a coordinates of point. 
            </summary>
            <param name="p">An array containing the point coordinates</param>
            <returns>An array containing coordinates of the transformed point</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.MapProjection.TransformList(System.Collections.Generic.List{System.Double[]})">
            <summary>
            Transforms a list of coordinate point ordinal values.
            </summary>
            <remarks>
            This method is provided for efficiently transforming many points. The supplied array 
            of ordinal values will contain packed ordinal values. For example, if the source 
            dimension is 3, then the ordinals will be packed in this order (x0,y0,z0,x1,y1,z1 ...).
            The size of the passed array must be an integer multiple of DimSource. The returned 
            ordinal values are packed in a similar way. In some DCPs. the ordinals may be 
            transformed in-place, and the returned array may be the same as the passed array.
            So any client code should not attempt to reuse the passed ordinal values (although
            they can certainly reuse the passed array). If there is any problem then the server
            implementation will throw an exception. If this happens then the client should not
            make any assumptions about the state of the ordinal values.
            </remarks>
            <param name="ord">An array of ordinal values</param>
            <returns>A list of transformed coordinate point ordinal values</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.MapProjection.EqualParams(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj">Object to compare parameters</param>
            <returns>True if equal</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.MapProjection.CUBE(System.Double)">
            <summary>
            Returns a cube of the value.
            </summary>
            <param name="x">A value to compute the cube</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.MapProjection.QUAD(System.Double)">
            <summary>
            Returns a quad of the value.
            </summary>
            <param name="x">A value to compute the quad</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.MapProjection.IMOD(System.Double,System.Double)">
            <summary>
            IMOD
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.MapProjection.sign(System.Double)">
            <summary>
            Returns a sign of value.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.MapProjection.adjustLon(System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.MapProjection.msfnz(System.Double,System.Double,System.Double)">
            <summary>
            Function to compute the constant small m which is the radius of
            a parallel of latitude, phi, divided by the semimajor axis.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.MapProjection.qsfnz(System.Double,System.Double)">
            <summary>
            Function to compute constant small q which is the radius of a 
            parallel of latitude, phi, divided by the semimajor axis. 
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.MapProjection.sincos(System.Double,System.Double@,System.Double@)">
            <summary>
            Function to calculate the sine and cosine in one call.  Some computer
            systems have implemented this function, resulting in a faster implementation
            than calling each function separately.  It is provided here for those
            computer systems which don't implement this function
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.MapProjection.tsfnz(System.Double,System.Double,System.Double)">
            <summary>
            Function to compute the constant small t for use in the forward
            computations in the Lambert Conformal Conic and the Polar
            Stereographic projections.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.MapProjection.asinz(System.Double)">
            <summary>
            Function to eliminate roundoff errors in asin
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.MapProjection.phi2z(System.Double,System.Double,System.Int64@)">
            <summary>
            Function to compute the latitude angle, phi2, for the inverse of the
            Lambert Conformal Conic and Polar Stereographic projections.
            </summary>
            <param name="eccent">Spheroid eccentricity</param>
            <param name="ts">Constant value t</param>
            <param name="flag">Error flag number</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.MapProjection.e0fn(System.Double)">
            <summary>
            Functions to compute the constants e0, e1, e2, and e3 which are used
            in a series for calculating the distance along a meridian.  The
            input x represents the eccentricity squared.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.MapProjection.e4fn(System.Double)">
            <summary>
            Function to compute the constant e4 from the input of the eccentricity
            of the spheroid, x.  This constant is used in the Polar Stereographic
            projection.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.MapProjection.mlfn(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Function computes the value of M which is the distance along a meridian
            from the Equator to latitude phi.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.MapProjection.calcUtmZone(System.Double)">
            <summary>
            Function to calculate UTM zone number--NOTE Longitude entered in DEGREES!!!
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.MapProjection.LongitudeToRadians(System.Double,System.Boolean)">
            <summary>
            Converts a longitude value in degrees to radians.
            </summary>
            <param name="x">The value in degrees to convert to radians</param>
            <param name="edge">If true, -180 and +180 are valid, otherwise they are considered out of range</param>
            <returns>A value in radians</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.MapProjection.LatitudeToRadians(System.Double,System.Boolean)">
            <summary>
            Converts a latitude value in degrees to radians.
            </summary>
            <param name="y">The value in degrees to to radians</param>
            <param name="edge">If true, -90 and +90 are valid, otherwise they are considered out of range</param>
            <returns>A value in radians</returns>
        </member>
        <member name="P:MapAround.CoordinateSystems.Projections.MapProjection.NumParameters">
            <summary>
            Gets a number of parameters.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Projections.MapProjection.ClassName">
            <summary>
            Gets a class of the projection. "Mercator" for example.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Projections.MapProjection.Abbreviation">
            <summary>
            Gets or sets an abbreviation.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Projections.MapProjection.Alias">
            <summary>
            Gets or sets an alias.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Projections.MapProjection.Authority">
            <summary>
            Gets or sets an authority.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Projections.MapProjection.AuthorityCode">
            <summary>
            Gets or sets an authority code.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Projections.MapProjection.Name">
            <summary>
            Gets or sets a name.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Projections.MapProjection.Remarks">
            <summary>
            Gets or sets a remarks for this object.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Projections.MapProjection.WKT">
            <summary>
            Gets a well-known text representation of this instance.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Projections.MapProjection.XML">
            <summary>
            Gets an XML representation of this instance.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Projections.MapProjection.IsInverse">
            <summary>
            Gets an inverse transformation.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.AlbersProjection.#ctor(System.Collections.Generic.List{MapAround.CoordinateSystems.Projections.ProjectionParameter})">
            <summary>
            Initializes a new instance of the MapAround.CoordinateSystems.Projections.AlbersProjection.
            </summary>
            <param name="parameters">A list containing the projection parameters</param>
            <remarks>
            <para>The parameters this projection expects are listed below.</para>
            <list type="table">
            <listheader><term>Items</term><description>Descriptions</description></listheader>
            <item><term>latitude_of_false_origin</term><description>The latitude of the point which is not the natural origin and at which grid coordinate values false easting and false northing are defined.</description></item>
            <item><term>longitude_of_false_origin</term><description>The longitude of the point which is not the natural origin and at which grid coordinate values false easting and false northing are defined.</description></item>
            <item><term>latitude_of_1st_standard_parallel</term><description>For a conic projection with two standard parallels, this is the latitude of intersection of the cone with the ellipsoid that is nearest the pole.  Scale is true along this parallel.</description></item>
            <item><term>latitude_of_2nd_standard_parallel</term><description>For a conic projection with two standard parallels, this is the latitude of intersection of the cone with the ellipsoid that is furthest from the pole.  Scale is true along this parallel.</description></item>
            <item><term>easting_at_false_origin</term><description>The easting value assigned to the false origin.</description></item>
            <item><term>northing_at_false_origin</term><description>The northing value assigned to the false origin.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.AlbersProjection.#ctor(System.Collections.Generic.List{MapAround.CoordinateSystems.Projections.ProjectionParameter},System.Boolean)">
            <summary>
            Initializes a new instance of the MapAround.CoordinateSystems.Projections.AlbersProjection.
            </summary>
            <remarks>
            <para>The parameters this projection expects are listed below.</para>
            <list type="table">
            <listheader><term>Items</term><description>Descriptions</description></listheader>
            <item><term>latitude_of_center</term><description>The latitude of the point which is not the natural origin and at which grid coordinate values false easting and false northing are defined.</description></item>
            <item><term>longitude_of_center</term><description>The longitude of the point which is not the natural origin and at which grid coordinate values false easting and false northing are defined.</description></item>
            <item><term>standard_parallel_1</term><description>For a conic projection with two standard parallels, this is the latitude of intersection of the cone with the ellipsoid that is nearest the pole.  Scale is true along this parallel.</description></item>
            <item><term>standard_parallel_2</term><description>For a conic projection with two standard parallels, this is the latitude of intersection of the cone with the ellipsoid that is furthest from the pole.  Scale is true along this parallel.</description></item>
            <item><term>false_easting</term><description>The easting value assigned to the false origin.</description></item>
            <item><term>false_northing</term><description>The northing value assigned to the false origin.</description></item>
            </list>
            </remarks>
            <param name="parameters">List of parameters to initialize the projection.</param>
            <param name="isInverse">Indicates whether the projection forward (meters to degrees or degrees to meters).</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.AlbersProjection.DegreesToMeters(System.Double[])">
            <summary>
            Converts coordinates in decimal degrees to projected meters.
            </summary>
            <param name="lonlat">A coordinate array of the point in decimal degrees</param>
            <returns>A coordinate array of the point in projected meters</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.AlbersProjection.MetersToDegrees(System.Double[])">
            <summary>
            Converts coordinates in projected meters to decimal degrees.
            </summary>
            <param name="p">A coordinate array of the point in meters</param>
            <returns>A coordinate array of the transformed point in decimal degrees</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.AlbersProjection.Inverse">
            <summary>
            Returns the inverse of this projection.
            </summary>
            <returns>IMathTransform that is the reverse of the current projection.</returns>
        </member>
        <member name="T:MapAround.CoordinateSystems.Projections.LambertConformalConic2SP">
            <summary>
            Implemetns the Lambert Conformal Conic 2SP Projection.
            </summary>
            <remarks>
            <para>The Lambert Conformal Conic projection is a standard projection for presenting maps
            of land areas whose East-West extent is large compared with their North-South extent.
            This projection is "conformal" in the sense that lines of latitude and longitude,
            which are perpendicular to one another on the earth's surface, are also perpendicular
            to one another in the projected domain.</para>
            </remarks>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.LambertConformalConic2SP.#ctor(System.Collections.Generic.List{MapAround.CoordinateSystems.Projections.ProjectionParameter})">
            <summary>
            Initializes a new instance of the MapAround.CoordinateSystems.Projections.LambertConformalConic2SP projection object.
            </summary>
            <remarks>
            <para>The parameters this projection expects are listed below.</para>
            <list type="table">
            <listheader><term>Items</term><description>Descriptions</description></listheader>
            <item><term>latitude_of_false_origin</term><description>The latitude of the point which is not the natural origin and at which grid coordinate values false easting and false northing are defined.</description></item>
            <item><term>longitude_of_false_origin</term><description>The longitude of the point which is not the natural origin and at which grid coordinate values false easting and false northing are defined.</description></item>
            <item><term>latitude_of_1st_standard_parallel</term><description>For a conic projection with two standard parallels, this is the latitude of intersection of the cone with the ellipsoid that is nearest the pole.  Scale is true along this parallel.</description></item>
            <item><term>latitude_of_2nd_standard_parallel</term><description>For a conic projection with two standard parallels, this is the latitude of intersection of the cone with the ellipsoid that is furthest from the pole.  Scale is true along this parallel.</description></item>
            <item><term>easting_at_false_origin</term><description>The easting value assigned to the false origin.</description></item>
            <item><term>northing_at_false_origin</term><description>The northing value assigned to the false origin.</description></item>
            </list>
            </remarks>
            <param name="parameters">List of parameters to initialize the projection.</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.LambertConformalConic2SP.#ctor(System.Collections.Generic.List{MapAround.CoordinateSystems.Projections.ProjectionParameter},System.Boolean)">
            <summary>
            Initializes a new instance of the MapAround.CoordinateSystems.Projections.LambertConformalConic2SP projection object.
            </summary>
            <remarks>
            <para>The parameters this projection expects are listed below.</para>
            <list type="table">
            <listheader><term>Parameter</term><description>Description</description></listheader>
            <item><term>latitude_of_origin</term><description>The latitude of the point which is not the natural origin and at which grid coordinate values false easting and false northing are defined.</description></item>
            <item><term>central_meridian</term><description>The longitude of the point which is not the natural origin and at which grid coordinate values false easting and false northing are defined.</description></item>
            <item><term>standard_parallel_1</term><description>For a conic projection with two standard parallels, this is the latitude of intersection of the cone with the ellipsoid that is nearest the pole.  Scale is true along this parallel.</description></item>
            <item><term>standard_parallel_2</term><description>For a conic projection with two standard parallels, this is the latitude of intersection of the cone with the ellipsoid that is furthest from the pole.  Scale is true along this parallel.</description></item>
            <item><term>false_easting</term><description>The easting value assigned to the false origin.</description></item>
            <item><term>false_northing</term><description>The northing value assigned to the false origin.</description></item>
            </list>
            </remarks>
            <param name="parameters">List of parameters to initialize the projection.</param>
            <param name="isInverse">Indicates whether the projection forward (meters to degrees or degrees to meters).</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.LambertConformalConic2SP.DegreesToMeters(System.Double[])">
            <summary>
            Converts coordinates in decimal degrees to projected meters.
            </summary>
            <param name="lonlat">A coordinate array of the point in decimal degrees.</param>
            <returns>A coordinate array of the point in projected meters</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.LambertConformalConic2SP.MetersToDegrees(System.Double[])">
            <summary>
            Converts coordinates in projected meters to decimal degrees.
            </summary>
            <param name="p">A coordinate array of the point in meters</param>
            <returns>A coordinate array of the transformed point in decimal degrees</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.LambertConformalConic2SP.Inverse">
            <summary>
            Returns the inverse of this projection.
            </summary>
            <returns>IMathTransform that is the reverse of the current projection.</returns>
        </member>
        <member name="T:MapAround.CoordinateSystems.Projections.Mercator">
            <summary>
            Implements the Mercator projection.
            </summary>
            <remarks>
            <para>This map projection introduced in 1569 by Gerardus Mercator. It is often described as a cylindrical projection,
            but it must be derived mathematically. The meridians are equally spaced, parallel vertical lines, and the
            parallels of latitude are parallel, horizontal straight lines, spaced farther and farther apart as their distance
            from the Equator increases. This projection is widely used for navigation charts, because any straight line
            on a Mercator-projection map is a line of constant true bearing that enables a navigator to plot a straight-line
            course. It is less practical for world maps because the scale is distorted; areas farther away from the equator
            appear disproportionately large. On a Mercator projection, for example, the landmass of Greenland appears to be
            greater than that of the continent of South America; in actual area, Greenland is smaller than the Arabian Peninsula.
            </para>
            </remarks>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.Mercator.#ctor(System.Collections.Generic.List{MapAround.CoordinateSystems.Projections.ProjectionParameter})">
            <summary>
            Initializes a new instance of the MapAround.CoordinateSystems.Projections.Mercator instance with the specified parameters to project points.
            </summary>
            <param name="parameters">ParameterList with the required parameters.</param>
            <remarks>
            </remarks>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.Mercator.#ctor(System.Collections.Generic.List{MapAround.CoordinateSystems.Projections.ProjectionParameter},System.Boolean)">
            <summary>
            Initializes a new instance of the MapAround.CoordinateSystems.Projections.Mercator instance with the specified parameters to project points.
            </summary>
            <param name="parameters">List of parameters to initialize the projection.</param>
            <param name="isInverse">Indicates whether the projection forward (meters to degrees or degrees to meters).</param>
            <remarks>
            <para>The parameters this projection expects are listed below.</para>
            <list type="table">
            <listheader><term>Items</term><description>Descriptions</description></listheader>
            <item><term>central_meridian</term><description>The longitude of the point from which the values of both the geographical coordinates on the ellipsoid and the grid coordinates on the projection are deemed to increment or decrement for computational purposes. Alternatively it may be considered as the longitude of the point which in the absence of application of false coordinates has grid coordinates of (0,0).</description></item>
            <item><term>latitude_of_origin</term><description>The latitude of the point from which the values of both the geographical coordinates on the ellipsoid and the grid coordinates on the projection are deemed to increment or decrement for computational purposes. Alternatively it may be considered as the latitude of the point which in the absence of application of false coordinates has grid coordinates of (0,0).</description></item>
            <item><term>scale_factor</term><description>The factor by which the map grid is reduced or enlarged during the projection process, defined by its value at the natural origin.</description></item>
            <item><term>false_easting</term><description>Since the natural origin may be at or near the centre of the projection and under normal coordinate circumstances would thus give rise to negative coordinates over parts of the mapped area, this origin is usually given false coordinates which are large enough to avoid this inconvenience. The False Easting, FE, is the easting value assigned to the abscissa (east).</description></item>
            <item><term>false_northing</term><description>Since the natural origin may be at or near the centre of the projection and under normal coordinate circumstances would thus give rise to negative coordinates over parts of the mapped area, this origin is usually given false coordinates which are large enough to avoid this inconvenience. The False Northing, FN, is the northing value assigned to the ordinate.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.Mercator.DegreesToMeters(System.Double[])">
            <summary>
            Converts coordinates in decimal degrees to projected meters.
            </summary>
            <param name="lonlat">A coordinate array of the point in decimal degrees.</param>
            <returns>A coordinate array of the point in projected meters</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.Mercator.MetersToDegrees(System.Double[])">
            <summary>
            Converts coordinates in projected meters to decimal degrees.
            </summary>
            <param name="p">A coordinate array of the point in meters</param>
            <returns>A coordinate array of the transformed point in decimal degrees</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.Mercator.Inverse">
            <summary>
            Returns the inverse of this projection.
            </summary>
            <returns>IMathTransform that is the reverse of the current projection.</returns>
        </member>
        <member name="T:MapAround.CoordinateSystems.Projections.TransverseMercator">
             <summary>
             Inmplements the Universal (UTM) and Modified (MTM) 
             Transverses Mercator projections.
             </summary>
             <remarks>
             <para>This
             is a cylindrical projection, in which the cylinder has been rotated 90°.
             Instead of being tangent to the equator (or to an other standard latitude),
             it is tangent to a central meridian. Deformation are more important as we
             are going futher from the central meridian. The Transverse Mercator
             projection is appropriate for region wich have a greater extent north-south
             than east-west.</para>
            
             <para>Reference: John P. Snyder (Map Projections - A Working Manual,
             U.S. Geological Survey Professional Paper 1395, 1987)</para>
             </remarks>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.TransverseMercator.#ctor(System.Collections.Generic.List{MapAround.CoordinateSystems.Projections.ProjectionParameter})">
            <summary>
            Initializes a new instance of the MapAround.CoordinateSystems.Projections.TransverseMercator.
            </summary>
            <param name="parameters">List of parameters to initialize the projection.</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.TransverseMercator.#ctor(System.Collections.Generic.List{MapAround.CoordinateSystems.Projections.ProjectionParameter},System.Boolean)">
            <summary>
            Initializes a new instance of the MapAround.CoordinateSystems.Projections.TransverseMercator.
            </summary>
            <param name="parameters">List of parameters to initialize the projection.</param>
            <param name="isInverse">Flag indicating wether is a forward/projection (false) or an inverse projection (true).</param>
            <remarks>
            <list type="bullet">
            <listheader><term>Items</term><description>Descriptions</description></listheader>
            <item><term>semi_major</term><description>Semi major radius</description></item>
            <item><term>semi_minor</term><description>Semi minor radius</description></item>
            <item><term>scale_factor</term><description></description></item>
            <item><term>central meridian</term><description></description></item>
            <item><term>latitude_origin</term><description></description></item>
            <item><term>false_easting</term><description></description></item>
            <item><term>false_northing</term><description></description></item>
            </list>
            </remarks>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.TransverseMercator.DegreesToMeters(System.Double[])">
            <summary>
            Converts coordinates in decimal degrees to projected meters.
            </summary>
            <param name="lonlat">A coordinate array of the point in decimal degrees.</param>
            <returns>A coordinate array of the point in projected meters</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.TransverseMercator.MetersToDegrees(System.Double[])">
            <summary>
            Converts coordinates in projected meters to decimal degrees.
            </summary>
            <param name="p">A coordinate array of the point in meters</param>
            <returns>A coordinate array of the transformed point in decimal degrees</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Projections.TransverseMercator.Inverse">
            <summary>
            Returns the inverse of this projection.
            </summary>
            <returns>IMathTransform that is the reverse of the current projection.</returns>
        </member>
        <member name="T:MapAround.CoordinateSystems.Transformations.RubberSheetingTransform">
            <summary>
            Implements a rubbersheeting transformation.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.RubberSheetingTransform.Inverse">
            <summary>
            Creates the inverse transform of this object.
            </summary>
            <remarks>
            This method will fail.
            </remarks>
            <exception cref="T:System.NotSupportedException">Throws always</exception>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.RubberSheetingTransform.Invert">
            <summary>
            Inverts this transform.
            </summary>
            <remarks>
            This method will fail.
            </remarks>
            <exception cref="T:System.NotSupportedException">Throws always</exception>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.RubberSheetingTransform.Transform(System.Double[])">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.RubberSheetingTransform.TransformList(System.Collections.Generic.List{System.Double[]})">
            <summary>
            
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.RubberSheetingTransform.#ctor(MapAround.Geometry.ICoordinate[],MapAround.Geometry.ICoordinate[])">
            <summary>
            Initializes a new instance of the 
            MapAround.CoordinateSystems.Transformations.RubberSheetingTransform 
            </summary>
            <param name="sourceControlPoints">An array containing coordinates of the source control points</param>
            <param name="destinationControlPoints">An array containing coordinates of the destination control points</param>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.RubberSheetingTransform.WKT">
            <summary>
            Gets a well-known text representation of this object.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.RubberSheetingTransform.XML">
            <summary>
            Gets an XML representation of this object.
            </summary>
        </member>
        <member name="T:MapAround.DataProviders.IRasterProvider">
            <summary>
            Represents an object that provides an access 
            to the raster.
            </summary>
        </member>
        <member name="M:MapAround.DataProviders.IRasterProvider.QueryRaster(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,MapAround.Geometry.BoundingRectangle,MapAround.Mapping.IRasterReceiver)">
            <summary>
            Retreives a chunk of the raster.
            </summary>
            <param name="srcX">A minimum X coordinate of the querying area</param>
            <param name="srcY">A minimum Y coordinate of the querying area</param>
            <param name="srcWidth">A width of the querying area</param>
            <param name="srcHeight">A height of the querying area</param>
            <param name="maxDestWidth">A maximum width in pixels of the resulting raster</param>
            <param name="maxDestHeight">A maximum height in pixels of the resulting raster</param>
            <param name="bounds">A bounds of querying area on the map</param>
            <param name="receiver">An object receiving raster</param>
        </member>
        <member name="P:MapAround.DataProviders.IRasterProvider.Width">
            <summary>
            Gets a width of the raster in pixels.
            </summary>
        </member>
        <member name="P:MapAround.DataProviders.IRasterProvider.Height">
            <summary>
            Gets a height of the raster in pixels.
            </summary>
        </member>
        <member name="T:MapAround.DataProviders.InMemoryRasterProvider">
            <summary>
            Provides access to the in-memory stored raster.
            </summary>
        </member>
        <member name="M:MapAround.DataProviders.InMemoryRasterProvider.QueryRaster(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,MapAround.Geometry.BoundingRectangle,MapAround.Mapping.IRasterReceiver)">
            <summary>
            Retreives a chunk of the raster.
            </summary>
            <param name="srcX">A minimum X coordinate of the querying area</param>
            <param name="srcY">A minimum Y coordinate of the querying area</param>
            <param name="srcWidth">A width of the querying area</param>
            <param name="srcHeight">A height of the querying area</param>
            <param name="maxDestWidth">A maximum width in pixels of the resulting raster</param>
            <param name="maxDestHeight">A maximum height in pixels of the resulting raster</param>
            <param name="bounds">A bounds of querying area on the map</param>
            <param name="receiver">An object receiving raster</param>
        </member>
        <member name="P:MapAround.DataProviders.InMemoryRasterProvider.Bitmap">
            <summary>
            Gets or sets a System.Drawing.Bitmap instance 
            which represents an in-memoty raster.
            </summary>
        </member>
        <member name="P:MapAround.DataProviders.InMemoryRasterProvider.Width">
            <summary>
            Gets a width of the raster in pixels.
            </summary>
        </member>
        <member name="P:MapAround.DataProviders.InMemoryRasterProvider.Height">
            <summary>
            Gets a height of the raster in pixels.
            </summary>
        </member>
        <member name="T:MapAround.DataProviders.SmallRasterProviderHolder">
            <summary>
            InMemory raster provider holder.
            </summary>
        </member>
        <member name="T:MapAround.DataProviders.RasterProviderHolderBase">
            <summary>
            MapAround.DataProviders.RasterProviderHolderBase is the base class
            for the data provider holding classes.
            Instances of these classes contains the providers registration info,
            initialization parameters and defines the resource menegement by 
            implementing the ReleaseProviderIfNeeded method.
            </summary>
        </member>
        <member name="T:MapAround.DataProviders.IRasterProviderHolder">
            <summary>
            Represents an object that contains raster 
            provider registration info
            </summary>
        </member>
        <member name="M:MapAround.DataProviders.IRasterProviderHolder.SetParameters(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Sets parameter values.
            </summary>
            <param name="parameters">Parameter values</param>
        </member>
        <member name="M:MapAround.DataProviders.IRasterProviderHolder.GetParameterNames">
            <summary>
            Gets a list containing the names of parameters.
            </summary>
            <returns>List containing the names of parameters</returns>
        </member>
        <member name="M:MapAround.DataProviders.IRasterProviderHolder.GetProvider">
            <summary>
            Gets a raster provider instance.
            </summary>
        </member>
        <member name="M:MapAround.DataProviders.IRasterProviderHolder.ReleaseProviderIfNeeded(MapAround.DataProviders.IRasterProvider)">
            <summary>
            Performs a finalization procedure for the raster provider, if needed.
            </summary>
            <param name="provider">Raster provider instance</param>
        </member>
        <member name="P:MapAround.DataProviders.IRasterProviderHolder.Name">
            <summary>
            Gets the name of the spatial data provider.
            </summary>
        </member>
        <member name="F:MapAround.DataProviders.RasterProviderHolderBase.GetProviderMethod">
            <summary>
            References to the method that returns an IRasterProvider instance.
            </summary>
        </member>
        <member name="M:MapAround.DataProviders.RasterProviderHolderBase.SetParameters(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Sets paramater values.
            </summary>
            <param name="parameters">Dictionary that contains parameter values</param>
        </member>
        <member name="M:MapAround.DataProviders.RasterProviderHolderBase.GetParameterNames">
            <summary>
            Gets paramater names.
            </summary>
            <returns>String array that contains parameter names</returns>
        </member>
        <member name="M:MapAround.DataProviders.RasterProviderHolderBase.GetProvider">
            <summary>
            Gets the raster provider.
            </summary>
        </member>
        <member name="M:MapAround.DataProviders.RasterProviderHolderBase.ReleaseProviderIfNeeded(MapAround.DataProviders.IRasterProvider)">
            <summary>
            Performs a finalization procedure for the raster provider, if needed.
            </summary>
            <param name="provider">Spatial data provider instance</param>
        </member>
        <member name="M:MapAround.DataProviders.RasterProviderHolderBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of MapAround.DataProviders.RasterProviderHolderBase.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="P:MapAround.DataProviders.RasterProviderHolderBase.Parameters">
            <summary>
            Gets or sets a dictionary that contains paramater values.
            </summary>
        </member>
        <member name="P:MapAround.DataProviders.RasterProviderHolderBase.Name">
            <summary>
            Gets a name of the spatial data provider.
            </summary>
        </member>
        <member name="M:MapAround.DataProviders.SmallRasterProviderHolder.SetParameters(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Sets the parameter values.
            </summary>
            <param name="parameters">Parameter values</param>
        </member>
        <member name="M:MapAround.DataProviders.SmallRasterProviderHolder.GetParameterNames">
            <summary>
            Gets a list containing the names of parameters.
            </summary>
            <returns>List containing the names of parameters</returns>
        </member>
        <member name="M:MapAround.DataProviders.SmallRasterProviderHolder.ReleaseProviderIfNeeded(MapAround.DataProviders.IRasterProvider)">
            <summary>
            Performs a finalization procedure for the raster provider.
            This implementation do nothing.
            </summary>
            <param name="provider">Raster provider instance</param>
        </member>
        <member name="M:MapAround.DataProviders.SmallRasterProviderHolder.#ctor">
            <summary>
            Initializes a new instance of the MapAround.DataProviders.InMemoryRasterProvider.
            </summary>
        </member>
        <member name="T:MapAround.Extensions.Surfaces.ShadedReliefBuilder">
            <summary>
            Builds equally illuminated areas of 2.5D-surface.
            </summary>
        </member>
        <member name="M:MapAround.Extensions.Surfaces.ShadedReliefBuilder.GetLuminosity(MapAround.Geometry.Tessellations.Triangle,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates luminosity of the triangle.
            </summary>
            <param name="triangle">A triangle</param>
            <param name="lightX">An X component of the light vector</param>
            <param name="lightY">A Y component of the light vector</param>
            <param name="lightZ">A Z component of the light vector</param>
            <param name="zFactor">A value at which to multiply z-values for luminosity calculation</param>
            <returns>A luminosity value ranging from zero to one</returns>
        </member>
        <member name="M:MapAround.Extensions.Surfaces.ShadedReliefBuilder.BuildShadedRelief(System.Collections.Generic.IEnumerable{MapAround.Geometry.Tessellations.Triangle},System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Builds shaded relief.
            </summary>
            <param name="triangles">An object that enumerates triangles defining surface. All triangle coordinates should be instances of the MapAround.Geometry.Coordinate3D.</param>
            <param name="lightX">An X component of the light vector</param>
            <param name="lightY">A Y component of the light vector</param>
            <param name="lightZ">A Z component of the light vector</param>
            <param name="zFactor">A value at which to multiply z-values for luminosity calculation</param>
            <param name="luminosityLevelNumber">A number of resoluted luminosity levels</param>
            <returns>An array containing lightened polygons</returns>
        </member>
        <member name="M:MapAround.Extensions.Surfaces.ShadedReliefBuilder.BuildShadedRelief(System.Collections.Generic.IEnumerable{MapAround.Geometry.Coordinate3D},System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Builds shaded relief.
            </summary>
            <param name="surfacePoints">A 3D-coordinates defining source</param>
            <param name="lightX">An X component of the light vector</param>
            <param name="lightY">A Y component of the light vector</param>
            <param name="lightZ">A Z component of the light vector</param>
            <param name="zFactor">A value at which to multiply z-values for luminosity calculation</param>
            <param name="luminosityLevelNumber">A number of resoluted luminosity levels</param>
            <returns>An array containing lightened polygons</returns>
        </member>
        <member name="T:MapAround.Extensions.Surfaces.ShadedReliefBuilder.LightenedPolygon">
            <summary>
            Describes a lightened polygon.
            </summary>
        </member>
        <member name="F:MapAround.Extensions.Surfaces.ShadedReliefBuilder.LightenedPolygon.Polygon">
            <summary>
            Polygon.
            </summary>
        </member>
        <member name="F:MapAround.Extensions.Surfaces.ShadedReliefBuilder.LightenedPolygon.Luminocity">
            <summary>
            Luminocity value.
            </summary>
        </member>
        <member name="M:MapAround.Extensions.Surfaces.ShadedReliefBuilder.LightenedPolygon.#ctor(MapAround.Geometry.Polygon,System.Double)">
            <summary>
            Initializes a new instance of the MapAround.Extensions.Surfaces.ShadedReliefBuilder.LightenedPolygon
            </summary>
            <param name="polygon"></param>
            <param name="luminance"></param>
        </member>
        <member name="T:MapAround.Extensions.Surfaces.NamespaceDoc">
            <summary>
            Contains classes implementing 2.5D-surface algorithms.
            </summary>
        </member>
        <member name="T:MapAround.Extensions.Surfaces.IsolineBuilder">
            <summary>
            Builds isolines and polygons of z-value ranges.
            </summary>
        </member>
        <member name="M:MapAround.Extensions.Surfaces.IsolineBuilder.BuildIsolines(System.Collections.Generic.IEnumerable{MapAround.Geometry.Coordinate3D},System.Double[])">
            <summary>
            Builds isolines.
            </summary>
            <param name="surfacePoints">A 3D-coordinates defining source</param>
            <param name="zLevels">A descending array of z-values that define cutting planes</param>
            <returns>An array containing isolines</returns>
        </member>
        <member name="M:MapAround.Extensions.Surfaces.IsolineBuilder.BuildIsolines(System.Collections.Generic.IEnumerable{MapAround.Geometry.Tessellations.Triangle},System.Double[])">
            <summary>
            Builds isolines.
            </summary>
            <param name="triangles">An object that enumerates triangles defining surface. All triangle coordinates should be instances of the MapAround.Geometry.Coordinate3D.</param>
            <param name="zLevels">A descending array of z-values that define cutting planes</param>
            <returns>An array containing isolines</returns>
        </member>
        <member name="M:MapAround.Extensions.Surfaces.IsolineBuilder.BuildPolygonsForLevelRanges(System.Collections.Generic.IEnumerable{MapAround.Geometry.Coordinate3D},System.Double[])">
            <summary>
            Builds polygons for the z-value ranges.
            </summary>
            <param name="surfacePoints">A 3D-coordinates defining source</param>
            <param name="zLevels">A descending array of z-values that define ranges</param>
            <returns>An array containing level range polygons</returns>
        </member>
        <member name="M:MapAround.Extensions.Surfaces.IsolineBuilder.BuildPolygonsForLevelRanges(System.Collections.Generic.IEnumerable{MapAround.Geometry.Tessellations.Triangle},System.Double[])">
            <summary>
            Builds polygons for the z-value ranges.
            </summary>
            <param name="triangles">An object that enumerates triangles defining surface. All triangle coordinates should be instances of the MapAround.Geometry.Coordinate3D.</param>
            <param name="zLevels">A descending array of z-values that define ranges</param>
            <returns>An array containing level range polygons</returns>
        </member>
        <member name="T:MapAround.Extensions.Surfaces.IsolineBuilder.LevelRange">
            <summary>
            Describes a range of z-value.
            </summary>
        </member>
        <member name="F:MapAround.Extensions.Surfaces.IsolineBuilder.LevelRange.Min">
            <summary>
            Minimum value.
            </summary>
        </member>
        <member name="F:MapAround.Extensions.Surfaces.IsolineBuilder.LevelRange.Max">
            <summary>
            Maximum value.
            </summary>
        </member>
        <member name="M:MapAround.Extensions.Surfaces.IsolineBuilder.LevelRange.Contains(System.Double)">
            <summary>
            Determines if this interval contains the z-value.
            </summary>
            <param name="z">Z-value</param>
            <returns>true if this interval contains the z-value, false otherwise</returns>
        </member>
        <member name="M:MapAround.Extensions.Surfaces.IsolineBuilder.LevelRange.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the MapAround.Geometry.Extensions.Surfaces.IsolineBuilder.LevelRange
            </summary>
            <param name="min">Minimum value</param>
            <param name="max">Maximum value</param>
        </member>
        <member name="T:MapAround.Extensions.Surfaces.IsolineBuilder.LevelRangePolygon">
            <summary>
            Describes a polygon of z-value range.
            </summary>
        </member>
        <member name="F:MapAround.Extensions.Surfaces.IsolineBuilder.LevelRangePolygon.Polygon">
            <summary>
            Polygon.
            </summary>
        </member>
        <member name="F:MapAround.Extensions.Surfaces.IsolineBuilder.LevelRangePolygon.Range">
            <summary>
            A range of z-value
            </summary>
        </member>
        <member name="M:MapAround.Extensions.Surfaces.IsolineBuilder.LevelRangePolygon.#ctor(MapAround.Extensions.Surfaces.IsolineBuilder.LevelRange,MapAround.Geometry.Polygon)">
            <summary>
            Initializes a new instance of the MapAround.Geometry.Extensions.Surfaces.IsolineBuilder.LevelRangePolygon
            </summary>
            <param name="range">A range</param>
            <param name="polygon">A polygon</param>
        </member>
        <member name="T:MapAround.ThematicLayer.ThematicLayerExtension">
            <summary>
             Thematic Layer extension
            </summary>
        </member>
        <member name="T:MapAround.ThematicLayer.FeatureLayerExtension">
            <summary>
            FeatureLayer Extension
            </summary>
        </member>
        <member name="F:MapAround.ThematicLayer.FeatureLayerExtension._useExtesion">
            <summary/>
        </member>
        <member name="M:MapAround.ThematicLayer.FeatureLayerExtension.addAttribute(System.Xml.XmlElement,System.String,System.String)">
            <summary/>
        </member>
        <member name="M:MapAround.ThematicLayer.FeatureLayerExtension.floatArrayToString(System.Single[])">
            <summary/>
        </member>
        <member name="M:MapAround.ThematicLayer.FeatureLayerExtension.tryGetNodeByName(System.Xml.XmlNodeList,System.String)">
            <summary/>        
        </member>
        <member name="M:MapAround.ThematicLayer.FeatureLayerExtension.stringToFloatArray(System.String)">
            <summary/>
        </member>
        <member name="M:MapAround.ThematicLayer.FeatureLayerExtension.addTitleStyleElement(MapAround.Mapping.TitleStyle,System.Xml.XmlDocument,System.Xml.XmlElement)">
            <summary/>
        </member>
        <member name="M:MapAround.ThematicLayer.FeatureLayerExtension.addPolygonStyleElement(MapAround.Mapping.PolygonStyle,System.Xml.XmlDocument,System.Xml.XmlElement)">
            <summary/>
        </member>
        <member name="M:MapAround.ThematicLayer.FeatureLayerExtension.addPolylineStyleElement(MapAround.Mapping.PolylineStyle,System.Xml.XmlDocument,System.Xml.XmlElement)">
            <summary/>
        </member>
        <member name="M:MapAround.ThematicLayer.FeatureLayerExtension.addPointStyleElement(MapAround.Mapping.PointStyle,System.Xml.XmlDocument,System.Xml.XmlElement)">
            <summary/>
        </member>
        <member name="M:MapAround.ThematicLayer.FeatureLayerExtension.processTitleStyle(System.Xml.XmlNode,MapAround.Mapping.TitleStyle)">
            <summary/>
        </member>
        <member name="M:MapAround.ThematicLayer.FeatureLayerExtension.processPolygonStyle(System.Xml.XmlNode,MapAround.Mapping.PolygonStyle)">
            <summary/>
        </member>
        <member name="M:MapAround.ThematicLayer.FeatureLayerExtension.processPolylineStyle(System.Xml.XmlNode,MapAround.Mapping.PolylineStyle)">
            <summary/>
        </member>
        <member name="M:MapAround.ThematicLayer.FeatureLayerExtension.processPointStyle(System.Xml.XmlNode,MapAround.Mapping.PointStyle)">
            <summary/>
        </member>
        <member name="M:MapAround.ThematicLayer.FeatureLayerExtension.RegistryExtension(MapAround.Mapping.FeatureLayer)">
            <summary>
            Registry extension in FeatureLayer
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:MapAround.ThematicLayer.FeatureLayerExtension.UnRegistryExtension(MapAround.Mapping.FeatureLayer)">
            <summary>
            UnRegistry extension in FeatureLayer
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:MapAround.ThematicLayer.FeatureLayerExtension.DeleteExtension">
            <summary>
            Delete Extesion
            </summary>
        </member>
        <member name="M:MapAround.ThematicLayer.FeatureLayerExtension.#ctor(MapAround.Mapping.FeatureLayer)">
            <summary>
            Default constructor
            </summary>
            <param name="layer">FeatureLayer which will be used for extension</param>
        </member>
        <member name="M:MapAround.ThematicLayer.FeatureLayerExtension.processFromXml(System.Xml.XmlNode)">
            <summary>
            Save internal state in XmlNode
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:MapAround.ThematicLayer.FeatureLayerExtension.addToXml(System.Xml.XmlElement)">
            <summary>
            Restore internal state in XmlEllement
            </summary>
            <param name="element"></param>
        </member>
        <member name="P:MapAround.ThematicLayer.FeatureLayerExtension.UseExtension">
            <summary>
            Get and set use extension 
            </summary>
        </member>
        <member name="M:MapAround.ThematicLayer.ThematicLayerExtension.#ctor(MapAround.Mapping.FeatureLayer)">
            <summary>
            Default constructor 
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:MapAround.ThematicLayer.ThematicLayerExtension.RegistryExtension(MapAround.Mapping.FeatureLayer)">
            <summary>
            Registry extension in FeatureLayer
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:MapAround.ThematicLayer.ThematicLayerExtension.UnRegistryExtension(MapAround.Mapping.FeatureLayer)">
            <summary>
            UnRegistry extension in FeatureLayer
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:MapAround.ThematicLayer.ThematicLayerExtension.processFromXml(System.Xml.XmlNode)">
            <summary>
            Save internal state in XmlNode
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:MapAround.ThematicLayer.ThematicLayerExtension.addToXml(System.Xml.XmlElement)">
            <summary>
            Restore internal state in XmlEllement
            </summary>
            <param name="element"></param>
        </member>
        <member name="P:MapAround.ThematicLayer.ThematicLayerExtension.Attribute_index">
            <summary>
            Get and set attribute index
            </summary>
        </member>
        <member name="P:MapAround.ThematicLayer.ThematicLayerExtension.Attriibute_name">
            <summary>
            Get and set attribute name
            </summary>
        </member>
        <member name="P:MapAround.ThematicLayer.ThematicLayerExtension.ThemeRules">
            <summary>
            Get theme reules
            </summary>
        </member>
        <member name="T:MapAround.ThematicLayer.ThematicLayerExtension.FeatureStyle">
            <summary>
            Represent feature style
            </summary>
        </member>
        <member name="F:MapAround.ThematicLayer.ThematicLayerExtension.FeatureStyle.PointStyle">
            <summary/>
        </member>
        <member name="F:MapAround.ThematicLayer.ThematicLayerExtension.FeatureStyle.PolygonStyle">
            <summary/>
        </member>
        <member name="F:MapAround.ThematicLayer.ThematicLayerExtension.FeatureStyle.PolylineStyle">
            <summary/>
        </member>
        <member name="F:MapAround.ThematicLayer.ThematicLayerExtension.FeatureStyle.TitleStyle">
            <summary/>
        </member>
        <member name="T:MapAround.Geometry.PolygonBuilder">
            <summary>
            Poligonizes a linework.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.PolygonBuilder.BuildPolygons(System.Collections.Generic.IEnumerable{MapAround.Geometry.LinePath},System.Collections.Generic.IList{MapAround.Geometry.Polygon}@,System.Collections.Generic.IList{MapAround.Geometry.Segment}@,System.Collections.Generic.IList{MapAround.Geometry.Segment}@)">
            <summary>
            Builds polygons from the linework.
            </summary>
            <param name="sourcePaths">Enumerator of the source line paths</param>
            <param name="result">A resulting polygons</param>
            <param name="dangles">A list containing dangles</param>
            <param name="cuts">A list containing cuts</param>
        </member>
        <member name="T:MapAround.IO.BigEndianBinaryWriter">
            <summary>
            Extends the <see cref="T:System.IO.BinaryWriter"/> class to allow the writing of integers 
            and double values in the Big Endian format.
            </summary>
        </member>
        <member name="M:MapAround.IO.BigEndianBinaryWriter.#ctor">
            <summary>
            Initializes a new instance of the BigEndianBinaryWriter class.
            </summary>
        </member>
        <member name="M:MapAround.IO.BigEndianBinaryWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of BigEndianBinaryWriter class 
            based on the supplied stream and using UTF-8 as the encoding for strings.
            </summary>
            <param name="output">The supplied stream.</param>
        </member>
        <member name="M:MapAround.IO.BigEndianBinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of BigEndianBinaryWriter class 
            based on the supplied stream and a specific character encoding.
            </summary>
            <param name="output">The supplied stream.</param>
            <param name="encoding">The character encoding.</param>
        </member>
        <member name="M:MapAround.IO.BigEndianBinaryWriter.WriteIntBE(System.Int32)">
            <summary>
            Reads a 4-byte signed integer using the big-endian layout from the current stream 
            and advances the current position of the stream by two bytes.
            </summary>
            <param name="value">The four-byte signed integer to write.</param>
        </member>
        <member name="M:MapAround.IO.BigEndianBinaryWriter.WriteDoubleBE(System.Double)">
            <summary>
            Reads a 8-byte signed integer using the big-endian layout from the current stream 
            and advances the current position of the stream by two bytes.
            </summary>
            <param name="value">The four-byte signed integer to write.</param>
        </member>
        <member name="T:MapAround.IO.DbaseFieldDescriptor">
            <summary>
            Represents a descriprion of dBase field.
            </summary>
        </member>
        <member name="M:MapAround.IO.DbaseFieldDescriptor.GetDbaseType(System.Type)">
            <summary>
            Converts a CLR type to corresponding dBase type.
            </summary>
            <param name="type">A CLR type</param>
            <returns>A corresponding dBase type</returns>
        </member>
        <member name="M:MapAround.IO.DbaseFieldDescriptor.GetDataType(System.Char)">
            <summary>
            Gets a CLR type by the character defining a dBase field type.
            </summary>
        </member>
        <member name="P:MapAround.IO.DbaseFieldDescriptor.DataType">
            <summary>
            Gets or sets a CLR type corresponding 
            dBase type of field.
            </summary>
        </member>
        <member name="P:MapAround.IO.DbaseFieldDescriptor.Name">
            <summary>
            Gets or sets a name of dBase field.
            </summary>
        </member>
        <member name="P:MapAround.IO.DbaseFieldDescriptor.DbaseType">
            <summary>
            Gets or sets a character defining a dBase field type (C N L D or M).
            </summary>
        </member>
        <member name="P:MapAround.IO.DbaseFieldDescriptor.DataAddress">
            <summary>
            Gets or sets an offset of field data from the begining of record.
            </summary>
        </member>
        <member name="P:MapAround.IO.DbaseFieldDescriptor.Length">
            <summary>
            Gets or sets a data length (in bytes)
            </summary>
        </member>
        <member name="P:MapAround.IO.DbaseFieldDescriptor.DecimalCount">
            <summary>
            Gets or sets a number of decimal symbols.
            </summary>
        </member>
        <member name="T:MapAround.IO.DbaseFileHeader">
            <summary>
            Represents a header of dBase-file.
            </summary>
        </member>
        <member name="M:MapAround.IO.DbaseFileHeader.#ctor">
            <summary>
            Initializes a new instance of MapAround.IO.DbaseFileHeader.
            </summary>
        </member>
        <member name="M:MapAround.IO.DbaseFileHeader.AddColumn(System.String,System.Char,System.Type,System.Int32,System.Int32)">
             <summary>
             Adds a column.
            </summary>
             <param name="fieldName">A filed name</param>
             <param name="fieldType">A character defining a dBAse filed type (C N L or D)</param>
             <param name="fieldLength">A length of field in bytes</param>
             <param name="decimalCount">A number of decimal characters</param>
             <param name="DataType">A CLR data type</param>
        </member>
        <member name="M:MapAround.IO.DbaseFileHeader.AddColumn(System.String,System.Type)">
            <summary>
            Adds a column.
            </summary>
            <param name="fieldName">A filed name</param>
            <param name="dataType">A CLR data type</param>
        </member>
        <member name="M:MapAround.IO.DbaseFileHeader.RemoveColumn(System.String)">
            <summary>
            Removes a column.
            </summary>
            <param name="fieldName">A filed name</param>
            <returns>An index of the removed filed, -1 if filed is not found</returns>
        </member>
        <member name="M:MapAround.IO.DbaseFileHeader.Read(System.IO.BinaryReader)">
            <summary>
            Reads a dBase header.
            </summary>
            <param name="reader">A System.IO.BinaryReader instance to read header</param>
        </member>
        <member name="M:MapAround.IO.DbaseFileHeader.Write(System.IO.BinaryWriter)">
            <summary>
            Writes a dBase header into stream.
            </summary>
            <param name="writer">A System.IO.BinaryWriter instance to write header</param>
        </member>
        <member name="M:MapAround.IO.DbaseFileHeader.RecountColumnLength(MapAround.IO.DbaseFieldDescriptor,System.Collections.IEnumerable)">
            <summary>
            Computes a maximum length of field taking into account all the values.
            </summary>
            <param name="field">A descriptor of field</param>
            <param name="columnValues">A field value enumerator</param>
        </member>
        <member name="P:MapAround.IO.DbaseFileHeader.DBaseColumns">
            <summary>
            Gets an array containing 
            descriptions of dBase fileds.
            </summary>
        </member>
        <member name="P:MapAround.IO.DbaseFileHeader.Encoding">
            <summary>
            Gets or sets an encoding which is used 
            to read or write string values.
            </summary>
        </member>
        <member name="P:MapAround.IO.DbaseFileHeader.LastUpdateDate">
            <summary>
            Gets a last update date.
            </summary>
        </member>
        <member name="P:MapAround.IO.DbaseFileHeader.NumFields">
            <summary>
            Gets or sets a number of fields.
            </summary>
        </member>
        <member name="P:MapAround.IO.DbaseFileHeader.NumRecords">
            <summary>
            Gets or sets a number of recodrs.
            </summary>
        </member>
        <member name="P:MapAround.IO.DbaseFileHeader.RecordLength">
            <summary>
            Gets a length of record.
            </summary>
        </member>
        <member name="P:MapAround.IO.DbaseFileHeader.HeaderLength">
            <summary>
            Gets a length of header.
            </summary>
        </member>
        <member name="T:MapAround.IO.DbaseWriter">
            <summary>
            Writes dBase IV files.
            </summary>
            <remarks>
            Used mainly for writing ESRI Shapefile attributes. 
            </remarks>
        </member>
        <member name="M:MapAround.IO.DbaseWriter.#ctor(System.String,MapAround.IO.DbaseFileHeader)">
            <summary>
            Initializes a new instance of MapAround.IO.DbaseWriter
            </summary>
            <param name="filename">File name</param>
            <param name="dbaseHeader">A dBase file header</param>
        </member>
        <member name="M:MapAround.IO.DbaseWriter.WriteHeader">
            <summary>
            Writes a header.
            </summary>
        </member>
        <member name="M:MapAround.IO.DbaseWriter.Write(System.Collections.IList,System.Int32)">
            <summary>
            Writes a row.
            </summary>
            <param name="columnValues">A list containing the column values</param>
            <param name="RecNum">A number of record</param>
        </member>
        <member name="M:MapAround.IO.DbaseWriter.IsRealType(System.Type)">
            <summary>
            Indicates whether a specified type is a real type.
            </summary>
            <param name="type">Type</param>
            <returns>true, if a specified type is a real type, false otherwise</returns>
        </member>
        <member name="M:MapAround.IO.DbaseWriter.IsIntegerType(System.Type)">
            <summary>
            Indicates whether a specified type is an integer type.
            </summary>
            <param name="type">Type</param>
            <returns>true, if a specified type is an integer type, false otherwise</returns>
        </member>
        <member name="M:MapAround.IO.DbaseWriter.Write(System.Decimal,System.Int32,System.Int32)">
            <summary>
            Writes a decimal value.
            </summary>
            <param name="number">A value to write</param>
            <param name="length">A length</param>
            <param name="decimalCount">A number of decimal characters</param>
        </member>
        <member name="M:MapAround.IO.DbaseWriter.Write(System.Double,System.Int32,System.Int32)">
            <summary>
            Writes a double value.
            </summary>
            <param name="number"></param>
            <param name="length"></param>
            <param name="decimalCount"></param>
        </member>
        <member name="M:MapAround.IO.DbaseWriter.Write(System.Single,System.Int32,System.Int32)">
            <summary>
            Writes a float value.
            </summary>
            <param name="number"></param>
            <param name="length"></param>
            <param name="decimalCount"></param>
        </member>
        <member name="M:MapAround.IO.DbaseWriter.Write(System.String,System.Int32)">
            <summary>
            Writes a string value.
            </summary>
            <param name="text"></param>
            <param name="length"></param>
        </member>
        <member name="M:MapAround.IO.DbaseWriter.Write(System.DateTime)">
            <summary>
            Writes a datetime value.
            </summary>
            <param name="date"></param>
        </member>
        <member name="M:MapAround.IO.DbaseWriter.Write(System.Boolean)">
            <summary>
            Writes a bool value.
            </summary>
            <param name="flag"></param>
        </member>
        <member name="M:MapAround.IO.DbaseWriter.Write(System.Char,System.Int32)">
            <summary>
            Writes a character.
            </summary>
            <param name="c">The character to write.</param>
            <param name="length">The length of the column to write in. Writes
            left justified, filling with spaces.</param>
        </member>
        <member name="M:MapAround.IO.DbaseWriter.Write(System.Byte)">
            <summary>
            Writes a byte.
            </summary>
            <param name="number">The byte.</param>
        </member>
        <member name="M:MapAround.IO.DbaseWriter.Close">
            <summary>
            Closes current record and stream.
            </summary>
        </member>
        <member name="P:MapAround.IO.DbaseWriter.Header">
            <summary>
            Gets a dBase file header.
            </summary>
        </member>
        <member name="T:MapAround.IO.Handlers.MultiLineHandler">
            <summary>
            Обработчик для фигуры "Ломаная линия"
            </summary>
        </member>
        <member name="T:MapAround.IO.Handlers.ShapeHandler">
            <summary>
            Базовый класс обработчиков геометрической фигуры 
            (для чтения из потока и записи данных в поток)
            </summary>
        </member>
        <member name="M:MapAround.IO.Handlers.ShapeHandler.Read(System.IO.Stream,MapAround.Geometry.BoundingRectangle,MapAround.IO.ShapeFileRecord)">
            <summary>
            Читать потока данные по геометрическому объекту и заполнять запись shape-файла 
            </summary>
            <param name="file">Входной поток для чтения</param>
            <param name="bounds">Ограничивающий прямоугольник, с которым должен пересекаться ограничивающий прямоугольник записи</param>
            <param name="Record">Запись Shape-файла в которую будет помещена прочитанная информация</param>
            <returns>Успешность операции</returns>
        </member>
        <member name="M:MapAround.IO.Handlers.ShapeHandler.Write(MapAround.Geometry.IGeometry,System.IO.BinaryWriter)">
            <summary>
            Записать данные геометрического  объекта в указанный поток 
            </summary>
            <param name="geometry">Геометрический объект для записи</param>
            <param name="file">Поток записи</param>
        </member>
        <member name="M:MapAround.IO.Handlers.ShapeHandler.GetLength(MapAround.Geometry.IGeometry)">
            <summary>
            Получить длину в байтах геометрического объекта (для записи в файл)
            </summary>
            <param name="geometry">Геометрический объект </param>
            <returns>
            Длина для 16битового формата </returns>
        </member>
        <member name="M:MapAround.IO.Handlers.ShapeHandler.IsRecordInView(MapAround.Geometry.BoundingRectangle,MapAround.IO.ShapeFileRecord)">
            <summary>Проверка записи на нахождение границ фигуры в указанной области</summary>
            <param name="bounds">Границы области</param>
            <param name="record">Запись shape-файла</param>
            <returns></returns>
        </member>
        <member name="P:MapAround.IO.Handlers.ShapeHandler.ShapeType">
            <summary> Тип фигуры</summary>
        </member>
        <member name="M:MapAround.IO.Handlers.MultiLineHandler.Read(System.IO.Stream,MapAround.Geometry.BoundingRectangle,MapAround.IO.ShapeFileRecord)">
            <summary>
            Читает запись представляющую полигон.
            </summary>
            <param name="file">Входной поток</param>
            <param name="record">Запись Shape-файла в которую будет помещена прочитанная информация</param>
            <param name="bounds">Ограничивающий прямоугольник, с которым должен пересекаться ограничивающий прямоугольник записи</param>
            <returns>Успешность операции</returns>
        </member>
        <member name="M:MapAround.IO.Handlers.MultiLineHandler.Write(MapAround.Geometry.IGeometry,System.IO.BinaryWriter)">
             <summary>
             Записывает данные ломаной линии в указанный поток. 
            </summary>
             <param name="geometry">объект ломаной линии для записи</param>
             <param name="file">Поток записи</param>        
        </member>
        <member name="M:MapAround.IO.Handlers.MultiLineHandler.GetLength(MapAround.Geometry.IGeometry)">
            <summary>
            Получить длину ломаной линии в байтах (для записи в файл)
            </summary>
            <param name="geometry">объект ломаной линии</param>
            <returns>
            Длина для 16битового формата </returns>
        </member>
        <member name="P:MapAround.IO.Handlers.MultiLineHandler.ShapeType">
            <summary> Тип фигуры</summary>
        </member>
        <member name="T:MapAround.IO.Handlers.MultiPointHandler">
            <summary>
            Обработчик коллекции точек
            </summary>
        </member>
        <member name="M:MapAround.IO.Handlers.MultiPointHandler.Read(System.IO.Stream,MapAround.Geometry.BoundingRectangle,MapAround.IO.ShapeFileRecord)">
            <summary>
            Читает запись представляющую коллекцию точек.
            </summary>
            <param name="file">Входной поток</param>
            <param name="record">Запись Shape-файла в которую будет помещена прочитанная информация</param>
            <param name="bounds">Ограничивающий прямоугольник, с которым должен пересекаться ограничивающий прямоугольник записи</param>
        </member>
        <member name="M:MapAround.IO.Handlers.MultiPointHandler.Write(MapAround.Geometry.IGeometry,System.IO.BinaryWriter)">
            <summary>
            Записать данные геометрического  объекта в указанный поток 
            </summary>
            <param name="geometry">Геометрический объект для записи</param>
            <param name="file">Поток записи</param>
        </member>
        <member name="M:MapAround.IO.Handlers.MultiPointHandler.GetLength(MapAround.Geometry.IGeometry)">
            <summary>
            Получить длину в байтах геометрического объекта (для записи в файл)
            </summary>
            <param name="geometry">Геометрический объект </param>
            <returns>
            Длина для 16битового формата </returns>
        </member>
        <member name="P:MapAround.IO.Handlers.MultiPointHandler.ShapeType">
            <summary> Тип фигуры</summary>
        </member>
        <member name="T:MapAround.IO.Handlers.PointHandler">
            <summary>
            Обработчик точки.
            </summary>
        </member>
        <member name="M:MapAround.IO.Handlers.PointHandler.Read(System.IO.Stream,MapAround.Geometry.BoundingRectangle,MapAround.IO.ShapeFileRecord)">
            <summary>
            Читает запись представляющую точку.
            </summary>
            <param name="file">Входной поток</param>
            <param name="record">Запись Shape-файла в которую будет помещена прочитанная информация</param>
            <param name="bounds">Ограничивающий прямоугольник, с которым должен пересекаться ограничивающий прямоугольник записи</param>
        </member>
        <member name="M:MapAround.IO.Handlers.PointHandler.Write(MapAround.Geometry.IGeometry,System.IO.BinaryWriter)">
            <summary>
            Writes to the given stream the equilivent shape file record given a Geometry object.
            </summary>
            <param name="geometry">The geometry object to write.</param>
            <param name="file">The stream to write to.</param>
        </member>
        <member name="M:MapAround.IO.Handlers.PointHandler.GetLength(MapAround.Geometry.IGeometry)">
            <summary>
            Получить длину в байтах геометрического объекта (для записи в файл)
            </summary>
            <param name="geometry">Геометрический объект </param>
            <returns>
            Длина для 16битового формата </returns>
        </member>
        <member name="P:MapAround.IO.Handlers.PointHandler.ShapeType">
            <summary> Тип фигуры</summary>
        </member>
        <member name="T:MapAround.IO.Handlers.PolygonHandler">
            <summary>
            Обработчик полигона.
            </summary>
        </member>
        <member name="M:MapAround.IO.Handlers.PolygonHandler.Read(System.IO.Stream,MapAround.Geometry.BoundingRectangle,MapAround.IO.ShapeFileRecord)">
            <summary>
            Читает запись представляющую полигон.
            </summary>
            <param name="file">Входной поток</param>
            <param name="record">Запись Shape-файла в которую будет помещена прочитанная информация</param>
            <param name="bounds">Ограничивающий прямоугольник, с которым должен пересекаться ограничивающий прямоугольник записи</param>
        </member>
        <member name="M:MapAround.IO.Handlers.PolygonHandler.Write(MapAround.Geometry.IGeometry,System.IO.BinaryWriter)">
            <summary>
            Записывает данные геометрического  объекта в указанный поток.
            </summary>
            <param name="geometry">Геометрический объект для записи</param>
            <param name="file">Поток записи</param>
        </member>
        <member name="M:MapAround.IO.Handlers.PolygonHandler.GetLength(MapAround.Geometry.IGeometry)">
            <summary>
            Получает длину в байтах геометрического объекта (для записи в файл)
            </summary>
            <param name="geometry">Геометрический объект </param>
            <returns>
            Длина для 16битового формата </returns>
        </member>
        <member name="M:MapAround.IO.Handlers.PolygonHandler.PointInList(MapAround.Geometry.ICoordinate,System.Collections.Generic.IEnumerable{MapAround.Geometry.ICoordinate})">
            <summary>
            Test if a point is in a list of coordinates.
            </summary>
            <param name="testPoint">TestPoint the point to test for.</param>
            <param name="pointList">PointList the list of points to look through.</param>
            <returns>true if testPoint is a point in the pointList list.</returns>
        </member>
        <member name="P:MapAround.IO.Handlers.PolygonHandler.ShapeType">
            <summary>
            Получает тип фигуры.
            </summary>
        </member>
        <member name="M:MapAround.IO.StreamExtensions.ReadDoubleBE(System.IO.Stream)">
            <summary>
            Reads a 8-byte signed double using the big-endian layout 
            from the current stream and advances the current position of the stream by eight bytes.
            </summary>
            <param name="stream">The input stream</param>
            <returns>The read value</returns>       
        </member>
        <member name="M:MapAround.IO.StreamExtensions.ReadDouble(System.IO.Stream)">
            <summary>
            Reads a 8-byte signed double using the little-endian layout 
            from the current stream and advances the current position of the stream by eight bytes.
            </summary>
            <param name="stream">The input stream</param>
            <returns>The read value</returns>       
        </member>
        <member name="M:MapAround.IO.StreamExtensions.ReadInt32BE(System.IO.Stream)">
            <summary>
            Читает 4-байтовое целое с помощью порядком байтов от старшего макет
            из текущего потока и перемещает текущую позицию потока по четыре байта.
            </summary>
            <param name="stream">The input stream</param>
            <returns>The read value</returns>       
        </member>
        <member name="M:MapAround.IO.StreamExtensions.ReadInt32(System.IO.Stream)">
            <summary>
            Reads a 4-byte integer using the little-endian layout 
            from the current stream and advances the current position of the stream by four bytes.
            </summary>
            <param name="stream">The input stream</param>
            <returns>The read value</returns>       
        </member>
        <member name="T:MapAround.Mapping.IRasterRenderer">
            <summary>
            Provides access to members of object that draws rasters on the map.
            MapAround.Mapping.Map.RasterRenderer can be assigned with implementing objects.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.IRasterRenderer.RenderRaster(System.Drawing.Graphics,System.Drawing.Bitmap,MapAround.Mapping.RasterStyle,MapAround.Geometry.BoundingRectangle,MapAround.Geometry.BoundingRectangle,System.Double)">
            <summary>
            Draws a raster.
            </summary>
            <param name="g">A System.Drawing.Graphics instance that represents a surface for drawing a raster</param>
            <param name="bitmap">A System.Drawing.Bitmap instance to draw</param>
            <param name="style">An object defining a raster rendering style</param>
            <param name="viewBox">A bounding rectangle defining the drawing area</param>
            <param name="bitmapBounds">A bounding rectangle defining the bounds of the image</param>
            <param name="scaleFactor">A number of pixels per map unit</param>
        </member>
        <member name="T:MapAround.Mapping.DefaultRasterRenderer">
            <summary>
            Implements the MapAround.Mapping.IRasterRenderer interface.
            </summary>
        </member>
        <member name="T:MapAround.Mapping.RasterStyle">
            <summary>
            Defines a raster rendering style.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.RasterStyle.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance</returns>
        </member>
        <member name="P:MapAround.Mapping.RasterStyle.ColorAdjustmentMatrix">
            <summary>
            Gets or sets a matrix that will be applied to adjust 
            the raster colors when rendering.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.RasterStyle.InterpolationMode">
            <summary>
            Gets or sets an interpolation mode for the raster.
            </summary>
        </member>
        <member name="T:MapAround.MathUtils.NamespaceDoc">
            <summary>
            The MapAround.MathUtils namespace contains classes implementing mathematical 
            algorithms that can be used for spatial data processing.
            </summary>
        </member>
        <member name="T:MapAround.MathUtils.Radians">
            <summary>
            Implements a methods which can be used
            with angular values represented in radians.
            </summary>
        </member>
        <member name="M:MapAround.MathUtils.Radians.ToDegrees(System.Double)">
            <summary>
            Converts a value of the angle from radians to degrees.
            </summary>
            <param name="radians">An angle value in radians</param>
            <returns>An angle value in degrees</returns>
        </member>
        <member name="T:MapAround.MathUtils.Degrees">
            <summary>
            Implements a methods which can be used
            with angular values represented in degrees.
            </summary>
        </member>
        <member name="M:MapAround.MathUtils.Degrees.ToRadians(System.Double)">
            <summary>
            Converts a value of the angle from degrees to radians.
            </summary>
            <param name="degrees">An angle value in degrees</param>
            <returns>An angle value in radians</returns>
        </member>
        <member name="T:MapAround.MathUtils.SvdDecomposer">
            <summary>
            Performs singular decomposition of matrix.
            </summary>
        </member>
        <member name="M:MapAround.MathUtils.SvdDecomposer.Solve(System.Double[0:,0:],System.Double[],System.Double[])">
            <summary>
            Solves a linear equations system (A * x = B).
            </summary>
            <param name="A">The Matrix A</param>
            <param name="b">The vector B</param>
            <param name="x">The vector x</param>
        </member>
        <member name="M:MapAround.MathUtils.SvdDecomposer.CalcDecomposition(System.Double[0:,0:],System.Int32,System.Int32,System.Double[],System.Int32,System.Double[0:,0:],System.Int32,System.Double[0:,0:],System.Int32@)">
            <summary>
            Calculates a singular value decomposition of the matrix.
            </summary>
            <param name="A">Matrix</param>
            <param name="m">A row number of the matrix A</param>
            <param name="n">A column number of the matrix A</param>
            <param name="w">Vector of singular values</param>
            <param name="matu"></param>
            <param name="U">First matrix in decomposition</param>
            <param name="matv"></param>
            <param name="V">Third matrix in decomposition</param>
            <param name="ierr"></param>
        </member>
        <member name="T:MapAround.MathUtils.Matrix">
            <summary>
            Represents a square matrix.
            </summary>
        </member>
        <member name="M:MapAround.MathUtils.Matrix.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes a new instance of MapAround.MathUtils.Matrix.
            </summary>
            <param name="elements">An array of doubles containing matrix elements</param>
        </member>
        <member name="M:MapAround.MathUtils.Matrix.Multiply(MapAround.MathUtils.Matrix)">
            <summary>
            Multiply this matrix to the other.
            </summary>
            <param name="other">Factor</param>
            <returns>Product</returns>
        </member>
        <member name="M:MapAround.MathUtils.Matrix.GetInverseMatrix">
            <summary>
            Calculates the inverse matrix.
            </summary>
            <returns>The inverse matrix</returns>
        </member>
        <member name="P:MapAround.MathUtils.Matrix.Size">
            <summary>
            Gets a size of this matrix.
            </summary>
        </member>
        <member name="P:MapAround.MathUtils.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets an element of this matrix.
            </summary>
            <param name="i">A zero-based index of the element row</param>
            <param name="j">A zero-based index of the element column</param>
            <returns>Element value</returns>
        </member>
        <member name="P:MapAround.MathUtils.Matrix.IsInvertible">
            <summary>
            Gets a value indicating whether this matrix is invertible.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.Transformations.NamespaceDoc">
            <summary>
            The MapAround.Transformations namespace contains interfaces 
            and classes defining coordinate transformations.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.Transformations.TransformType">
            <summary>
            Semantic type of transform used in coordinate transformation.
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.Transformations.TransformType.Other">
            <summary>
            Unknown or unspecified type of transform.
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.Transformations.TransformType.Conversion">
            <summary>
            Transform depends only on defined parameters.
            For example, a cartographic projection.
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.Transformations.TransformType.Transformation">
            <summary>
            Transform depends only on empirically derived parameters.
            For example a datum transformation.
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.Transformations.TransformType.ConversionAndTransformation">
            <summary>
            Transform depends on both defined and empirical parameters.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.Transformations.IMathTransformFactory">
             <summary>
             Provides access to members of objects 
             that create math transforms.
             </summary>
             <remarks>
             <para>IMathTransformFactory is a low level factory that is used to create
             IMathTransform objects.  Many high level GIS applications will never
             need to use a IMathTransformFactory directly; they can use a
             ICoordinateTransformationFactory instead.  However, the
             IMathTransformFactory interface is specified here, since it can be
             used directly by applications that wish to transform other types of
             coordinates (e.g. color coordinates, or image pixel coordinates).</para>
            
             <para>The following comments assume that the same vendor implements the math
             transform factory interfaces and math transform interfaces.</para>
            
             <para>A math transform is an object that actually does the work of applying
             formulae to coordinate values.  The math transform does not know or
             care how the coordinates relate to positions in the real world.  This
             lack of semantics makes implementing IMathTransformFactory significantly
             easier than it would be otherwise.</para>
            
             <para>For example IMathTransformFactory can create affine math transforms.  The
             affine transform applies a matrix to the coordinates without knowing how
             what it is doing relates to the real world.  So if the matrix scales Z
             values by a factor of 1000, then it could be converting meters into
             millimeters, or it could be converting kilometers into meters.</para>
            
             <para>Because math transforms have low semantic value (but high mathematical
             value), programmers who do not have much knowledge of how GIS applications
             use coordinate systems, or how those coordinate systems relate to the real
             world can implement IMathTransformFactory.</para>
            
             <para>The low semantic content of math transforms also means that they will be
             useful in applications that have nothing to do with GIS coordinates.  For
             example, a math transform could be used to map color coordinates between
             different color spaces, such as converting (red, green, blue) colors into
             (hue, light, saturation) colors.</para>
            
             <para>Since a math transform does not know what its source and target coordinate
             systems mean, it is not necessary or desirable for a math transform object
             to keep information on its source and target coordinate systems.</para>
             </remarks>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.IMathTransformFactory.CreateAffineTransform(System.Double[0:,0:])">
             <summary>
             Creates an affine transform from a matrix.
             </summary>
             <remarks>
             If the transform's input dimension is M, and output dimension is N, then
             the matrix will have size [N+1][M+1]. The +1 in the matrix dimensions
             allows the matrix to do a shift, as well as a rotation. The [M][j]
             element of the matrix will be the j'th ordinate of the moved origin.
             The [i][N] element of the matrix will be 0 for i less than M, and 1
             for i equals M.
             </remarks>
            <param name="matrix">The matrix used to define the affine transform.</param>
            <returns>The affine transformation</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.IMathTransformFactory.CreateConcatenatedTransform(MapAround.CoordinateSystems.Transformations.IMathTransform,MapAround.CoordinateSystems.Transformations.IMathTransform)">
             <summary>
             Creates a transform by concatenating two existing transforms.
             </summary>
             <remarks>
             A concatenated transform acts in the same way as applying two transforms,
             one after the other.
            
             The dimension of the output space of the first transform must match
             the dimension of the input space in the second transform.
             If you wish to concatenate more than two transforms, then you can
             repeatedly use this method.
             </remarks>
             <param name="transform1">The first transform to apply to points.</param>
             <param name="transform2">The second transform to apply to points.</param>
             <returns>The concatenated transformation</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.IMathTransformFactory.CreateFromWKT(System.String)">
            <summary>
            Creates a math transform from a well-known text string.
            </summary>
            <param name="wkt">Well-known text representation of the transform</param>
            <rereturns>The transformation</rereturns>
            <returns>The transformation</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.IMathTransformFactory.CreateFromXML(System.String)">
            <summary>
            Creates a math transform from XML.
            </summary>
            <param name="xml">XML representation of the transform</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.IMathTransformFactory.CreateParameterizedTransform(System.String,System.Collections.Generic.List{MapAround.CoordinateSystems.Projections.Parameter})">
            <summary>
             Creates a transform from a classification name and parameters.
            </summary>
            <remarks>
            The client must ensure that all the linear parameters are expressed in
            meters, and all the angular parameters are expressed in degrees.  Also,
            they must supply "semi_major" and "semi_minor" parameters for
            cartographic projection transforms.
            </remarks>
            <param name="classification">The classification name of the transform (e.g. "Transverse_Mercator")</param>
            <param name="parameters">The parameter values in standard units</param>
            <returns>The transformation</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.IMathTransformFactory.CreatePassThroughTransform(System.Int32,MapAround.CoordinateSystems.Transformations.IMathTransform)">
             <summary>
             Creates a transform which passes through a subset of ordinates to another transform.
             </summary>
             <remarks>
             This allows transforms to operate on a subset of ordinates.  For example,
             if you have (Lat,Lon,Height) coordinates, then you may wish to convert the
             height values from meters to feet without affecting the (Lat,Lon) values.
             If you wanted to affect the (Lat,Lon) values and leave the Height values
             alone, then you would have to swap the ordinates around to
             (Height,Lat,Lon).  You can do this with an affine map.
            
             </remarks>
             <param name="firstAffectedOrdinate">The lowest index of the affected ordinates</param>
             <param name="subTransform">Transform to use for affected ordinates</param>
             <returns>The transformation</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.IMathTransformFactory.IsParameterAngular(System.String)">
            <summary>
            Indicates whether parameter is angular.
            </summary>
            <remarks>Clients must ensure that all angular parameter values are in degrees</remarks>
            <param name="parameterName">Name of parameter to test</param>
            <returns>True if the parameter is angular, else otherwise</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.IMathTransformFactory.IsParameterLinear(System.String)">
            <summary>
            Indicates whether parameter is linear.
            </summary>
            <remarks>
            Clients must ensure that all linear parameter values are in meters.
            </remarks>
            <param name="parameterName">Name of parameter to test</param>
            <returns>True if the parameter is linear, else otherwise</returns>
        </member>
        <member name="T:MapAround.CoordinateSystems.Transformations.ICoordinateTransformationFactory">
            <summary>
            Creates coordinate transformations.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.ICoordinateTransformationFactory.CreateFromCoordinateSystems(MapAround.CoordinateSystems.ICoordinateSystem,MapAround.CoordinateSystems.ICoordinateSystem)">
            <summary>
            Creates a transformation between two coordinate systems.
            </summary>
            <remarks>
            This method will examine the coordinate systems in order to
            construct a transformation between them. This method may fail if no
            path between the coordinate systems is found, using the normal failing
            behavior of the DCP (e.g. throwing an exception).
            </remarks>
            <param name="sourceCS">Input coordinate system</param>
            <param name="targetCS">Output coordinate system</param>
        </member>
        <member name="T:MapAround.CoordinateSystems.Transformations.ICoordinateTransformation">
            <summary>
            Describes a coordinate transformation.
            </summary>
            <remarks>
            <para>This interface only describes a coordinate transformation, it does not
            actually perform the transform operation on points.  To transform
            points you must use a math transform.</para>
            <para>The math transform will transform positions in the source coordinate
            system into positions in the target coordinate system.
            </para>
            </remarks>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.ICoordinateTransformation.AreaOfUse">
            <summary>
            Human readable description of domain in source coordinate system.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.ICoordinateTransformation.Authority">
            <summary>
            Gets an authority which defined transformation and parameter values.
            </summary>
            <remarks>
            An Authority is an organization that maintains definitions of Authority
            Codes.  For example the European Petroleum Survey Group (EPSG) maintains
            a database of coordinate systems, and other spatial referencing objects,
            where each object has a code number ID.  For example, the EPSG code for a
            WGS84 Lat/Lon coordinate system is '4326'.
            </remarks>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.ICoordinateTransformation.AuthorityCode">
            <summary>
            Gets a code used by authority to identify transformation.
            </summary>
            <remarks>
            <para>The AuthorityCode is a compact string defined by an Authority to reference
            a particular spatial reference object.  For example, the European Survey
            Group (EPSG) authority uses 32 bit integers to reference coordinate systems,
            so all their code strings will consist of a few digits.  The EPSG code for
            WGS84 Lat/Lon is '4326'.</para>
            <para> An empty string is used for no code.</para></remarks>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.ICoordinateTransformation.MathTransform">
            <summary>
            Gets math transform.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.ICoordinateTransformation.Name">
            <summary>
            Gets the name of transformation.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.ICoordinateTransformation.Remarks">
            <summary>
            Gets the provider-supplied remarks.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.ICoordinateTransformation.SourceCS">
            <summary>
            Gets the source coordinate system.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.ICoordinateTransformation.TargetCS">
            <summary>
            Gets the target coordinate system.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.ICoordinateTransformation.TransformType">
            <summary>
            Gets the semantic type of transform.
            </summary>
            <remarks>For example, a datum transformation or a coordinate conversion</remarks>
        </member>
        <member name="T:MapAround.CoordinateSystems.Transformations.DomainFlags">
            <summary>
            Flags indicating parts of domain covered by a convex hull.
            </summary>
            <remarks>
            These flags can be combined.  For example, the value 3 corresponds to
            a combination of IDF_Inside and MF_DF_Outside, which means that some
            parts of the convex hull are inside the domain, and some parts of the
            convex hull are outside the domain.
            </remarks>
        </member>
        <member name="F:MapAround.CoordinateSystems.Transformations.DomainFlags.Inside">
            <summary>
            At least one point in a convex hull is inside the transform's domain.
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.Transformations.DomainFlags.Outside">
            <summary>
            At least one point in a convex hull is outside the transform's domain.
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.Transformations.DomainFlags.Discontinuous">
            <summary>
            At least one point in a convex hull is not transformed continuously.
            </summary>
            <remarks>
            As an example, consider a "Longitude_Rotation" transform which adjusts
            longitude coordinates to take account of a change in Prime Meridian.
            If the rotation is 5 degrees east, then the point (Lat=175,Lon=0)
            is not transformed continuously, since it is on the meridian line
            which will be split at +180/-180 degrees.
            </remarks>
        </member>
        <member name="T:MapAround.CoordinateSystems.Transformations.IGeographicTransform">
            <summary>
            The IGeographicTransform interface is implemented on geographic transformation
            objects and implements datum transformations between geographic coordinate systems.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.IGeographicTransform.Forward(System.Collections.Generic.List{System.Double[]})">
            <summary>
            Transforms an array of points from the source geographic coordinate system
            to the target geographic coordinate system.
            </summary>
            <param name="points">Points in the source geographic coordinate system</param>
            <returns>Points in the target geographic coordinate system</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.IGeographicTransform.Inverse(System.Collections.Generic.List{System.Double[]})">
            <summary>
            Transforms an array of points from the target geographic coordinate system
            to the source geographic coordinate system.
            </summary>
            <param name="points">Points in the target geographic coordinate system</param>
            <returns>Points in the source geographic coordinate system</returns>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.IGeographicTransform.SourceGCS">
            <summary>
            Gets or sets source geographic coordinate system for the transformation.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.IGeographicTransform.TargetGCS">
            <summary>
            Gets or sets the target geographic coordinate system for the transformation.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.IGeographicTransform.ParameterInfo">
            <summary>
            Returns an accessor interface to the parameters for this geographic transformation.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.Transformations.GeographicTransform">
            <summary>
            Implements datum transformations between geographic coordinate systems.
            Convert geographic coordinate systems.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.GeographicTransform.Inverse">
            <summary>
            Creates the inverse transform of this object.
            </summary>
            <remarks>
            This method may fail if the transform is not one to one.
            However, all cartographic projections should succeed.
            </remarks>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.GeographicTransform.Transform(System.Double[])">
            <summary>
            Transforms a coordinate point.
            </summary>
            <remarks>The passed parameter point should not be modified.</remarks>
            <param name="point">An array containing the point coordinates to transform</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.GeographicTransform.TransformList(System.Collections.Generic.List{System.Double[]})">
            <summary>
            Transforms a list of coordinate point ordinal values.
            </summary>
            <param name="points">Packed ordinates of points to transform</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.GeographicTransform.Invert">
            <summary>
            Inverts this transform.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.GeographicTransform.SourceGCS">
            <summary>
            Gets or sets source geographic coordinate system for the transformation.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.GeographicTransform.TargetGCS">
            <summary>
            Gets or sets the target geographic coordinate system for the transformation.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.GeographicTransform.WKT">
            <summary>
            Gets a well-known text representation of this object.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.GeographicTransform.XML">
            <summary>
            Gets an XML representation of this object.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.Transformations.GeocentricTransform">
            <summary>
            Implements a geocentric transformation.
            </summary>
            <remarks>
            <para>Latitude, Longitude and ellipsoidal height in terms of a 3-dimensional geographic system
            may by expressed in terms of a geocentric (earth centered) Cartesian coordinate reference system
            X, Y, Z with the Z axis corresponding to the earth's rotation axis positive northwards, the X
            axis through the intersection of the prime meridian and equator, and the Y axis through
            the intersection of the equator with longitude 90 degrees east. The geographic and geocentric
            systems are based on the same geodetic datum.</para>
            <para>Geocentric coordinate reference systems are conventionally taken to be defined with the X
            axis through the intersection of the Greenwich meridian and equator. This requires that the equivalent
            geographic coordinate reference systems based on a non-Greenwich prime meridian should first be
            transformed to their Greenwich equivalent. Geocentric coordinates X, Y and Z take their units from
            the units of the ellipsoid axes (a and b). As it is conventional for X, Y and Z to be in metres,
            if the ellipsoid axis dimensions are given in another linear unit they should first be converted
            to metres.</para>
            </remarks>
        </member>
        <member name="F:MapAround.CoordinateSystems.Transformations.GeocentricTransform._isInverse">
            <summary>
            
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.Transformations.GeocentricTransform._parameters">
            <summary>
            
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.Transformations.GeocentricTransform._inverse">
            <summary>
            
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.GeocentricTransform.#ctor(System.Collections.Generic.List{MapAround.CoordinateSystems.Projections.ProjectionParameter},System.Boolean)">
            <summary>
            Initializes a new instance of the MapAround.CoordinateSystems.Transformations.GeocentricTransform.
            </summary>
            <param name="parameters">List of parameters to initialize the projection</param>
            <param name="isInverse">Indicates whether the projection forward (meters to degrees or degrees to meters)</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.GeocentricTransform.#ctor(System.Collections.Generic.List{MapAround.CoordinateSystems.Projections.ProjectionParameter})">
            <summary>
            Initializes a new instance of the MapAround.CoordinateSystems.Transformations.GeocentricTransform.
            </summary>
            <param name="parameters">List of parameters to initialize the projection</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.GeocentricTransform.Inverse">
            <summary>
            Creates the inverse transform of this object.
            </summary>
            <remarks>
            This method may fail if the transform is not one to one.
            </remarks>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.GeocentricTransform.DegreesToMeters(System.Double[])">
            <summary>
            Converts coordinates in decimal degrees to projected meters.
            </summary>
            <param name="lonlat">The point in decimal degrees.</param>
            <returns>Point in projected meters</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.GeocentricTransform.MetersToDegrees(System.Double[])">
            <summary>
            Converts coordinates in projected meters to decimal degrees.
            </summary>
            <param name="pnt">Point in meters</param>
            <returns>Transformed point in decimal degrees</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.GeocentricTransform.Transform(System.Double[])">
            <summary>
            Transforms a coordinate point.
            </summary>
            <remarks>The passed parameter point should not be modified.</remarks>
            <param name="point">An array containing the point coordinates to transform</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.GeocentricTransform.TransformList(System.Collections.Generic.List{System.Double[]})">
            <summary>
            Transforms a list of coordinate point ordinal values.
            </summary>
            <param name="points">Packed ordinates of points to transform</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.GeocentricTransform.Invert">
            <summary>
            Inverts this transform.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.GeocentricTransform.WKT">
            <summary>
            Gets a well-known text representation of this object.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.GeocentricTransform.XML">
            <summary>
            Gets an XML representation of this object.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.Transformations.DatumTransform">
            <summary>
            Represents a datum transformations.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.DatumTransform.#ctor(MapAround.CoordinateSystems.Wgs84ConversionInfo)">
            <summary>
            Initializes a new instance of the MapAround.CoordinateSystems.Transformations.DatumTransform
            Instantiates DatumTransform.
            </summary>
            <param name="towgs84">An object representing transformation to WGS84</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.DatumTransform.Inverse">
            <summary>
            Creates the inverse transform of this object.
            </summary>
            <remarks>
            This method may fail if the transform is not one to one.
            </remarks>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.DatumTransform.Transform(System.Double[])">
            <summary>
            Transforms a coordinate point.
            </summary>
            <remarks>The passed parameter point should not be modified.</remarks>
            <param name="point">An array containing the point coordinates to transform</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.DatumTransform.TransformList(System.Collections.Generic.List{System.Double[]})">
            <summary>
            Transforms a list of coordinate point ordinal values.
            </summary>
            <param name="points">Packed ordinates of points to transform</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.DatumTransform.Invert">
            <summary>
            Inverts this transform.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.DatumTransform.WKT">
            <summary>
            Gets a well-known text representation of this object.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.DatumTransform.XML">
            <summary>
            Gets an XML representation of this object.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.Transformations.CoordinateTransformationFactory">
            <summary>
            Creates coordinate transformations.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.CoordinateTransformationFactory.CreateFromCoordinateSystems(MapAround.CoordinateSystems.ICoordinateSystem,MapAround.CoordinateSystems.ICoordinateSystem)">
            <summary>
            Creates a transformation between two coordinate systems.
            </summary>
            <remarks>
            This method will examine the coordinate systems in order to construct
            a transformation between them. This method may fail if no path between
            the coordinate systems is found, using the normal failing behavior of
            the DCP (e.g. throwing an exception).</remarks>
            <param name="sourceCS">Source coordinate system</param>
            <param name="targetCS">Target coordinate system</param>
            <returns>An object representing requested transformation</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.CoordinateTransformationFactory.CreateGeog2Geog(MapAround.CoordinateSystems.IGeographicCoordinateSystem,MapAround.CoordinateSystems.IGeographicCoordinateSystem)">
            <summary>
            Creates geographic to geographic transformation.
            </summary>
            <remarks>Adds a datum shift if nessesary</remarks>
            <param name="source">Source coordinate system</param>
            <param name="target">TargetCoordinate system</param>
            <returns>The requested transformation</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.CoordinateTransformationFactory.CreateGeoc2Geoc(MapAround.CoordinateSystems.IGeocentricCoordinateSystem,MapAround.CoordinateSystems.IGeocentricCoordinateSystem)">
            <summary>
            Creates geocentric to geocentric transformation.
            </summary>
            <remarks>Adds a datum shift if nessesary</remarks>
            <param name="source">Source coordinate system</param>
            <param name="target">TargetCoordinate system</param>
            <returns>The requested transformation</returns>
        </member>
        <member name="T:MapAround.CoordinateSystems.Transformations.CoordinateTransformationAuthorityFactory">
            <summary>
            Creates coordinate transformation objects from codes.
            </summary>
            <remarks>
            The codes are maintained by an external authority.
            A commonly used authority is EPSG, which is also used in the GeoTIFF
            standard.
            </remarks>
        </member>
        <member name="T:MapAround.CoordinateSystems.Transformations.CoordinateTransformation">
            <summary>
            Describes a coordinate transformation. This class only describes a
            coordinate transformation, it does not actually perform the transform
            operation on points. To transform points you must use a 
            <see cref="P:MapAround.CoordinateSystems.Transformations.CoordinateTransformation.MathTransform" />.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.CoordinateTransformation.#ctor(MapAround.CoordinateSystems.ICoordinateSystem,MapAround.CoordinateSystems.ICoordinateSystem,MapAround.CoordinateSystems.Transformations.TransformType,MapAround.CoordinateSystems.Transformations.IMathTransform,System.String,System.String,System.Int64,System.String,System.String)">
            <summary>
            Initializes a new instance of the MapAround.CoordinateSystems.Transformations.CoordinateTransformation
            </summary>
            <param name="sourceCS">Source coordinate system</param>
            <param name="targetCS">Target coordinate system</param>
            <param name="transformType">Transformation type</param>
            <param name="mathTransform">Math transform</param>
            <param name="name">Name of transform</param>
            <param name="authority">Authority</param>
            <param name="authorityCode">Authority code</param>
            <param name="areaOfUse">Area of use</param>
            <param name="remarks">Remarks</param>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.CoordinateTransformation.AreaOfUse">
            <summary>
            Human readable description of domain.
            </summary>
            <returns></returns>	
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.CoordinateTransformation.Authority">
            <summary>
            Authority which defined transformation and parameter values.
            </summary>
            <remarks>
            An Authority is an organization that maintains definitions of Authority Codes. 
            For example the European Petroleum Survey Group (EPSG) maintains a database of 
            coordinate systems, and other spatial referencing objects, where each object has 
            a code number ID. For example, the EPSG code for a WGS84 Lat/Lon coordinate system 
            is '4326'
            </remarks>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.CoordinateTransformation.AuthorityCode">
            <summary>
            Code used by authority to identify transformation. An empty string is used for no code.
            </summary>
            <remarks>The AuthorityCode is a compact string defined by an Authority to reference 
            a particular spatial reference object. For example, the European Survey Group (EPSG) 
            authority uses 32 bit integers to reference coordinate systems, so all their code 
            strings will consist of a few digits. The EPSG code for WGS84 Lat/Lon is '4326'.
            </remarks>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.CoordinateTransformation.MathTransform">
            <summary>
            Gets math transform.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.CoordinateTransformation.Name">
            <summary>
            Gets the name of transformation.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.CoordinateTransformation.Remarks">
            <summary>
            Gets the provider-supplied remarks.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.CoordinateTransformation.SourceCS">
            <summary>
            Gets the source coordinate system.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.CoordinateTransformation.TargetCS">
            <summary>
            Gets the target coordinate system.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.CoordinateTransformation.TransformType">
            <summary>
            Gets the semantic type of the transform.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.Transformations.ConcatenatedTransform">
             <summary>
             Represents a concatenation of transformations.
             </summary>
             <remarks>
             A concatenated transform acts in the same way as applying transforms,
             one after the other.
            
             The dimension of the output space of the each transform must match
             the dimension of the input space in the next transform.
             </remarks>
        </member>
        <member name="F:MapAround.CoordinateSystems.Transformations.ConcatenatedTransform.InverseTransform">
            <summary>
            The inverse transformation.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.ConcatenatedTransform.#ctor">
            <summary>
            Initializes a new instance of the MapAround.CoordinateSystems.Transformations.ConcatenatedTransform. 
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.ConcatenatedTransform.#ctor(System.Collections.Generic.List{MapAround.CoordinateSystems.Transformations.ICoordinateTransformation})">
            <summary>
            Initializes a new instance of the MapAround.CoordinateSystems.Transformations.ConcatenatedTransform. 
            </summary>
            <param name="transformlist"></param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.ConcatenatedTransform.Transform(System.Double[])">
            <summary>
            Transforms a coordinate point.
            </summary>
            <remarks>The passed parameter point should not be modified.</remarks>
            <param name="point">An array containing the point coordinates to transform</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.ConcatenatedTransform.TransformList(System.Collections.Generic.List{System.Double[]})">
            <summary>
            Transforms a list of coordinate point ordinal values.
            </summary>
            <param name="points">Packed ordinates of points to transform</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.ConcatenatedTransform.Inverse">
            <summary>
            Creates the inverse transform of this object.
            </summary>
            <remarks>
            This method may fail if the transform is not one to one.
            </remarks>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.ConcatenatedTransform.Invert">
            <summary>
            Inverts this transform.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.ConcatenatedTransform.CoordinateTransformationList">
            <summary>
            Gets or sets a list of coordinate transformations.
            This list define transformation sequence that will be
            applied by the current coordinate transformation.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.ConcatenatedTransform.WKT">
            <summary>
            Gets a well-known text representation of this object.
            </summary>
            <exception cref="T:System.NotImplementedException">Throws always</exception>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.ConcatenatedTransform.XML">
            <summary>
            Gets an XML representation of this object.
            </summary>
            <exception cref="T:System.NotImplementedException">Throws always</exception>
        </member>
        <member name="T:MapAround.CoordinateSystems.Transformations.FeatureTransformer">
            <summary>
            Applies transformations to features' coordinates.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.FeatureTransformer.TransformFeatureInPlace(MapAround.Mapping.Feature,MapAround.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Applies transformation to features' coordinates.
            </summary>
            <param name="feature">Feature which coordinates should be transformed</param>
            <param name="transform">The transformation to apply</param>
        </member>
        <member name="T:MapAround.CoordinateSystems.Transformations.GeometryTransformer">
            <summary>
            Applies transformation to geometries' coordinates.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.GeometryTransformer.TransformBoundingRectangle(MapAround.Geometry.BoundingRectangle,MapAround.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms coordinates of the bounding rectangle.
            </summary>
            <param name="box">Rectangle to transform</param>
            <param name="transform">The transformation to apply</param>
            <returns>The transformed rectangle</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.GeometryTransformer.TransformPoint(MapAround.Geometry.PointD,MapAround.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms coordinates of the point geometry.
            </summary>
            <param name="p">Point to transform</param>
            <param name="transform">The transformation to apply</param>
            <returns>The transformed point</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.GeometryTransformer.TransformSegment(MapAround.Geometry.Segment,MapAround.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms coordinates of the segment.
            </summary>
            <param name="s">Segment to transform</param>
            <param name="transform">The transformation to apply</param>
            <returns>The transformed segment</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.GeometryTransformer.TransformMultiPoint(MapAround.Geometry.MultiPoint,MapAround.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms coordinates of the multipoint.
            </summary>
            <param name="multiPoint">Multipoint to transform</param>
            <param name="transform">The transformation to apply</param>
            <returns>The transformed multipoint</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.GeometryTransformer.TransformContour(MapAround.Geometry.Contour,MapAround.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms coordinates of the contour.
            </summary>
            <param name="contour">Contour to transform</param>
            <param name="transform">The transformation to apply</param>
            <returns>The transformed contour</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.GeometryTransformer.TransformLinePath(MapAround.Geometry.LinePath,MapAround.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms coordinates of the line path.
            </summary>
            <param name="linePath">Line path to transform</param>
            <param name="transform">The transformation to apply</param>
            <returns>The transformed line path</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.GeometryTransformer.TransformPolyline(MapAround.Geometry.Polyline,MapAround.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms coordinates of the polyline.
            </summary>
            <param name="polyline">Polyline to transform</param>
            <param name="transform">The transformation to apply</param>
            <returns>The transformed polyline</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.GeometryTransformer.TransformPolygon(MapAround.Geometry.Polygon,MapAround.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms coordinates of the polygon.
            </summary>
            <param name="polygon">Polygon to transform</param>
            <param name="transform">The transformation to apply</param>
            <returns>The transformed polygon</returns>
        </member>
        <member name="T:MapAround.CoordinateSystems.Transformations.Wagner6">
            <summary>
            Implements a Wagner VI (Kavraysky VII) projection transform.
            Used to display the World Map.
            <remarks>
            Equations of projection are:
            x = Cx * Lambda * (Ca + (1 - Sqrt(1 - Cb * Phi ^ 2)))
            y = Cy * Phi
            The difference between the Kavraysky VII and the Wagner VI is the Cy value.
            It should be different by Sqrt (3) / 2 times, other things being equal.
            </remarks>
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.Wagner6.#ctor">
            <summary>
            Initializes a new instance of the MapAround.CoordinateSystems.Transformations.Wagner6.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.Wagner6.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the MapAround.CoordinateSystems.Transformations.Wagner6.
            </summary>
            <param name="Cx">Horizontal scaling</param>
            <param name="Cy">Vertical scaling</param>
            <param name="Ca"></param>
            <param name="Cb"></param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.Wagner6.Inverse">
            <summary>
            Creates the inverse transform of this object.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.Wagner6.Transform(System.Double[])">
            <summary>
            Transforms a coordinate point.
            </summary>
            <remarks>The passed parameter point should not be modified.</remarks>
            <param name="point">An array containing the point coordinates to transform</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.Wagner6.TransformList(System.Collections.Generic.List{System.Double[]})">
            <summary>
            Transforms a list of coordinate point ordinal values.
            </summary>
            <remarks>
            This method is provided for efficiently transforming many points.
            The supplied array of ordinal values will contain packed ordinal
            values.  For example, if the source dimension is 3, then the ordinals
            will be packed in this order (x0,y0,z0,x1,y1,z1 ...).  The size
            of the passed array must be an integer multiple of DimSource.
            The returned ordinal values are packed in a similar way.
            In some DCPs. the ordinals may be transformed in-place, and the
            returned array may be the same as the passed array.
            So any client code should not attempt to reuse the passed ordinal
            values (although they can certainly reuse the passed array).
            If there is any problem then the server implementation will throw an
            exception.  If this happens then the client should not make any
            assumptions about the state of the ordinal values.
            </remarks>
            <param name="points">Packed ordinates of points to transform</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.Wagner6.Invert">
            <summary>
            Inverts this transform.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.Wagner6.Cx">
            <summary>
            Gets or sets a horizontal scaling value.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.Wagner6.Cy">
            <summary>
            Gets or sets a vertical scaling value.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.Wagner6.Ca">
            <summary>
            
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.Wagner6.Cb">
            <summary>
            
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.Wagner6.WKT">
            <summary>
            Gets a well-known text representation of this object.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.Wagner6.XML">
            <summary>
            Gets an XML representation of this object.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.Transformations.Robinson">
            <summary>
            Implements a Robinson projection transform.
            Used to display the World Map.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.Robinson.#ctor">
            <summary>
            Initializes a new instance of the MapAround.CoordinateSystems.Transformations.Robinson.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.Robinson.Inverse">
            <summary>
            Creates the inverse transform of this object.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.Robinson.Transform(System.Double[])">
            <summary>
            Transforms a coordinate point.
            </summary>
            <remarks>The passed parameter point should not be modified.</remarks>
            <param name="point">An array containing the point coordinates to transform</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.Robinson.TransformList(System.Collections.Generic.List{System.Double[]})">
            <summary>
            Transforms a list of coordinate point ordinal values.
            </summary>
            <remarks>
            This method is provided for efficiently transforming many points.
            The supplied array of ordinal values will contain packed ordinal
            values.  For example, if the source dimension is 3, then the ordinals
            will be packed in this order (x0,y0,z0,x1,y1,z1 ...).  The size
            of the passed array must be an integer multiple of DimSource.
            The returned ordinal values are packed in a similar way.
            In some DCPs. the ordinals may be transformed in-place, and the
            returned array may be the same as the passed array.
            So any client code should not attempt to reuse the passed ordinal
            values (although they can certainly reuse the passed array).
            If there is any problem then the server implementation will throw an
            exception.  If this happens then the client should not make any
            assumptions about the state of the ordinal values.
            </remarks>
            <param name="points">Packed ordinates of points to transform</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.Robinson.Invert">
            <summary>
            Inverts this transform.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.Robinson.WKT">
            <summary>
            Gets a well-known text representation of this object.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.Robinson.XML">
            <summary>
            Gets an XML representation of this object.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.Transformations.Gnomonic">
            <summary>
            Implements a gnomonic projection.
            <remarks>
            Gnomonic projection is used to bring the topological problems 
            in the sphere to the problems on the plane. This reduction 
            is possible if the envelope of data is less than a hemisphere.
            </remarks>
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.Gnomonic.#ctor">
            <summary>
            Initializes a new instance of the MapAround.CoordinateSystems.Transformations.Gnomonic.
            Center (contact point) is the North Pole.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.Gnomonic.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the MapAround.CoordinateSystems.Transformations.Gnomonic.
            </summary>
            <param name="centerLongitude">Longitude of projection center in degrees</param>
            <param name="centerLatitude">Latitude of projection center in degrees</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.Gnomonic.Inverse">
            <summary>
            Creates the inverse transform of this object.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.Gnomonic.Transform(System.Double[])">
            <summary>
            Transforms a coordinate point.
            </summary>
            <remarks>The passed parameter point should not be modified.</remarks>
            <param name="point">An array containing the point coordinates to transform</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.Gnomonic.TransformList(System.Collections.Generic.List{System.Double[]})">
            <summary>
            Transforms a list of coordinate point ordinal values.
            </summary>
            <remarks>
            This method is provided for efficiently transforming many points.
            The supplied array of ordinal values will contain packed ordinal
            values.  For example, if the source dimension is 3, then the ordinals
            will be packed in this order (x0,y0,z0,x1,y1,z1 ...).  The size
            of the passed array must be an integer multiple of DimSource.
            The returned ordinal values are packed in a similar way.
            In some DCPs. the ordinals may be transformed in-place, and the
            returned array may be the same as the passed array.
            So any client code should not attempt to reuse the passed ordinal
            values (although they can certainly reuse the passed array).
            If there is any problem then the server implementation will throw an
            exception.  If this happens then the client should not make any
            assumptions about the state of the ordinal values.
            </remarks>
            <param name="points">Packed ordinates of points to transform</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.Gnomonic.Invert">
            <summary>
            Inverts this transform.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.Gnomonic.WKT">
            <summary>
            Gets a well-known text representation of this object.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.Gnomonic.XML">
            <summary>
            Gets an XML representation of this object.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.Transformations.Affine">
            <summary>
            Implements an affine transformations.
            An affine transformation between two vector spaces (strictly speaking, two affine spaces) 
            consists of a linear transformation followed by a translation: x => A * x + b. 
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.Affine.#ctor(MapAround.MathUtils.Matrix)">
            <summary>
            Initializes a new instance of the MapAround.CoordinateSystem.Transformations.Affine.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.Affine.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the MapAround.CoordinateSystem.Transformations.Affine.
            </summary>
            <param name="m11">Value in the first row first column</param>
            <param name="m12">Value in the first row of the second column</param>
            <param name="m21">Value in the second row first column</param>
            <param name="m22">Value in the second row second column</param>
            <param name="dx">Value in the third row first column</param>
            <param name="dy">Value in the third row second column</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.Affine.#ctor(MapAround.MathUtils.Matrix,System.Boolean)">
            <summary>
            Initializes a new instance of the MapAround.CoordinateSystem.Transformations.Affine.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.Affine.#ctor(MapAround.MathUtils.Matrix,MapAround.MathUtils.Matrix,System.Boolean)">
            <summary>
            Initializes a new instance of the MapAround.CoordinateSystem.Transformations.Affine.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.Affine.Inverse">
            <summary>
            Creates the inverse transform of this object.
            </summary>
            <remarks>
            This method may fail if the transformation matrix 
            is not invertible.
            </remarks>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.Affine.Invert">
            <summary>
            Inverts this transform.
            </summary>
            <remarks>
            This method may fail if the transformation matrix 
            is not invertible.
            </remarks>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.Affine.CombineWith(MapAround.CoordinateSystems.Transformations.Affine)">
            <summary>
            Combines this affine transfor with the other.
            <remarks>
            The result of the combined transformation is equivalent to the result 
            of successive application of transformations. Preferable to use this 
            form of combination, not ConcatenatedTransform, because 
            ConcatenatedTransform applies each transformation consistently, and 
            CombineWith method calculates the resulting transformation matrix.
            </remarks>
            </summary>
            <param name="other">An affine transform to combine</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.Affine.Rotation(System.Double)">
            <summary>
            Create a rotation transform.
            </summary>
            <param name="angle">An angle (in radians) of rotation</param>
            <returns>A rotation transform</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.Affine.RotationAt(MapAround.Geometry.ICoordinate,System.Double)">
            <summary>
            Create a transform of rotation at the specified point.
            </summary>
            <param name="coordinate">Center of rotation</param>
            <param name="angle">An angle (in radians) of rotation</param>
            <returns>A rotation transform</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.Affine.Scaling(System.Double)">
            <summary>
            Create a scaling transform.
            </summary>
            <param name="factor">Scale factor value</param>
            <returns>A scaling transform</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.Affine.Scaling(System.Double,System.Double)">
            <summary>
            Create a scaling transform.
            </summary>
            <param name="xFactor">X scale factor</param>
            <param name="yFactor">Y scale factor value</param>
            <returns>A scaling transform</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.Affine.Translation(System.Double,System.Double)">
            <summary>
            Create a translation transform.
            </summary>
            <param name="x">X translation</param>
            <param name="y">Y translation</param>
            <returns>A translation transform</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.Affine.Shearing(System.Double,System.Double)">
            <summary>
            Create a shearing transform.
            </summary>
            <param name="xShare">X sheare</param>
            <param name="yShare">Y sheare</param>
            <returns>A shearing transform</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.Affine.Transform(System.Double[])">
            <summary>
            Transforms a coordinate point.
            </summary>
            <remarks>The passed parameter point should not be modified.</remarks>
            <param name="point">An array containing the point coordinates to transform</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Transformations.Affine.TransformList(System.Collections.Generic.List{System.Double[]})">
            <summary>
            Transforms a list of coordinate point ordinal values.
            </summary>
            <remarks>
            This method is provided for efficiently transforming many points.
            The supplied array of ordinal values will contain packed ordinal
            values.  For example, if the source dimension is 3, then the ordinals
            will be packed in this order (x0,y0,z0,x1,y1,z1 ...).  The size
            of the passed array must be an integer multiple of DimSource.
            The returned ordinal values are packed in a similar way.
            In some DCPs. the ordinals may be transformed in-place, and the
            returned array may be the same as the passed array.
            So any client code should not attempt to reuse the passed ordinal
            values (although they can certainly reuse the passed array).
            If there is any problem then the server implementation will throw an
            exception.  If this happens then the client should not make any
            assumptions about the state of the ordinal values.
            </remarks>
            <param name="points">Packed ordinates of points to transform</param>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.Affine.Elements">
            <summary>
            Gets an array representing the elements of transformation matrix.
            </summary>
            <returns>Elements of the direct transformation matrix, even if this 
            transformation is inverted by Invert()</returns>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.Affine.WKT">
            <summary>
            Gets a well-known text representation of this object.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Transformations.Affine.XML">
            <summary>
            Gets an XML representation of this object.
            </summary>
        </member>
        <member name="T:MapAround.CoordinateSystems.Wgs84ConversionInfo">
            <summary>
            Represents a parameters for a geographic transformation into WGS84. The Bursa Wolf parameters 
            should be applied to geocentric coordinates, where the X axis points towards the Greenwich Prime 
            Meridian, the Y axis points East, and the Z axis points North.
            </summary>
            <remarks>
            <para>These parameters can be used to approximate a transformation from the horizontal datum to the
            WGS84 datum using a Bursa Wolf transformation. However, it must be remembered that this transformation
            is only an approximation. For a given horizontal datum, different Bursa Wolf transformations can be
            used to minimize the errors over different regions.</para>
            <para>If the DATUM clause contains a TOWGS84 clause, then this should be its “preferred” transformation,
            which will often be the transformation which gives a broad approximation over the whole area of interest
            (e.g. the area of interest in the containing geographic coordinate system).</para>
            <para>Sometimes, only the first three or six parameters are defined. In this case the remaining
            parameters must be zero. If only three parameters are defined, then they can still be plugged into the
            Bursa Wolf formulas, or you can take a short cut. The Bursa Wolf transformation works on geocentric
            coordinates, so you cannot apply it onto geographic coordinates directly. If there are only three
            parameters then you can use the Molodenski or abridged Molodenski formulas.</para>
            <para>If a datums ToWgs84Parameters parameter values are zero, then the receiving
            application can assume that the writing application believed that the datum is approximately equal to
            WGS84.</para>
            </remarks>
        </member>
        <member name="M:MapAround.CoordinateSystems.Wgs84ConversionInfo.#ctor">
            <summary>
            Initializes a new instance of the MapAround.CoordinateSystems.Wgs84ConversionInfo 
            with default parameters (all values = 0).
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Wgs84ConversionInfo.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the MapAround.CoordinateSystems.Wgs84ConversionInfo.
            </summary>
            <param name="dx">Bursa Wolf shift in meters.</param>
            <param name="dy">Bursa Wolf shift in meters.</param>
            <param name="dz">Bursa Wolf shift in meters.</param>
            <param name="ex">Bursa Wolf rotation in arc seconds.</param>
            <param name="ey">Bursa Wolf rotation in arc seconds.</param>
            <param name="ez">Bursa Wolf rotation in arc seconds.</param>
            <param name="ppm">Bursa Wolf scaling in parts per million.</param>
        </member>
        <member name="M:MapAround.CoordinateSystems.Wgs84ConversionInfo.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Initializes a new instance of the MapAround.CoordinateSystems.Wgs84ConversionInfo.
            </summary>
            <param name="dx">Bursa Wolf shift in meters.</param>
            <param name="dy">Bursa Wolf shift in meters.</param>
            <param name="dz">Bursa Wolf shift in meters.</param>
            <param name="ex">Bursa Wolf rotation in arc seconds.</param>
            <param name="ey">Bursa Wolf rotation in arc seconds.</param>
            <param name="ez">Bursa Wolf rotation in arc seconds.</param>
            <param name="ppm">Bursa Wolf scaling in parts per million.</param>
            <param name="areaOfUse">Area of use for this transformation</param>
        </member>
        <member name="F:MapAround.CoordinateSystems.Wgs84ConversionInfo.Dx">
            <summary>
            Bursa Wolf shift in meters.
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.Wgs84ConversionInfo.Dy">
            <summary>
            Bursa Wolf shift in meters.
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.Wgs84ConversionInfo.Dz">
            <summary>
            Bursa Wolf shift in meters.
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.Wgs84ConversionInfo.Ex">
            <summary>
            Bursa Wolf rotation in arc seconds.
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.Wgs84ConversionInfo.Ey">
            <summary>
            Bursa Wolf rotation in arc seconds.
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.Wgs84ConversionInfo.Ez">
            <summary>
            Bursa Wolf rotation in arc seconds.
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.Wgs84ConversionInfo.Ppm">
            <summary>
            Bursa Wolf scaling in parts per million.
            </summary>
        </member>
        <member name="F:MapAround.CoordinateSystems.Wgs84ConversionInfo.AreaOfUse">
            <summary>
            Human readable text describing intended region of transformation.
            </summary>
        </member>
        <member name="M:MapAround.CoordinateSystems.Wgs84ConversionInfo.GetAffineTransform">
            <summary>
            Affine Bursa-Wolf matrix transformation
            </summary>
            <remarks>
            <para>Transformation of coordinates from one geographic coordinate system into another 
            (also colloquially known as a "datum transformation") is usually carried out as an 
            implicit concatenation of three transformations:</para>
            <para>[geographical to geocentric >> geocentric to geocentric >> geocentric to geographic</para>
            <para>
            The middle part of the concatenated transformation, from geocentric to geocentric, is usually 
            described as a simplified 7-parameter Helmert transformation, expressed in matrix form with 7 
            parameters, in what is known as the "Bursa-Wolf" formula:<br/>
            <code>
             S = 1 + Ppm/1000000
             [ Xt ]    [     S   -Ez*S   +Ey*S   Dx ]  [ Xs ]
             [ Yt ]  = [ +Ez*S       S   -Ex*S   Dy ]  [ Ys ]
             [ Zt ]    [ -Ey*S   +Ex*S       S   Dz ]  [ Zs ]
             [ 1  ]    [     0       0       0    1 ]  [ 1  ]
            </code><br/>
            The parameters are commonly referred to defining the transformation "from source coordinate system 
            to target coordinate system", whereby (XS, YS, ZS) are the coordinates of the point in the source 
            geocentric coordinate system and (XT, YT, ZT) are the coordinates of the point in the target 
            geocentric coordinate system. But that does not define the parameters uniquely; neither is the
            definition of the parameters implied in the formula, as is often believed. However, the 
            following definition, which is consistent with the "Position Vector Transformation" convention, 
            is common E&amp;P survey practice: 
            </para>	
            <para>(dX, dY, dZ): Translation vector, to be added to the point's position vector in the source 
            coordinate system in order to transform from source system to target system; also: the coordinates 
            of the origin of source coordinate system in the target coordinate system </para>
            <para>(RX, RY, RZ): Rotations to be applied to the point's vector. The sign convention is such that 
            a positive rotation about an axis is defined as a clockwise rotation of the position vector when 
            viewed from the origin of the Cartesian coordinate system in the positive direction of that axis;
            e.g. a positive rotation about the Z-axis only from source system to target system will result in a
            larger longitude value for the point in the target system. Although rotation angles may be quoted in
            any angular unit of measure, the formula as given here requires the angles to be provided in radians.</para>
            <para>: The scale correction to be made to the position vector in the source coordinate system in order 
            to obtain the correct scale in the target coordinate system. M = (1 + dS*10-6), whereby dS is the scale
            correction expressed in parts per million.</para>
            <para><see href="http://www.posc.org/Epicentre.2_2/DataModel/ExamplesofUsage/eu_cs35.html"/> for an explanation of the Bursa-Wolf transformation</para>
            </remarks>
            <returns></returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Wgs84ConversionInfo.ToString">
            <summary>
            Returns the well-known text of this object.
            </summary>
            <remarks>The WKT format of this object is: <code>TOWGS84[dx, dy, dz, ex, ey, ez, ppm]</code></remarks>
            <returns>WKT representaion</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Wgs84ConversionInfo.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Wgs84ConversionInfo.GetHashCode">
            <summary>
            Returns a hash code for the specified object
            </summary>
            <returns>A hash code for the specified object</returns>
        </member>
        <member name="M:MapAround.CoordinateSystems.Wgs84ConversionInfo.Equals(MapAround.CoordinateSystems.Wgs84ConversionInfo)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal, false otherwise</returns>
        </member>
        <member name="P:MapAround.CoordinateSystems.Wgs84ConversionInfo.WKT">
            <summary>
            Gets the well-known text of this object.
            </summary>
            <remarks>The WKT format of this object is: <code>TOWGS84[dx, dy, dz, ex, ey, ez, ppm]</code></remarks>
        </member>
        <member name="P:MapAround.CoordinateSystems.Wgs84ConversionInfo.XML">
            <summary>
            Gets an XML representation of this object.
            </summary>
        </member>
        <member name="P:MapAround.CoordinateSystems.Wgs84ConversionInfo.HasZeroValuesOnly">
            <summary>
            Gets a value indicating whether all 7 parameter values are 0.0
            </summary>
            <returns>True if all 7 parameter values are 0.0, false otherwise</returns>
        </member>
        <member name="T:MapAround.DataProviders.ProviderRetriever">
            <summary>
            Делегат метода, который получает пространственного поставщика данных.
            </summary>
            <returns>Экземпляр провайдера данных</returns>
        </member>
        <member name="T:MapAround.DataProviders.RasterProviderRetriever">
            <summary>
            Делегат метода, который получает поставщик растра.
            </summary>
            <returns>Экземпляр провайдера Растра</returns>
        </member>
        <member name="T:MapAround.DataProviders.ISpatialDataProviderHolder">
            <summary>
            Представляет объект, который содержит регистрационную информацию о пространственном поставщике данных
            </summary>
        </member>
        <member name="M:MapAround.DataProviders.ISpatialDataProviderHolder.SetParameters(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Sets parameter values.
            </summary>
            <param name="parameters">Parameter values</param>
        </member>
        <member name="M:MapAround.DataProviders.ISpatialDataProviderHolder.GetParameterNames">
            <summary>
            Gets a list containing the names of parameters
            </summary>
            <returns>List containing the names of parameters</returns>
        </member>
        <member name="M:MapAround.DataProviders.ISpatialDataProviderHolder.GetProvider">
            <summary>
            Gets a spatial data provider instance.
            </summary>
        </member>
        <member name="M:MapAround.DataProviders.ISpatialDataProviderHolder.ReleaseProviderIfNeeded(MapAround.DataProviders.ISpatialDataProvider)">
            <summary>
            Performs a finalization procedure for the spatial data provider, if needed.
            </summary>
            <param name="provider">Spatial data provider instance</param>
        </member>
        <member name="P:MapAround.DataProviders.ISpatialDataProviderHolder.Name">
            <summary>
            Gets the name of the spatial data provider.
            </summary>
        </member>
        <member name="T:MapAround.DataProviders.SpatialDataProviderHolderBase">
            <summary>
            MapAround.DataProviders.SpatialDataProviderHolderBase является базовым классом 
            для определения классов поставщиков данных. 
            Экземпляры этих классов содержат регистрационную информацию поставщиков, 
            параметры инициализации и определяет организацию ресурсов 
            путем внедрения метода ReleaseProviderIfNeeded.
            </summary>
        </member>
        <member name="F:MapAround.DataProviders.SpatialDataProviderHolderBase.GetProviderMethod">
            <summary>
            Ссылки на метод, который возвращает экземпляр ISpatialDataProvider.
            </summary>
        </member>
        <member name="M:MapAround.DataProviders.SpatialDataProviderHolderBase.SetParameters(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Sets paramater values.
            </summary>
            <param name="parameters">Dictionary that contains parameter values</param>
        </member>
        <member name="M:MapAround.DataProviders.SpatialDataProviderHolderBase.GetParameterNames">
            <summary>
            Gets paramater names.
            </summary>
            <returns>String array that contains parameter names</returns>
        </member>
        <member name="M:MapAround.DataProviders.SpatialDataProviderHolderBase.GetProvider">
            <summary>
            Gets the spatial data provider.
            </summary>
        </member>
        <member name="M:MapAround.DataProviders.SpatialDataProviderHolderBase.ReleaseProviderIfNeeded(MapAround.DataProviders.ISpatialDataProvider)">
            <summary>
            Performs a finalization procedure for the spatial data provider, if needed.
            </summary>
            <param name="provider">Spatial data provider instance</param>
        </member>
        <member name="M:MapAround.DataProviders.SpatialDataProviderHolderBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of MapAround.DataProviders.SpatialDataProviderInfoBase.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="P:MapAround.DataProviders.SpatialDataProviderHolderBase.Parameters">
            <summary>
            Получает или задает словарь, который содержит значения параметров.
            </summary>
        </member>
        <member name="P:MapAround.DataProviders.SpatialDataProviderHolderBase.Name">
            <summary>
            Получает имя пространственного поставщика данных.
            </summary>
        </member>
        <member name="T:MapAround.DataProviders.SpatialDataProviderManager">
            <summary>
            Представляет реестр пространственных поставщиков данных.
            </summary>
        </member>
        <member name="M:MapAround.DataProviders.SpatialDataProviderManager.RegisterProvider(MapAround.DataProviders.ISpatialDataProviderHolder,System.Boolean)">
            <summary>
            Registers a spatial data provider.
            </summary>
            <param name="holder">A holder of spatial data provider</param>
            <param name="forceUpdate">A value indicating whether an existing registration info
            will be updated</param>
        </member>
        <member name="M:MapAround.DataProviders.SpatialDataProviderManager.UnRegisterProvider(System.String)">
            <summary>
            Removes registration info.
            </summary>
            <param name="providerName">A name of the spatial data provider</param>
        </member>
        <member name="M:MapAround.DataProviders.SpatialDataProviderManager.Registered(System.String)">
            <summary>
            Determines whether the data provider is registered.
            </summary>
            <param name="providerName">A name of the spatial data provider</param>
            <returns>true, if the data provider is registered, false otherwise</returns>
        </member>
        <member name="M:MapAround.DataProviders.SpatialDataProviderManager.GetProviderParameterNames(System.String)">
            <summary>
            Gets a list containing names of the initialization 
            parameters of the spatial data provider.
            </summary>
            <param name="providerName">A name of the spatial data provider</param>
            <returns></returns>
        </member>
        <member name="M:MapAround.DataProviders.SpatialDataProviderManager.GetProvider(System.String)">
            <summary>
            Creates and initializes a new instance of the spatial data provider.
            </summary>
            <param name="providerName">A name of the spatial data provider</param>
            <returns>A new instance of the spatial data provider</returns>
        </member>
        <member name="M:MapAround.DataProviders.SpatialDataProviderManager.ReleaseProviderIfNeeded(System.String,MapAround.DataProviders.ISpatialDataProvider)">
            <summary>
            Performs an actions need to be done for finalization of the data provider.
            <para>
            Holders can provide various scenarious of disposing resources 
            for spatial data providers of the same class.
            </para>
            </summary>
            <param name="providerName">A name of the spatial data provider</param>
            <param name="provider">A provider instance for finalization</param>
        </member>
        <member name="M:MapAround.DataProviders.SpatialDataProviderManager.GetProvider(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates and initializes a new instance of the spatial data provider.
            </summary>
            <param name="providerName">A name of the spatial data provide</param>
            <param name="parameters">A dictionary instance containing initialization parameter values</param>
            <returns>A new instance of the spatial data provider</returns>
        </member>
        <member name="P:MapAround.DataProviders.SpatialDataProviderManager.RegisteredProviders">
            <summary>
            Gets a collection of registered data providers.
            </summary>
        </member>
        <member name="T:MapAround.DataProviders.RasterProviderManager">
            <summary>
            Представляет реестр растровых провайдеров.
            </summary>
        </member>
        <member name="M:MapAround.DataProviders.RasterProviderManager.RegisterProvider(MapAround.DataProviders.IRasterProviderHolder,System.Boolean)">
            <summary>
            Registers a raster provider.
            </summary>
            <param name="holder">A holder of raster provider</param>
            <param name="forceUpdate">A value indicating whether an existing registration info
            will be updated</param>
        </member>
        <member name="M:MapAround.DataProviders.RasterProviderManager.UnRegisterProvider(System.String)">
            <summary>
            Removes registration info.
            </summary>
            <param name="providerName">A name of the raster provider</param>
        </member>
        <member name="M:MapAround.DataProviders.RasterProviderManager.Registered(System.String)">
            <summary>
            Determines whether the raster provider is registered.
            </summary>
            <param name="providerName">A name of the raster provider</param>
            <returns>true, if the raster provider is registered, false otherwise</returns>
        </member>
        <member name="M:MapAround.DataProviders.RasterProviderManager.GetProviderParameterNames(System.String)">
            <summary>
            Gets a list containing names of the initialization 
            parameters of the raster provider.
            </summary>
            <param name="providerName">A name of the raster provider</param>
            <returns></returns>
        </member>
        <member name="M:MapAround.DataProviders.RasterProviderManager.GetProvider(System.String)">
            <summary>
            Creates and initializes a new instance of the raster provider.
            </summary>
            <param name="providerName">A name of the spatial data provider</param>
            <returns>A new instance of the raster provider</returns>
        </member>
        <member name="M:MapAround.DataProviders.RasterProviderManager.ReleaseProviderIfNeeded(System.String,MapAround.DataProviders.IRasterProvider)">
            <summary>
            Performs an actions need to be done for finalization of the raster provider.
            <para>
            Holders can provide various scenarious of disposing resources 
            for raster providers of the same class.
            </para>
            </summary>
            <param name="providerName">A name of the raster provider</param>
            <param name="provider">A provider instance for finalization</param>
        </member>
        <member name="M:MapAround.DataProviders.RasterProviderManager.GetProvider(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates and initializes a new instance of the raster provider.
            </summary>
            <param name="providerName">A name of the raster provide</param>
            <param name="parameters">A dictionary instance containing initialization parameter values</param>
            <returns>A new instance of the raster provider</returns>
        </member>
        <member name="P:MapAround.DataProviders.RasterProviderManager.RegisteredProviders">
            <summary>
            Gets a collection of registered data providers.
            </summary>
        </member>
        <member name="T:MapAround.DataProviders.ShapeFileSpatialDataProvider">
            <summary>
            Экземпляры MapAround.DataProviders.ShapeFileSpatialDataProvider 
            обеспечивает доступ к данным, хранящимся в ESRI формате шейп-файла.
            </summary>
        </member>
        <member name="T:MapAround.DataProviders.SpatialDataProviderBase">
            <summary>
            Maparound.DataProviders.SpatialDataProviderBase является базовым классом для поставщиков пространственных данных.
            </summary>
        </member>
        <member name="T:MapAround.DataProviders.ISpatialDataProvider">
            <summary>
            Представляет объект, который предоставляет доступ к векторным пространственным данным.
            </summary>
        </member>
        <member name="M:MapAround.DataProviders.ISpatialDataProvider.QueryFeatures(MapAround.Mapping.IFeatureReceiver)">
            <summary>
            Добавляет функции, извлеченные из источника данных к приемнику.
            </summary>
            <param name="fr">Объект, который получает геометрические объекты</param> 
            <rereturns>Число найденных геометрических объектов</rereturns>
        </member>
        <member name="M:MapAround.DataProviders.ISpatialDataProvider.QueryFeatures(MapAround.Mapping.IFeatureReceiver,MapAround.Geometry.BoundingRectangle)">
            <summary>
            Добавляет геометрические фигуры, извлеченные из источника данных к приемнику.
            <para>
            Примечания к разработчикам: вам не нужно выполнять точный критерий пересечения, достаточно проверить пересечение прямоугольников.
            </para>
            </summary>
            <param name="fr">Объект, который получает геометрические объекты</param> 
            <param name="bounds">Прямоугольная область вы хотите заполнить с объектами</param>
            <rereturns>Число найденных геометрических объектов</rereturns>
        </member>
        <member name="M:MapAround.DataProviders.SpatialDataProviderBase.readInt(System.IO.Stream)">
            <summary>
            Чтение двойного слова (4 байта)
            </summary>
            <param name="stream">Последовательность байтов</param>
            <returns>Целое число (4 байта)</returns>
        </member>
        <member name="M:MapAround.DataProviders.SpatialDataProviderBase.writeInt(System.IO.Stream,System.Int32)">
            <summary>
            Запись двойного слова (4 байта)
            </summary>
            <param name="stream">Последовательность байтов</param>
            <param name="value">Целое число (4 байта)</param>
        </member>
        <member name="M:MapAround.DataProviders.SpatialDataProviderBase.FeatureFromSpatialDataBytes(System.Byte[])">
            <summary>
            Получает геометрический объект из его двоичного представления.
            </summary>
            <param name="bytes">Массив байтов, который содержит бинарное представление геометрии объектов</param>
        </member>
        <member name="M:MapAround.DataProviders.SpatialDataProviderBase.SpatialDataBytesFromFeature(MapAround.Mapping.Feature)">
            <summary>
            Получает двоичное представление из геометрии объектов.
            </summary>
            <param name="feature">Feature</param>
        </member>
        <member name="M:MapAround.DataProviders.SpatialDataProviderBase.QueryFeatures(MapAround.Mapping.IFeatureReceiver)">
            <summary>
            Добавляет геометрические фигуры, извлеченные из источника данных к приемнику.
            </summary>
            <param name="receiver">Объект, который получает геометрические объекты</param> 
        </member>
        <member name="M:MapAround.DataProviders.SpatialDataProviderBase.QueryFeatures(MapAround.Mapping.IFeatureReceiver,MapAround.Geometry.BoundingRectangle)">
            <summary>
            Добавляет геометрические фигуры, извлеченные из источника данных к приемнику.
            </summary>
            <param name="receiver">Объект, который получает геометрические объекты</param> 
            <param name="bounds">Прямоугольная область вы хотите заполнить с объектами</param>
        </member>
        <member name="M:MapAround.DataProviders.SpatialDataProviderBase.FillFromCache(MapAround.Caching.IFeatureCollectionCacheAccessor,MapAround.Mapping.IFeatureReceiver,MapAround.Geometry.BoundingRectangle,System.Boolean)">
            <summary>
            Добавляет функции, извлеченные из кэша в приемнике.
            </summary>
            <param name="processAttributes">Значение, указывающее, будут ли атрибуты обработаны или нет</param>
            <param name="cacheAccessor">Экземпляр средства доступа к кэшу</param>
            <param name="fr">Объект, который получает извлеченные геометрические объекты</param>
            <param name="bounds">Прямоугольник, который определяет область запроса</param>
            <returns>Количество найденных геометрических объектов</returns>
        </member>
        <member name="M:MapAround.DataProviders.ShapeFileSpatialDataProvider.QueryFeatures(MapAround.Mapping.IFeatureReceiver,MapAround.Geometry.BoundingRectangle)">
            <summary>
            Adds features retrieved from the data source to the receiver.
            </summary>
            <param name="receiver">An object that receives features</param> 
            <param name="bounds">Rectangular region you want to fill with the objects</param>
            <rereturns>A number of retrieved features</rereturns>
        </member>
        <member name="M:MapAround.DataProviders.ShapeFileSpatialDataProvider.QueryFeatures(MapAround.Mapping.IFeatureReceiver)">
            <summary>
            Adds features retrieved from the data source to the receiver.
            </summary>
            <param name="receiver">An object that receives features</param> 
            <rereturns>A number of retrieved features</rereturns>
        </member>
        <member name="P:MapAround.DataProviders.ShapeFileSpatialDataProvider.CacheAccessor">
            <summary>
            Cache accessor object.
            <para>
            If a cache accessor object was assigned, the first data request 
            reads the entire file and puts the data into the cache. 
            Subsequent inquiries lead to attempts to find the right data 
            in the cache and only if there are none reads a file again.
            </para>
            <remarks>
            Layers use an alias property value as an access key. 
            Make sure that the value of this property is not null 
            and not an empty string.
            </remarks>
            </summary>
        </member>
        <member name="P:MapAround.DataProviders.ShapeFileSpatialDataProvider.AttributesEncoding">
            <summary>
            Gets or sets an encoding of attributes.
            </summary>
        </member>
        <member name="P:MapAround.DataProviders.ShapeFileSpatialDataProvider.ProcessAttributes">
            <summary>
            Gets or sets a value indicating whether the attributes will be processed.
            </summary>
        </member>
        <member name="P:MapAround.DataProviders.ShapeFileSpatialDataProvider.FileName">
            <summary>
            Gets or sets a name of the shape-file.
            </summary>
        </member>
        <member name="E:MapAround.DataProviders.ShapeFileSpatialDataProvider.FeatureFetched">
            <summary>
            Raises when a new feature is fetched.
            </summary>
        </member>
        <member name="T:MapAround.DataProviders.ShapeFileSpatialDataProviderHolder">
            <summary>
            Shape-файл владелец поставщика данных.
            </summary>
        </member>
        <member name="M:MapAround.DataProviders.ShapeFileSpatialDataProviderHolder.SetParameters(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Sets the parameter values.
            </summary>
            <param name="parameters">Parameter values</param>
        </member>
        <member name="M:MapAround.DataProviders.ShapeFileSpatialDataProviderHolder.GetParameterNames">
            <summary>
            Gets a list containing the names of parameters.
            </summary>
            <returns>List containing the names of parameters</returns>
        </member>
        <member name="M:MapAround.DataProviders.ShapeFileSpatialDataProviderHolder.ReleaseProviderIfNeeded(MapAround.DataProviders.ISpatialDataProvider)">
            <summary>
            Performs a finalization procedure for the spatial data provider.
            This implementation do nothing.
            </summary>
            <param name="provider">Spatial data provider instance</param>
        </member>
        <member name="M:MapAround.DataProviders.ShapeFileSpatialDataProviderHolder.#ctor">
            <summary>
            Initializes a new instance of the MapAround.DataProviders.ShapeFileSpatialDataProviderHolder.
            </summary>
        </member>
        <member name="T:MapAround.DataProviders.FeatureOperationEventArgs">
            <summary>
            Экземпляры этого класса содержит данные, передаваемые в случае работы геометрических объектов.
            </summary>
        </member>
        <member name="M:MapAround.DataProviders.FeatureOperationEventArgs.#ctor(MapAround.Mapping.Feature)">
            <summary>
            Инициализирует новый экземпляр Maparound.DataProviders.FeatureOperationEventArgs.
            </summary>
            <param name="feature">Геометрический объект, по которому выполняется операция</param>
        </member>
        <member name="P:MapAround.DataProviders.FeatureOperationEventArgs.IsAccepted">
            <summary>
            Получает или задает значение, указывающее, была ли операция принята или нет.
            </summary>
        </member>
        <member name="P:MapAround.DataProviders.FeatureOperationEventArgs.Feature">
            <summary>
            Геометрический объект, по которому выполняется операция.
            </summary>
        </member>
        <member name="T:MapAround.DataProviders.IdNeededEventArgs">
            <summary>
            Экземпляры Maparound.DataProviders.IdNeededEventArgs содержит данные о событии IdNeeded.
            </summary>
        </member>
        <member name="M:MapAround.DataProviders.IdNeededEventArgs.#ctor(MapAround.Mapping.Feature)">
            <summary>
            Инициализирует экземпляр Maparound.DataProviders.IdNeededEventArgs.
            </summary>
            <param name="feature">Геометрический объект, для которого обработчик события будет вызван</param>
        </member>
        <member name="P:MapAround.DataProviders.IdNeededEventArgs.Feature">
            <summary>
            Геометрический объект, для которого требуется новый ID.
            </summary>
        </member>
        <member name="P:MapAround.DataProviders.IdNeededEventArgs.Id">
            <summary>
            Получает или задает значение Id.
            </summary>
        </member>
        <member name="T:MapAround.DataProviders.SqlSpatialDataProvider">
            <summary>
            Maparound.DataProviders.SqlSpatialDataProvider является базовым классом
            для поставщиков пространственных данных с серверов SQL, которые 
            не умеют работать пространственных типов данных и функций.
            </summary>
        </member>
        <member name="M:MapAround.DataProviders.SqlSpatialDataProvider.GetCommand">
            <summary>
            Gets a DbCommand corresponding to the sql server
            with assighed connection.
            </summary>
        </member>
        <member name="M:MapAround.DataProviders.SqlSpatialDataProvider.InternalQueryFeatures(MapAround.Mapping.IFeatureReceiver,System.String)">
            <summary>
            Adds features from the command to the receiver.
            </summary>
            <param name="fr">Object that receives features</param>
            <param name="commandText">Sql command text</param>
        </member>
        <member name="M:MapAround.DataProviders.SqlSpatialDataProvider.FillDataTable(System.Collections.Generic.IEnumerable{MapAround.Mapping.Feature})">
            <summary>
            Fills a data table with features.
            </summary>
            <param name="features">Enumarator of features</param>
        </member>
        <member name="M:MapAround.DataProviders.SqlSpatialDataProvider.QueryFeatures(MapAround.Mapping.IFeatureReceiver,MapAround.Geometry.BoundingRectangle)">
            <summary>
            Adds features retrieved from the data source to the receiver.
            </summary>
            <param name="receiver">An object that receives features</param> 
            <param name="bounds">Rectangular region you want to fill with the objects</param>
            <rereturns>A number of retrieved features</rereturns>
        </member>
        <member name="M:MapAround.DataProviders.SqlSpatialDataProvider.QueryFeatures(MapAround.Mapping.IFeatureReceiver)">
            <summary>
            Adds features retrieved from the data source to the receiver.
            </summary>
            <param name="receiver">An object that receives features</param> 
            <rereturns>A number of retrieved features</rereturns>
        </member>
        <member name="E:MapAround.DataProviders.SqlSpatialDataProvider.IdValueNeeded">
            <summary>
            Raises when a new identity value is needed.
            </summary>
        </member>
        <member name="P:MapAround.DataProviders.SqlSpatialDataProvider.DataTableName">
            <summary>
            Gets or sets the database table name.
            </summary>
        </member>
        <member name="P:MapAround.DataProviders.SqlSpatialDataProvider.UniqKeyField">
            <summary>
            Gets or sets an identity field name.
            </summary>
        </member>
        <member name="P:MapAround.DataProviders.SqlSpatialDataProvider.FeatureTypeField">
            <summary>
            Gets or sets a name of field that stores a feature type.
            </summary>
        </member>
        <member name="P:MapAround.DataProviders.SqlSpatialDataProvider.TitleField">
            <summary>
            Gets or sets a name of field that stores a feature title.
            </summary>
        </member>
        <member name="P:MapAround.DataProviders.SqlSpatialDataProvider.SpatialDataField">
            <summary>
            Gets or sets a name of field that stores a binary spatial data.
            </summary>
        </member>
        <member name="P:MapAround.DataProviders.SqlSpatialDataProvider.MinXField">
            <summary>
            Gets or sets a name of field that stores a minimum X 
            coordinate of the feature geometry.
            </summary>
        </member>
        <member name="P:MapAround.DataProviders.SqlSpatialDataProvider.MinYField">
            <summary>
            Gets or sets a name of field that stores a minimum Y 
            coordinate of the feature geometry.
            </summary>
        </member>
        <member name="P:MapAround.DataProviders.SqlSpatialDataProvider.MaxXField">
            <summary>
            Gets or sets a name of field that stores a maximum X 
            coordinate of the feature geometry.
            </summary>
        </member>
        <member name="P:MapAround.DataProviders.SqlSpatialDataProvider.MaxYField">
            <summary>
            Gets or sets a name of field that stores a maximum Y 
            coordinate of the feature geometry.
            </summary>
        </member>
        <member name="E:MapAround.DataProviders.SqlSpatialDataProvider.FeatureFetched">
            <summary>
            Raises when a new feature is fetched.
            </summary>
        </member>
        <member name="T:MapAround.Geography.GeometrySpreader">
            <summary>
            An object that performs
            the conversion between objects
            and elliptical plane geometry by gnomonic projection.
            </summary>
        </member>
        <member name="M:MapAround.Geography.GeometrySpreader.GetGeometries(MapAround.Geography.GeographyCollection,MapAround.Geography.GnomonicProjection)">
            <summary>
            Converts a collection of geometric shapes on the surface of the ellipsoid 
            to the collection of geometric figures in the plane according to the given gnomonic projection.
            </summary>
            <param name="collection">Collection of geometric shapes on the surface of the ellipsoid</param>
            <param name="projection">Projection</param>
            <returns>Collection of geometric figures in the plane</returns>
        </member>
        <member name="M:MapAround.Geography.GeometrySpreader.GetGeographies(System.Collections.Generic.IEnumerable{MapAround.Geometry.IGeometry},MapAround.Geography.GnomonicProjection)">
            <summary>
            Converts a collection of geometric shapes on the surface of the ellipsoid 
            to the collection of geometric figures in the plane in line with the given projection.
            </summary>
            <param name="geometries">Enumerator geometric shapes on the surface of the ellipsoid</param>
            <param name="projection">Projection</param>
            <returns>Collection of geometric figures in the plane</returns>
        </member>
        <member name="M:MapAround.Geography.GeometrySpreader.GetProjection(MapAround.Geography.GeographyCollection)">
            <summary>
            Calculates gnomonic projection for geometric shapes on the surface of the ellipsoid.
            </summary>
            <param name="collection">Collection of geometric shapes on the surface of the ellipsoid</param>
            <returns>Gnomonic projection</returns>
        </member>
        <member name="T:MapAround.Geography.UnitSphere">
            <summary>
            The unit sphere.
            </summary>
        </member>
        <member name="M:MapAround.Geography.UnitSphere.GetArcPoints(MapAround.Geography.GeoPoint,MapAround.Geography.GeoPoint,System.Double)">
            <summary>
            Calculates the points on the great circle bounded by two points.
            </summary>
            <param name="startPoint">Starting point of the arc</param>
            <param name="endPoint">The end point of the arc</param>
            <param name="maxAngle">Maximum permissible angle between the points</param>
            <returns></returns>
        </member>
        <member name="T:MapAround.Geography.GnomonicProjection">
            <summary>
            Gnomonic projection. 
            This class, unlike MapAround.CoordinateSystems.Transformations.Gnomonic, 
            is designed for internal use.
            </summary>
        </member>
        <member name="M:MapAround.Geography.GnomonicProjection.Project(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Calculates the coordinates of the point in the projection plane.
            </summary>
            <param name="latitude">Latitude of the</param>
            <param name="longitude">Longitude points</param>
            <param name="x">X coordinate in the plane of projection</param>
            <param name="y">Y-coordinate in the plane of projection</param>
        </member>
        <member name="M:MapAround.Geography.GnomonicProjection.Unproject(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Calculates the latitude and longitude points.
            </summary>
            <param name="x">X coordinate in the plane of projection</param>
            <param name="y">Y-coordinate in the plane of projection</param>
            <param name="lat">Latitude of the</param>
            <param name="lon">Longitude points</param>
        </member>
        <member name="M:MapAround.Geography.GnomonicProjection.GetCenter(System.Double[],System.Double@,System.Double@)">
            <summary>
            Calculates the longitude and latitude of the center 
            of projection to the passed values ​​of latitudes and longitudes.
            </summary>
            <param name="latLonSequence">Array of real numbers that contains the latitude and longitude 
            (to be completed in the form of a sequence of pairs: "latitude", "longitude")</param>
            <param name="centerLat">The output value of latitude</param>
            <param name="centerLon">The output value of the longitude</param>
        </member>
        <member name="M:MapAround.Geography.GnomonicProjection.GetCenter(System.Collections.Generic.IEnumerable{MapAround.Geography.GeoPoint},System.Double@,System.Double@)">
            <summary>
            Calculates the longitude and latitude of the projection center for an array of points on the ellipsoid.
            </summary>
            <param name="points">An array of points on the ellipsoid</param>
            <param name="centerLat">The output value of latitude</param>
            <param name="centerLon">The output value of the longitude</param>
        </member>
        <member name="M:MapAround.Geography.GnomonicProjection.#ctor(System.Double,System.Double)">
            <summary>
            Instantiates GnommonicProjection.
            </summary>
            <param name="centerLongitude">Longitude of projection center</param>
            <param name="centerLatitude">Latitude of projection center</param>
        </member>
        <member name="T:MapAround.Geography.Vector3">
            <summary>
            Vector in three-dimensional Euclidean space.
            </summary>
        </member>
        <member name="M:MapAround.Geography.Vector3.op_Addition(MapAround.Geography.Vector3,MapAround.Geography.Vector3)">
            <summary>
            Calculates the sum of vectors.
            </summary>
            <param name="a">The first argument of the addition operation</param>
            <param name="b">The second argument of the addition operation</param>
            <returns>Vector sum</returns>
        </member>
        <member name="M:MapAround.Geography.Vector3.op_Subtraction(MapAround.Geography.Vector3,MapAround.Geography.Vector3)">
            <summary>
            Computes the difference vectors.
            </summary>
            <param name="a">The first argument of the subtraction operation</param>
            <param name="b">The second argument of the subtraction operation</param>
            <returns>Vector difference</returns>
        </member>
        <member name="M:MapAround.Geography.Vector3.op_Multiply(MapAround.Geography.Vector3,System.Double)">
            <summary>
            Computes the product of the vector and scalar.
            </summary>
            <param name="vector">Vector</param>
            <param name="a">Scalar</param>
            <returns>Product of the vector and scalar</returns>
        </member>
        <member name="M:MapAround.Geography.Vector3.op_Division(MapAround.Geography.Vector3,System.Double)">
            <summary>
            Computes the product of a vector and a scalar return value.
            </summary>
            <param name="v">Vector</param>
            <param name="a">Scalar</param>
            <returns>Product of a vector and a scalar return value</returns>
        </member>
        <member name="M:MapAround.Geography.Vector3.Unitize">
            <summary>
            Returns a unit vector with the direction of the vector.
            </summary>
            <returns>Unit vector with the direction of the vector</returns>
        </member>
        <member name="M:MapAround.Geography.Vector3.op_Multiply(MapAround.Geography.Vector3,MapAround.Geography.Vector3)">
            <summary>
            The scalar product of vectors.
            </summary>
            <param name="a">The first argument of the inner product</param>
            <param name="b">The second argument of the inner product</param>
            <returns>Scalar product</returns>
        </member>
        <member name="M:MapAround.Geography.Vector3.LengthSquared">
            <summary>
            Calculates the square of the length.
            </summary>
            <returns>Square of the length</returns>
        </member>
        <member name="M:MapAround.Geography.Vector3.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
            <returns>Length of the vector</returns>
        </member>
        <member name="M:MapAround.Geography.Vector3.DistanceSquared(MapAround.Geography.Vector3)">
            <summary>
            Square of the distance between this vector and passed as an argument.
            </summary>
            <param name="a">Vector</param>
            <returns>Square of the distance</returns>
        </member>
        <member name="M:MapAround.Geography.Vector3.Distance(MapAround.Geography.Vector3)">
            <summary>
            The distance between this vector and passed as an argument.
            </summary>
            <param name="a">Vector</param>
            <returns>Distance</returns>
        </member>
        <member name="M:MapAround.Geography.Vector3.CrossProduct(MapAround.Geography.Vector3)">
            <summary>
            Calculates the cross product of this vector and the vector is passed as an argument.
            </summary>
            <param name="a">Vector</param>
            <returns>Vector product</returns>
        </member>
        <member name="M:MapAround.Geography.Vector3.Angle(MapAround.Geography.Vector3)">
            <summary>
            Angle in radians between this vector and vector passed as an argument.
            </summary>
            <param name="a">Vector</param>
            <returns>Angle</returns>
        </member>
        <member name="M:MapAround.Geography.Vector3.AngleInDegrees(MapAround.Geography.Vector3)">
            <summary>
            Angle in degrees between the vector and passed as an argument.
            </summary>
            <param name="a">Vector</param>
            <returns>Angle</returns>
        </member>
        <member name="M:MapAround.Geography.Vector3.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of Vector3.
            </summary>
            <param name="x">The value of x</param>
            <param name="y">The value of y</param>
            <param name="z">The value of z</param>
        </member>
        <member name="T:MapAround.Geography.EllipticAlgorithms">
            <summary>
            Implements basic algorithms on the spheroid's surface.
            </summary>
        </member>
        <member name="F:MapAround.Geography.EllipticAlgorithms.DefaultEllipsoid">
            <summary>
            A default instance of the MapAround.CoordinateSystems.Ellipsoid 
            which is used by elliptic algorithms. Always equals to WGS84.
            </summary>
        </member>
        <member name="M:MapAround.Geography.EllipticAlgorithms.AngularDistance(MapAround.Geography.GeoPoint,MapAround.Geography.GeoPoint)">
            <summary>
            Computes an angular distance between two points on the unit sphere.
            </summary>
            <returns>An angular distance in radians</returns>
        </member>
        <member name="M:MapAround.Geography.EllipticAlgorithms.GetPointsCentroid(System.Collections.Generic.IEnumerable{MapAround.Geography.GeoPoint})">
            <summary>
            Calculates the center of mass of points.
            Calculated as the point on the surface of the ellipsoid, which "points to" 
            a vector, which is the sum of the vectors coming from the center of the 
            ellipsoid to each of the points.
            </summary>
            <remarks>
            Masses of points are set equal.
            </remarks>
        </member>
        <member name="M:MapAround.Geography.EllipticAlgorithms.GetConvexHull(System.Collections.Generic.IEnumerable{MapAround.Geography.GeoPoint})">
            <summary>
            Computes a convex hull of the specified points.
            </summary>
            <param name="points">Enumerator of coordinates for which convex hull should be computed</param>
            <returns>A list containing a sequence of the convex hull points</returns>
        </member>
        <member name="P:MapAround.Geography.EllipticAlgorithms.Ellipsoid">
            <summary>
            Gets or sets an ellipsoid which is used by elliptic algorithms.
            </summary>
        </member>
        <member name="T:MapAround.Geography.NamespaceDoc">
            <summary>
            The MapAround.Geography namespace contains interfaces and classes
            that represent geometric objects on the Earth's surface.
            <para>
            Most of the implemented geometric algorithms is limited by total coverage 
            of the input data. It should not exceed the hemisphere. Points that are 
            spaced away from the center of mass of all starting points are processed 
            less precisely.
            </para>
            <para>
            For real objects on the Earth's surface (up to the continents), this 
            restriction is not essential and the lost of accuracy is acceptable.
            </para>
            </summary>
        </member>
        <member name="T:MapAround.Geography.IGeography">
            <summary>
            Provides access to members of the geometry on the Earth's surface.
            </summary>
        </member>
        <member name="M:MapAround.Geography.IGeography.ExtractPoints">
            <summary>
            Extracts all points defining this object.
            </summary>
            <returns>An array containing the points defining this object</returns>
        </member>
        <member name="M:MapAround.Geography.IGeography.GetConvexHull">
            <summary>
            Computes a conver hull of this object.
            </summary>
            <returns>A list containing convex hull points</returns>
        </member>
        <member name="M:MapAround.Geography.IGeography.GetEnvelope">
            <summary>
            Computes the envelope of this object.
            </summary>
            <returns>The envelope of this object</returns>
        </member>
        <member name="M:MapAround.Geography.IGeography.ToPlanarGeometry(System.Boolean)">
            <summary>
            Gets a planar geometry that is a result of simple 
            Plate-Caree projection of this object.
            </summary>
            <param name="convertToDegrees">A value indicating whether an anglular coordinates should be converted to degrees</param>
            <returns>A plane geometry</returns>
        </member>
        <member name="M:MapAround.Geography.IGeography.Canonicalize">
            <summary>
            Canonicalizes all coordinates of this object.
            </summary>
        </member>
        <member name="P:MapAround.Geography.IGeography.PointCount">
            <summary>
            Gets a number of points defining this object.
            </summary>
        </member>
        <member name="P:MapAround.Geography.IGeography.Dimension">
            <summary>
            Gets the dimension of this object.
            </summary>
        </member>
        <member name="T:MapAround.Geography.Geography">
            <summary>
            Represents the geometry on the Earth's surface.
            </summary>
        </member>
        <member name="M:MapAround.Geography.Geography.ExtractPoints">
            <summary>
            Extracts all points defining this object.
            </summary>
            <returns>An array containing the points defining this object</returns>
        </member>
        <member name="M:MapAround.Geography.Geography.GetConvexHull">
            <summary>
            Computes a conver hull of this object.
            </summary>
            <returns>A list containing convex hull points</returns>
        </member>
        <member name="M:MapAround.Geography.Geography.GetEnvelope">
            <summary>
            Computes the envelope of this object.
            </summary>
            <returns>The envelope of this object</returns>
        </member>
        <member name="M:MapAround.Geography.Geography.ToPlanarGeometry(System.Boolean)">
            <summary>
            Gets a planar geometry that is a result of simple 
            Plate-Caree projection of this object.
            </summary>
            <param name="convertToDegrees">A value indicating whether an anglular coordinates should be converted to degrees</param>
            <returns>A plane geometry</returns>
        </member>
        <member name="M:MapAround.Geography.Geography.Canonicalize">
            <summary>
            Canonicalizes all coordinates of this object.
            </summary>
        </member>
        <member name="M:MapAround.Geography.Geography.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance</returns>
        </member>
        <member name="P:MapAround.Geography.Geography.PointCount">
            <summary>
            Gets a number of points defining this object.
            </summary>
        </member>
        <member name="P:MapAround.Geography.Geography.Dimension">
            <summary>
            Gets the dimension of this object.
            </summary>
        </member>
        <member name="T:MapAround.Geography.GeographyCollection">
            <summary>
            Represents a collection of geographies.
            </summary>
        </member>
        <member name="M:MapAround.Geography.GeographyCollection.#ctor(System.Collections.Generic.IEnumerable{MapAround.Geography.IGeography})">
            <summary>
            Initializes a new instance of MapAround.Geometry.GeographyCollection.
            </summary>
            <param name="geography">Enumerator of geographies</param>
        </member>
        <member name="M:MapAround.Geography.GeographyCollection.#ctor">
            <summary>
            Initializes a new instance of MapAround.Geometry.GeographyCollection.
            </summary>
        </member>
        <member name="P:MapAround.Geography.GeographyCollection.IsHomogenous">
            <summary>
            Gets a value indicating whether a collection is homogenous.
            The collection is homogenous when the dimensions of all geographies 
            are equal.
            </summary>
        </member>
        <member name="P:MapAround.Geography.GeographyCollection.HasDifferentTypeInstances">
            <summary>
            Gets a value indicating whether a collection contains geographies 
            of different types.
            </summary>
        </member>
        <member name="T:MapAround.Geography.GeoPoint">
            <summary>
            Represents a point on the Earth's surface.
            </summary>
        </member>
        <member name="F:MapAround.Geography.GeoPoint.L">
            <summary>
            Longitude in radians.
            </summary>
        </member>
        <member name="F:MapAround.Geography.GeoPoint.Phi">
            <summary>
            Latitude in radians.
            </summary>
        </member>
        <member name="M:MapAround.Geography.GeoPoint.Canonicalize">
            <summary>
            Canonicalizes all coordinates of this object.
            </summary>
        </member>
        <member name="M:MapAround.Geography.GeoPoint.ExtractPoints">
            <summary>
            Extracts all points defining this object.
            </summary>
            <returns>An array containing the points defining this object</returns>
        </member>
        <member name="M:MapAround.Geography.GeoPoint.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance</returns>
        </member>
        <member name="M:MapAround.Geography.GeoPoint.Intersection(MapAround.Geography.IGeography)">
            <summary>
            Computes an intersection of this geography with another.
            </summary>
            <param name="other">The instance of MapAround.Geometry.IGeography to compute the intersection</param>
            <returns>A collection of geographies that represents the intersection</returns>
        </member>
        <member name="M:MapAround.Geography.GeoPoint.Union(MapAround.Geography.IGeography)">
            <summary>
            Computes a union of this geography with another.
            </summary>
            <param name="other">The instance of MapAround.Geometry.IGeography to compute the union</param>
            <returns>A collection of geographies that represents the union</returns>
        </member>
        <member name="M:MapAround.Geography.GeoPoint.Difference(MapAround.Geography.IGeography)">
            <summary>
            Computes a difference of this geography with another.
            </summary>
            <param name="other">The instance of MapAround.Geometry.IGeography to compute the difference</param>
            <returns>A collection of geographies that represents the difference</returns>
        </member>
        <member name="M:MapAround.Geography.GeoPoint.SymmetricDifference(MapAround.Geography.IGeography)">
            <summary>
            Computes a symmetric difference of this geography with another.
            </summary>
            <param name="other">The instance of MapAround.Geometry.IGeography to compute the symmetric difference</param>
            <returns>A collection of geographies that represents the symmetric difference</returns>
        </member>
        <member name="M:MapAround.Geography.GeoPoint.Buffer(System.Double,System.Int32,System.Boolean)">
            <summary>
            Builds a buffer for this geometry.
            </summary>
            <param name="angleDistance">The angle distance of the buffer in radians</param>
            <param name="pointsPerCircle">The number of points in a polygon approximating a circle of a point object buffer</param>
            <param name="allowParallels">The value indicating whether the parallel computing will be used when possible</param>
            <returns>A geography that represents a buffer</returns>
        </member>
        <member name="M:MapAround.Geography.GeoPoint.ToPlanarGeometry(System.Boolean)">
            <summary>
            Gets a planar geometry that is a result of simple 
            Plate-Caree projection of this object.
            </summary>
            <param name="convertToDegrees">A value indicating whether an anglular coordinates should be converted to degrees</param>
            <returns>A plane geometry</returns>
        </member>
        <member name="M:MapAround.Geography.GeoPoint.FromPlanarPoint(MapAround.Geometry.ICoordinate,System.Boolean)">
            <summary>
            Creates an instance of the MapAround.Geography.GeoPoint for
            the planar point that is Plate-Caree projection.
            </summary>
            <param name="point">A planar point</param>
            <param name="convertFromDegrees">A value indicating whether 
            the angular coordinates should be converted from degrees to radians</param>
            <returns>A geopoint</returns>
        </member>
        <member name="M:MapAround.Geography.GeoPoint.ToPlanarPoint(System.Boolean)">
            <summary>
            Gets a planar point that is a result of simple 
            Plate-Caree projection of this geopoint.
            </summary>
            <param name="convertToDegrees">A value indicating whether an anglular coordinates should be converted to degrees</param>
            <returns>A planar point</returns>
        </member>
        <member name="M:MapAround.Geography.GeoPoint.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MapAround.Geography.GeoPoint"/>.
            </summary>
            <param name="l">A longitude value in radians</param>
            <param name="phi">A latitude value in radians</param>
        </member>
        <member name="P:MapAround.Geography.GeoPoint.Latitude">
            <summary>
            Gets or sets a latitude in degrees.
            </summary>
        </member>
        <member name="P:MapAround.Geography.GeoPoint.Longitude">
            <summary>
            Gets or sets a longitude in degrees.
            </summary>
        </member>
        <member name="P:MapAround.Geography.GeoPoint.PointCount">
            <summary>
            Gets a number of points defining this object.
            </summary>
        </member>
        <member name="P:MapAround.Geography.GeoPoint.Dimension">
            <summary>
            Gets the dimension of this object.
            </summary>
        </member>
        <member name="T:MapAround.Geography.GeoMultiPoint">
            <summary>
            An ordered collection of points on the Earth's surface.
            </summary>
        </member>
        <member name="M:MapAround.Geography.GeoMultiPoint.Canonicalize">
            <summary>
            Canonicalizes all coordinates of this object.
            </summary>
        </member>
        <member name="M:MapAround.Geography.GeoMultiPoint.ExtractPoints">
            <summary>
            Extracts all points defining this object.
            </summary>
            <returns>An array containing the points defining this object</returns>
        </member>
        <member name="M:MapAround.Geography.GeoMultiPoint.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance</returns>
        </member>
        <member name="M:MapAround.Geography.GeoMultiPoint.ToPlanarGeometry(System.Boolean)">
            <summary>
            Gets a planar geometry that is a result of simple 
            Plate-Caree projection of this object.
            </summary>
            <param name="convertToDegrees">A value indicating whether an anglular coordinates should be converted to degrees</param>
            <returns>A plane geometry</returns>
        </member>
        <member name="M:MapAround.Geography.GeoMultiPoint.ToPlanarMultiPoint(System.Boolean)">
            <summary>
            Gets a planar multipoint that is a result of simple 
            Plate-Caree projection of this geomultipoint.
            </summary>
            <param name="convertToDegrees">A value indicating whether an anglular coordinates should be converted to degrees</param>
            <returns>A planar multipoint</returns>
        </member>
        <member name="M:MapAround.Geography.GeoMultiPoint.FromPlanarMultiPoint(MapAround.Geometry.MultiPoint,System.Boolean)">
            <summary>
            Creates an instance of the MapAround.Geography.GeoMultiPoint for
            the planar multipoint that is Plate-Caree projection.
            </summary>
            <param name="multiPoint">A planar multipoint</param>
            <param name="convertFromDegrees">A value indicating whether 
            the angular coordinates should be converted from degrees to radians</param>
            <returns>A geomultipoint</returns>
        </member>
        <member name="M:MapAround.Geography.GeoMultiPoint.#ctor(System.Collections.Generic.IEnumerable{MapAround.Geography.GeoPoint})">
            <summary>
            Initializes a new instance of the  <see cref="T:MapAround.Geography.GeoMultiPoint"/>.
            </summary>
            <param name="points">Enumerator of points</param>
        </member>
        <member name="M:MapAround.Geography.GeoMultiPoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MapAround.Geography.GeoMultiPoint"/>.
            </summary>
        </member>
        <member name="P:MapAround.Geography.GeoMultiPoint.Points">
            <summary>
            Gets or sets a list of geopoints.
            </summary>
        </member>
        <member name="P:MapAround.Geography.GeoMultiPoint.PointCount">
            <summary>
            Gets a number of points defining this object.
            </summary>
        </member>
        <member name="P:MapAround.Geography.GeoMultiPoint.Dimension">
            <summary>
            Gets the dimension of this object.
            </summary>
        </member>
        <member name="T:MapAround.Geography.GeoPath">
            <summary>
            A sequence of connected segments on the Earth's surface.
            </summary>
        </member>
        <member name="M:MapAround.Geography.GeoPath.Canonicalize">
            <summary>
            Canonicalizes all coordinates of this object.
            </summary>
        </member>
        <member name="M:MapAround.Geography.GeoPath.ExtractPoints">
            <summary>
            Extracts all points defining this object.
            </summary>
            <returns>An array containing the points defining this object</returns>
        </member>
        <member name="M:MapAround.Geography.GeoPath.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance</returns>
        </member>
        <member name="M:MapAround.Geography.GeoPath.ReduceSegments(System.Double)">
            <summary>
            Removes all segments which length is less than the 
            specified minimum length. Method does not guarantee 
            preservation of topology.
            </summary>
            <param name="minAngle">The minimum angular length value (in radians)</param>
        </member>
        <member name="M:MapAround.Geography.GeoPath.Length">
            <summary>
            Computes a length of the geopath. In the square of the ellipsoid axes unit.
            </summary>
            <returns>A length of the geopath</returns>
        </member>
        <member name="M:MapAround.Geography.GeoPath.AngleLength">
            <summary>
            Computes an angular length of the geopath in radians.
            </summary>
            <returns>An angular length of the geopath in radians</returns>
        </member>
        <member name="M:MapAround.Geography.GeoPath.Densify(System.Double)">
            <summary>
            Densifies a geopath points.
            After this operation, two successive points of 
            geopath should not be spaced more than the 
            specified angle.
            </summary>
            <param name="maxAngle">A densification angle</param>
        </member>
        <member name="M:MapAround.Geography.GeoPath.Reverse">
            <summary>
            Reverces the order of points.
            </summary>
        </member>
        <member name="M:MapAround.Geography.GeoPath.ToPlanarGeometry(System.Boolean)">
            <summary>
            Gets a planar geometry that is a result of simple 
            Plate-Caree projection of this object.
            </summary>
            <param name="convertToDegrees">A value indicating whether an anglular coordinates should be converted to degrees</param>
            <returns>A plane geometry</returns>
        </member>
        <member name="M:MapAround.Geography.GeoPath.FromPlanarPath(MapAround.Geometry.LinePath,System.Boolean)">
            <summary>
            Creates an instance of the MapAround.Geography.GeoPath for
            the linepath that is Plate-Caree projection.
            </summary>
            <param name="path">A linepath</param>
            <param name="convertFromDegrees">A value indicating whether 
            the angular coordinates should be converted from degrees to radians</param>
            <returns>A geocontour</returns>
        </member>
        <member name="M:MapAround.Geography.GeoPath.ToPlanarLinePath(System.Boolean)">
            <summary>
            Gets a linepath that is a result of simple 
            Plate-Caree projection of this geopath.
            </summary>
            <param name="convertToDegrees">A value indicating whether an anglular coordinates should be converted to degrees</param>
            <returns>A linepath</returns>
        </member>
        <member name="M:MapAround.Geography.GeoPath.#ctor(System.Collections.Generic.IEnumerable{MapAround.Geography.GeoPoint})">
            <summary>
            Initializes a new instance of the <see cref="T:MapAround.Geography.GeoPath"/>.
            </summary>
            <param name="vertices">Enumerator ot the geopath vertices</param>
        </member>
        <member name="M:MapAround.Geography.GeoPath.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MapAround.Geography.GeoPath"/>.
            </summary>
        </member>
        <member name="P:MapAround.Geography.GeoPath.Vertices">
            <summary>
            Gets or sets a list containing 
            vertices of this geopath.
            </summary>
        </member>
        <member name="P:MapAround.Geography.GeoPath.PointCount">
            <summary>
            Gets a number of points defining this object.
            </summary>
        </member>
        <member name="P:MapAround.Geography.GeoPath.Dimension">
            <summary>
            Gets the dimension of this object.
            </summary>
        </member>
        <member name="T:MapAround.Geography.GeoContour">
            <summary>
            Represents closed sequence of connected segments
            on the Earth's surface.
            </summary>
        </member>
        <member name="F:MapAround.Geography.GeoContour.Layout">
            <summary>
            Contour layout in geopolygon.
            </summary>
        </member>
        <member name="M:MapAround.Geography.GeoContour.Canonicalize">
            <summary>
            Canonicalizes all coordinates of this object.
            </summary>
        </member>
        <member name="M:MapAround.Geography.GeoContour.ExtractPoints">
            <summary>
            Extracts all points defining this object.
            </summary>
            <returns>An array containing the points defining this object</returns>
        </member>
        <member name="M:MapAround.Geography.GeoContour.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance</returns>
        </member>
        <member name="M:MapAround.Geography.GeoContour.ReduceSegments(System.Double)">
            <summary>
            Removes all segments which length is less than the 
            specified minimum length. Method does not guarantee 
            preservation of topology.
            </summary>
            <param name="minAngle">The minimum angular length value (in radians)</param>
        </member>
        <member name="M:MapAround.Geography.GeoContour.ContainsPoint(MapAround.Geography.GeoPoint)">
            <summary>
            Tests if the point lies on the area bounded by 
            this geocontour.
            </summary>
            <param name="point">Point to test</param>
            <returns>True, if the point lies on the area bounded by 
            this geocontour, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geography.GeoContour.Length">
            <summary>
            Computes a length of the geocontour. In the square of the ellipsoid axes unit.
            </summary>
            <returns>A length of the geocontour</returns>
        </member>
        <member name="M:MapAround.Geography.GeoContour.AngleLength">
            <summary>
            Computes an angular length of the geocontour in radians.
            </summary>
            <returns>An angular length of the geocontour in radians</returns>
        </member>
        <member name="M:MapAround.Geography.GeoContour.Densify(System.Double)">
            <summary>
            Densifies a geocontour points.
            After this operation, two successive points of 
            geocontour should not be spaced more than the 
            specified angle.
            </summary>
            <param name="maxAngle">A densification angle</param>
        </member>
        <member name="M:MapAround.Geography.GeoContour.Reverse">
            <summary>
            Reverces the order of points.
            </summary>
        </member>
        <member name="M:MapAround.Geography.GeoContour.PlaneAreaInLambertProjection(System.Boolean)">
            <summary>
            Calculates the area of the 
            Lambert Azimuthal Aqual Area Projection 
            of this contour.
            </summary>
            <returns>An area of the projected contour</returns>
        </member>
        <member name="M:MapAround.Geography.GeoContour.Area">
            <summary>
            Computes an area of the geocontour.
            Accuracy of calculations depends on the distance between successive 
            points of contour. To get "good" results for geocontours containing 
            long segments, it is recommended to densify its points 
            - <see cref="M:MapAround.Geography.GeoContour.Densify(System.Double)"/>).
            </summary>
            <returns>An area of the geopolygon (in the square of the ellipsoid axes unit)</returns>
        </member>
        <member name="M:MapAround.Geography.GeoContour.ToPlanarGeometry(System.Boolean)">
            <summary>
            Gets a planar geometry that is a result of simple 
            Plate-Caree projection of this object.
            </summary>
            <param name="convertToDegrees">A value indicating whether an anglular coordinates should be converted to degrees</param>
            <returns>A plane geometry</returns>
        </member>
        <member name="M:MapAround.Geography.GeoContour.FromPlanarContour(MapAround.Geometry.Contour,System.Boolean)">
            <summary>
            Creates an instance of the MapAround.Geography.GeoContour for
            the planar contour that is Plate-Caree projection.
            </summary>
            <param name="contour">A planar contour</param>
            <param name="convertFromDegrees">A value indicating whether 
            the angular coordinates should be converted from degrees to radians</param>
            <returns>A geocontour</returns>
        </member>
        <member name="M:MapAround.Geography.GeoContour.ToPlanarContour(System.Boolean)">
            <summary>
            Gets a planar contour that is a result of simple 
            Plate-Caree projection of this geocontour.
            </summary>
            <param name="convertToDegrees">A value indicating whether an anglular coordinates should be converted to degrees</param>
            <returns>A planar contour</returns>
        </member>
        <member name="M:MapAround.Geography.GeoContour.#ctor(System.Collections.Generic.IEnumerable{MapAround.Geography.GeoPoint})">
            <summary>
            Initializes a new instance of the <see cref="T:MapAround.Geography.GeoContour"/>.
            </summary>
            <param name="vertices">Enumerator of the geocontour vertices</param>
        </member>
        <member name="M:MapAround.Geography.GeoContour.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MapAround.Geography.GeoContour"/>.
            </summary>
        </member>
        <member name="P:MapAround.Geography.GeoContour.Vertices">
            <summary>
            Gets or sets a list containing 
            vertices of this geocontour.
            </summary>
        </member>
        <member name="P:MapAround.Geography.GeoContour.PointCount">
            <summary>
            Gets a number of points defining this object.
            </summary>
        </member>
        <member name="P:MapAround.Geography.GeoContour.Dimension">
            <summary>
            Gets the dimension of this object.
            </summary>
        </member>
        <member name="T:MapAround.Geography.GeoPolyline">
            <summary>
            A polyline on the Earth's surface.
            </summary>
        </member>
        <member name="M:MapAround.Geography.GeoPolyline.Canonicalize">
            <summary>
            Canonicalizes all coordinates of this object.
            </summary>
        </member>
        <member name="M:MapAround.Geography.GeoPolyline.ExtractPoints">
            <summary>
            Extracts all points defining this object.
            </summary>
            <returns>An array containing the points defining this object</returns>
        </member>
        <member name="M:MapAround.Geography.GeoPolyline.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance</returns>
        </member>
        <member name="M:MapAround.Geography.GeoPolyline.Length">
            <summary>
            Computes a length of the geopolyline. In square of the ellipsoid axes unit.
            </summary>
            <returns>A length of the geopolyline</returns>
        </member>
        <member name="M:MapAround.Geography.GeoPolyline.AngleLength">
            <summary>
            Computes an angular length of the geopolyline in radians.
            </summary>
            <returns>An angular length of the geopolyline in radians</returns>
        </member>
        <member name="M:MapAround.Geography.GeoPolyline.Intersection(MapAround.Geography.IGeography)">
            <summary>
            Computes an intersection of this geography with another.
            </summary>
            <param name="other">The instance of MapAround.Geometry.IGeography to compute the intersection</param>
            <returns>A collection of geographies that represents the intersection</returns>
        </member>
        <member name="M:MapAround.Geography.GeoPolyline.Union(MapAround.Geography.IGeography)">
            <summary>
            Computes a union of this geography with another.
            </summary>
            <param name="other">The instance of MapAround.Geometry.IGeography to compute the union</param>
            <returns>A collection of geographies that represents the union</returns>
        </member>
        <member name="M:MapAround.Geography.GeoPolyline.Difference(MapAround.Geography.IGeography)">
            <summary>
            Computes a difference of this geography with another.
            </summary>
            <param name="other">The instance of MapAround.Geometry.IGeography to compute the difference</param>
            <returns>A collection of geographies that represents the difference</returns>
        </member>
        <member name="M:MapAround.Geography.GeoPolyline.SymmetricDifference(MapAround.Geography.IGeography)">
            <summary>
            Computes a symmetric difference of this geography with another.
            </summary>
            <param name="other">The instance of MapAround.Geometry.IGeography to compute the symmetric difference</param>
            <returns>A collection of geographies that represents the symmetric difference</returns>
        </member>
        <member name="M:MapAround.Geography.GeoPolyline.Buffer(System.Double,System.Int32,System.Boolean)">
            <summary>
            Builds a buffer for this geometry.
            </summary>
            <param name="angleDistance">The angle distance of the buffer in radians</param>
            <param name="pointsPerCircle">The number of points in a polygon approximating a circle of a point object buffer</param>
            <param name="allowParallels">The value indicating whether the parallel computing will be used when possible</param>
            <returns>A geography that represents a buffer</returns>
        </member>
        <member name="M:MapAround.Geography.GeoPolyline.ReduceSegments(System.Double)">
            <summary>
            Removes all segments which length is less than the 
            specified minimum length. Method does not guarantee 
            preservation of topology.
            </summary>
            <param name="minAngle">The minimum angular length value (in radians)</param>
        </member>
        <member name="M:MapAround.Geography.GeoPolyline.Densify(System.Double)">
            <summary>
            Densifies a geopolyline points.
            After this operation, two successive points of each 
            geopath should not be spaced more than the 
            specified angle.
            </summary>
            <param name="maxAngle">A densification angle</param>
        </member>
        <member name="M:MapAround.Geography.GeoPolyline.ToPlanarGeometry(System.Boolean)">
            <summary>
            Gets a planar geometry that is a result of simple 
            Plate-Caree projection of this object.
            </summary>
            <param name="convertToDegrees">A value indicating whether an anglular coordinates should be converted to degrees</param>
            <returns>A plane geometry</returns>
        </member>
        <member name="M:MapAround.Geography.GeoPolyline.FromPlanarPolyline(MapAround.Geometry.Polyline,System.Boolean)">
            <summary>
            Creates an instance of the MapAround.Geography.GeoPolyline for
            the planar polyline that is Plate-Caree projection.
            </summary>
            <param name="polyline">A planar polyline</param>
            <param name="convertFromDegrees">A value indicating whether 
            the angular coordinates should be converted from degrees to radians</param>
            <returns>A geopolyline</returns>
        </member>
        <member name="M:MapAround.Geography.GeoPolyline.ToPlanarPolyline(System.Boolean)">
            <summary>
            Gets a planar polyline that is a result of simple 
            Plate-Caree projection of this geopolyline.
            </summary>
            <param name="convertToDegrees">A value indicating whether an anglular coordinates should be converted to degrees</param>
            <returns>A planar polyline</returns>
        </member>
        <member name="P:MapAround.Geography.GeoPolyline.Paths">
            <summary>
            Gets or sets a list containing geopaths defining this geopolyline.
            </summary>
        </member>
        <member name="P:MapAround.Geography.GeoPolyline.PointCount">
            <summary>
            Gets a number of points defining this object.
            </summary>
        </member>
        <member name="P:MapAround.Geography.GeoPolyline.Dimension">
            <summary>
            Gets the dimension of this object.
            </summary>
        </member>
        <member name="T:MapAround.Geography.GeoPolygon">
            <summary>
            Represents a polygon on the Earth's surface.
            </summary>
        </member>
        <member name="M:MapAround.Geography.GeoPolygon.Canonicalize">
            <summary>
            Canonicalizes all coordinates of this object.
            </summary>
        </member>
        <member name="M:MapAround.Geography.GeoPolygon.ExtractPoints">
            <summary>
            Extracts all points defining this object.
            </summary>
            <returns>An array containing the points defining this object</returns>
        </member>
        <member name="M:MapAround.Geography.GeoPolygon.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance</returns>
        </member>
        <member name="M:MapAround.Geography.GeoPolygon.Intersection(MapAround.Geography.IGeography)">
            <summary>
            Computes an intersection of this geography with another.
            </summary>
            <param name="other">The instance of MapAround.Geometry.IGeography to compute the intersection</param>
            <returns>A collection of geographies that represents the intersection</returns>
        </member>
        <member name="M:MapAround.Geography.GeoPolygon.Union(MapAround.Geography.IGeography)">
            <summary>
            Computes a union of this geography with another.
            </summary>
            <param name="other">The instance of MapAround.Geometry.IGeography to compute the union</param>
            <returns>A collection of geographies that represents the union</returns>
        </member>
        <member name="M:MapAround.Geography.GeoPolygon.Difference(MapAround.Geography.IGeography)">
            <summary>
            Computes a difference of this geography with another.
            </summary>
            <param name="other">The instance of MapAround.Geometry.IGeography to compute the difference</param>
            <returns>A collection of geographies that represents the difference</returns>
        </member>
        <member name="M:MapAround.Geography.GeoPolygon.SymmetricDifference(MapAround.Geography.IGeography)">
            <summary>
            Computes a symmetric difference of this geography with another.
            </summary>
            <param name="other">The instance of MapAround.Geometry.IGeography to compute the symmetric difference</param>
            <returns>A collection of geographies that represents the symmetric difference</returns>
        </member>
        <member name="M:MapAround.Geography.GeoPolygon.ContainsPoint(MapAround.Geography.GeoPoint)">
            <summary>
            Tests if the point lies on the area bounded by 
            the polygon boundary.
            </summary>
            <param name="point">Point to test</param>
            <returns>True, if the point lies on the area bounded by 
            the polygon boundary, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geography.GeoPolygon.ToPlanarGeometry(System.Boolean)">
            <summary>
            Gets a planar geometry that is a result of simple 
            Plate-Caree projection of this object.
            </summary>
            <param name="convertToDegrees">A value indicating whether an anglular coordinates should be converted to degrees</param>
            <returns>A plane geometry</returns>
        </member>
        <member name="M:MapAround.Geography.GeoPolygon.ToPlanarPolygon(System.Boolean)">
            <summary>
            Gets a planar polygon that is a result of simple 
            Plate-Caree projection of this geopolygon.
            </summary>
            <param name="convertToDegrees">A value indicating whether an anglular coordinates should be converted to degrees</param>
            <returns>A planar polygon</returns>
        </member>
        <member name="M:MapAround.Geography.GeoPolygon.GetSimplifiedContours">
            <summary>
            Computes the contours of the topologically normalized geopolygon.
            </summary>
            <remarks>
            Contours that are not intersected. 
            Orientations are set clockwise for holes and 
            counter clockwise for shells.
            Sections of the boundary repeated an even number of times will be removed.
            </remarks>
            <returns>A list containing contours of the topologically normalized geopolygon</returns>
        </member>
        <member name="M:MapAround.Geography.GeoPolygon.Simplify">
            <summary>
            Normalizes the topology of the geopolygon.
            Contours are transformed to not intersected. 
            Orientations are set clockwise for holes and 
            counter clockwise for shells.
            </summary>
        </member>
        <member name="M:MapAround.Geography.GeoPolygon.Buffer(System.Double,System.Int32,System.Boolean)">
            <summary>
            Builds a buffer for this geometry.
            </summary>
            <param name="angleDistance">The angle distance of the buffer in radians</param>
            <param name="pointsPerCircle">The number of points in a polygon approximating a circle of a point object buffer</param>
            <param name="allowParallels">The value indicating whether the parallel computing will be used when possible</param>
            <returns>A geography that represents a buffer</returns>
        </member>
        <member name="M:MapAround.Geography.GeoPolygon.ReduceSegments(System.Double)">
            <summary>
            Removes all segments which length is less than the 
            specified minimum length. Method does not guarantee 
            preservation of topology.
            </summary>
            <param name="minAngle">The minimum angular length value (in radians)</param>
        </member>
        <member name="M:MapAround.Geography.GeoPolygon.Perimeter">
            <summary>
            Computes a length of the geopolygon boundary. In square of the ellipsoid axes unit.
            </summary>
            <returns>A length of the geopolygon boundary</returns>
        </member>
        <member name="M:MapAround.Geography.GeoPolygon.AnglePerimeter">
            <summary>
            Computes an angular length of the geopolygon boundary in radians.
            </summary>
            <returns>An angular length of the geopolygon boundary in radians</returns>
        </member>
        <member name="M:MapAround.Geography.GeoPolygon.Densify(System.Double)">
            <summary>
            Densifies a geopolygon points.
            After this operation, two successive points of each 
            geopolygon contour should not be spaced more than 
            the specified angle.
            </summary>
            <param name="maxAngle">A densification angle</param>
        </member>
        <member name="M:MapAround.Geography.GeoPolygon.Area">
            <summary>
            Computes an area of the geopolygon.
            Accuracy of calculations depends on the distance between successive 
            points of contour. To get "good" results for geopolygons containing 
            long segments, it is recommended to densify its points 
            - <see cref="M:MapAround.Geography.GeoPolygon.Densify(System.Double)"/>).
            </summary>
            <returns>An area of the geopolygon (in the square of the ellipsoid axes unit)</returns>
        </member>
        <member name="M:MapAround.Geography.GeoPolygon.FromPlanarPolygon(MapAround.Geometry.Polygon,System.Boolean)">
            <summary>
            Creates an instance of the MapAround.Geography.GeoPolygon for
            the planar polygon that is Plate-Caree projection.
            </summary>
            <param name="polygon">A planar polygon</param>
            <param name="convertFromDegrees">A value indicating whether 
            the angular coordinates should be converted from degrees to radians</param>
            <returns>A geopolygon</returns>
        </member>
        <member name="M:MapAround.Geography.GeoPolygon.#ctor">
            <summary>
            Initializes a new instance of the MapAround.Geography.GeoPolygon.
            </summary>
        </member>
        <member name="P:MapAround.Geography.GeoPolygon.Contours">
            <summary>
            Gets or sets a list of geocontours 
            defining the border of this polygon.
            </summary>
        </member>
        <member name="P:MapAround.Geography.GeoPolygon.PointCount">
            <summary>
            Gets a number of points defining this object.
            </summary>
        </member>
        <member name="P:MapAround.Geography.GeoPolygon.Dimension">
            <summary>
            Gets the dimension of this object.
            </summary>
        </member>
        <member name="T:MapAround.Geography.Envelope">
            <summary>
            Represents an envelope of the geographic objects.
            <remarks>
            Envelope is defined as a center point and an angle, which 
            determine region on the ellipsoid surface which contains 
            geometric shape. Envelope is not a minimum area envelope, 
            which can be defined by the point and angle. Because the 
            center is computed by summing the vectors from the center 
            of the globe to each vertex in the figure, essentially 
            averaging the vertices. The calculation of minimal cap is 
            difficult computationally and takes a long time. 
            This implementation is a compromise on performance and good 
            approximation of the true minimum envelope.
            </remarks>
            </summary>
        </member>
        <member name="M:MapAround.Geography.Envelope.Build(System.Collections.Generic.IEnumerable{MapAround.Geography.GeoPoint})">
            <summary>
            Builds an envelope (calculates a center point and an angle)
            for the specifeid geopoints.
            </summary>
            <param name="points">Enumerator of geopoints to build envelope</param>
        </member>
        <member name="M:MapAround.Geography.Envelope.Join(MapAround.Geography.GeoPoint)">
            <summary>
            Joins this envelope with envelope of specified point.
            </summary>
            <param name="point">A geopoint to join envelope</param>
        </member>
        <member name="M:MapAround.Geography.Envelope.Intersect(MapAround.Geography.Envelope)">
            <summary>
            Tests whether this envelope intersects with the other.
            </summary>
            <param name="other">An envelope instance to test</param>
            <returns>true, if the regions overlap, otherwise false</returns>
        </member>
        <member name="M:MapAround.Geography.Envelope.#ctor">
            <summary>
            Initializes a new instance of the MapAround.Geography.Envelope.
            </summary>
        </member>
        <member name="M:MapAround.Geography.Envelope.#ctor(MapAround.Geography.IGeography)">
            <summary>
            Initializes a new instance of the MapAround.Geography.Envelope.
            </summary>
            <param name="geography">A geography to build envelope</param>
        </member>
        <member name="P:MapAround.Geography.Envelope.Center">
            <summary>
            Gets a center point of enveope.
            </summary>
        </member>
        <member name="P:MapAround.Geography.Envelope.Angle">
            <summary>
            Gets an angle of enveope in radians.
            </summary>
        </member>
        <member name="T:MapAround.Geography.EllipticOverlayCalculator">
            <summary>
            Calculates the overlays of geographies.
            <remarks>
            Instances of this class are used to calculate the results of Boolean operations 
            (union, intersection, difference, symmetric difference) over the point sets. 
            Point sets can be defined as a geopolygons, geopolylines or geopoints.
            </remarks>
            </summary>
        </member>
        <member name="M:MapAround.Geography.EllipticOverlayCalculator.Union(MapAround.Geography.IGeography,MapAround.Geography.IGeography)">
            <summary>
            Calculates a union of two geographies.
            </summary>
            <param name="geography1">First geography</param>
            <param name="geography2">Second geography</param>
            <returns>A union of two geographies</returns>
        </member>
        <member name="M:MapAround.Geography.EllipticOverlayCalculator.Intersection(MapAround.Geography.IGeography,MapAround.Geography.IGeography)">
            <summary>
            Calculates an intersection of two geographies.
            </summary>
            <param name="geography1">First geography</param>
            <param name="geography2">Second geography</param>
            <returns>An intersection of two geographies</returns>
        </member>
        <member name="M:MapAround.Geography.EllipticOverlayCalculator.Difference(MapAround.Geography.IGeography,MapAround.Geography.IGeography)">
            <summary>
            Calculates a difference of two geographies.
            </summary>
            <param name="geography1">First geography</param>
            <param name="geography2">Second geography</param>
            <returns>A difference of two geographies</returns>
        </member>
        <member name="M:MapAround.Geography.EllipticOverlayCalculator.SymmetricDifference(MapAround.Geography.IGeography,MapAround.Geography.IGeography)">
            <summary>
            Calculates a symmetric difference of two geographies.
            </summary>
            <param name="geography1">First geography</param>
            <param name="geography2">Second geography</param>
            <returns>A symmetric difference of two geographies</returns>
        </member>
        <member name="M:MapAround.Geography.EllipticOverlayCalculator.CalculateOverlay(MapAround.Geography.IGeography,MapAround.Geography.IGeography,MapAround.Geometry.OverlayType)">
            <summary>
            Calculates an overlay of two geographies.
            </summary>
            <param name="geography1">First geography</param>
            <param name="geography2">Second geography</param>
            <param name="operation">Overlay type</param>
            <returns>A resulting overlay of two geographies</returns>
        </member>
        <member name="T:MapAround.Geography.GeoBufferBuilder">
            <summary>
            Calculates buffers on the Earth's surface.
            </summary>
        </member>
        <member name="M:MapAround.Geography.GeoBufferBuilder.GetBuffer(MapAround.Geography.IGeography,System.Double,System.Int32,System.Boolean)">
            <summary>
            Builds a buffer for the specified geography.
            </summary>
            <param name="geography">A geography to build a buffer</param>
            <param name="angleDistance">An angle distance of buffer (in radians)</param>
            <param name="pointsPerCircle">The number of points in a polygon approximating a circle of a point object buffer</param>
            <param name="allowParallels">The value indicating whether the parallel computing will be used when possible</param>
            <returns>A geography that represents the resulting buffer</returns>
        </member>
        <member name="T:MapAround.Geography.Angle">
            <summary>
            Encapsulates an angle.
            <remarks>
            Angles are constructed in degrees, but inside are radians for 
            convenience of calculation. The comparison is based on the number 
            of full circles. Ie 360 degrees is not equal to 0 degrees.
            </remarks>
            </summary>
        </member>
        <member name="F:MapAround.Geography.Angle.Zero">
            <summary>
            A zero angle.
            </summary>
        </member>
        <member name="F:MapAround.Geography.Angle.Angle180">
            <summary>
            A 180 degree angle.
            </summary>
        </member>
        <member name="M:MapAround.Geography.Angle.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the MapAround.Geography.Angle.
            </summary>
            <param name="degrees">An angle value in degrees</param>
        </member>
        <member name="M:MapAround.Geography.Angle.#ctor(System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the MapAround.Geography.Angle.
            </summary>
            <param name="degrees">Integer number of degrees</param>
            <param name="minutes">Minutes of arc(0  to 60)</param>
        </member>
        <member name="M:MapAround.Geography.Angle.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the MapAround.Geography.Angle.
            </summary>
            <param name="degrees">Integer number of degrees</param>
            <param name="minutes">Minutes of arc(0  to 60)</param>
            <param name="seconds">Seconds of arc(0  to 60)</param>
        </member>
        <member name="M:MapAround.Geography.Angle.Abs">
            <summary>
            Gets or sets an absolute value of angle in degrees.
            </summary>
        </member>
        <member name="M:MapAround.Geography.Angle.CompareTo(MapAround.Geography.Angle)">
            <summary>
            Compares this angle with the other.
            </summary>
            <param name="other">An angle to compare with this</param>
            <returns>A 32-bit signed integer that indicates the relative order of the objects 
            being compared. The return value has the following meanings: Value Meaning 
            Less than zero This object is less than the other parameter.  Zero This object
            is equal to other. Greater than zero This object is greater than other.</returns>
        </member>
        <member name="M:MapAround.Geography.Angle.GetHashCode">
            <summary>
            Derived from <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="M:MapAround.Geography.Angle.Equals(System.Object)">
            <summary>
            Derived from <see cref="T:System.Object"/>.
            The comparison is based on the number 
            of full circles. Ie 360 degrees is not equal to 0 degrees.
            </summary>
            <param name="obj">The System.Object to compare with the current MapAround.Geography.Angle</param>
        </member>
        <member name="M:MapAround.Geography.Angle.op_Addition(MapAround.Geography.Angle,MapAround.Geography.Angle)">
            <summary>
            
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:MapAround.Geography.Angle.op_Subtraction(MapAround.Geography.Angle,MapAround.Geography.Angle)">
            <summary>
            
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:MapAround.Geography.Angle.op_GreaterThan(MapAround.Geography.Angle,MapAround.Geography.Angle)">
            <summary>
            
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:MapAround.Geography.Angle.op_GreaterThanOrEqual(MapAround.Geography.Angle,MapAround.Geography.Angle)">
            <summary>
            
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:MapAround.Geography.Angle.op_LessThan(MapAround.Geography.Angle,MapAround.Geography.Angle)">
            <summary>
            
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:MapAround.Geography.Angle.op_LessThanOrEqual(MapAround.Geography.Angle,MapAround.Geography.Angle)">
            <summary>
            
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:MapAround.Geography.Angle.op_Equality(MapAround.Geography.Angle,MapAround.Geography.Angle)">
            <summary>
            
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:MapAround.Geography.Angle.op_Inequality(MapAround.Geography.Angle,MapAround.Geography.Angle)">
            <summary>
            
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:MapAround.Geography.Angle.op_Implicit(System.Double)~MapAround.Geography.Angle">
            <summary>
            Implicitly converts the double value to the corner in degrees.
            </summary>
            <param name="degrees">A doublevalue </param>
            <returns>An angle</returns>
        </member>
        <member name="P:MapAround.Geography.Angle.Degrees">
            <summary>
            Gets or sets an angle value in degrees.
            </summary>
        </member>
        <member name="P:MapAround.Geography.Angle.Radians">
            <summary>
            Gets or sets an angle value in radians.
            </summary>
        </member>
        <member name="T:MapAround.Geography.GeodeticCurve">
            <summary>
            Represents a geodetic curve on the Earth's surface.
            </summary>
        </member>
        <member name="M:MapAround.Geography.GeodeticCurve.#ctor(System.Double,MapAround.Geography.Angle,MapAround.Geography.Angle)">
            <summary>
            Initializes a new instance of the MapAround.Geography.GeodeticCurve.
            </summary>
            <param name="ellipsoidalDistance">A linear distance between the endpoints in the units of ellipsoid axes</param>
            <param name="azimuth">An azimuth in degrees</param>
            <param name="reverseAzimuth">A reverse azimuth in degrees</param>
        </member>
        <member name="P:MapAround.Geography.GeodeticCurve.EllipsoidalDistance">
            <summary>
            Gets a linear distance between the endpoints.
            </summary>
        </member>
        <member name="P:MapAround.Geography.GeodeticCurve.Azimuth">
            <summary>
            Gets an azimuth. Azimuth is the number of degrees from north 
            to the direction defined by the start and end point.
            </summary>
        </member>
        <member name="P:MapAround.Geography.GeodeticCurve.ReverseAzimuth">
            <summary>
            Gets a reverse azimuth. Reverse azimuth is the number 
            of degrees from north to the direction defined by 
            the end and start point.
            </summary>
        </member>
        <member name="T:MapAround.Geography.GlobalCoordinates">
            <summary>
            Represents a global coordinates. Which defined by the latitude and longitude.
            Negative latitude - the southern hemisphere.
            Negative longitude - Eastern Hemisphere.
            
            The angles in the canonical form belong to the following intervals:
            Latitude: -90 to +90 degrees
            Longitude: -180 to +180 degrees
            </summary>
        </member>
        <member name="F:MapAround.Geography.GlobalCoordinates._latitude">
            <summary>
            Latitude. Negative values ??- the southern hemisphere.
            </summary>
        </member>
        <member name="F:MapAround.Geography.GlobalCoordinates._longitude">
            <summary>
            Longitude. Negative values ??- the Western Hemisphere.
            </summary>
        </member>
        <member name="M:MapAround.Geography.GlobalCoordinates.Canonicalize">
            <summary>
            Sets the longitude and latitude to the canonical form.
            The angles in the canonical form belong to the following intervals:
            Latitude: -90 to +90 degrees
            Longitude: -180 to +180 degrees
            </summary>
        </member>
        <member name="M:MapAround.Geography.GlobalCoordinates.#ctor(MapAround.Geography.Angle,MapAround.Geography.Angle)">
            <summary>
            Initializes a new instance of the MapAround.Geography.GlobalCoordinates.
            </summary>
            <param name="latitude">A latitude value</param>
            <param name="longitude">A longitude value</param>
        </member>
        <member name="M:MapAround.Geography.GlobalCoordinates.CompareTo(MapAround.Geography.GlobalCoordinates)">
            <summary>
            Compares this coordinates with the other.
            West longitude is less than the east. If the longitudes are equal, 
            latitudes are compared: the northern latitude is greater than the southern.
            </summary>
            <param name="other">A coordinates to compare with this</param>
            <returns>A 32-bit signed integer that indicates the relative order of the objects 
            being compared. The return value has the following meanings: Value Meaning 
            Less than zero This object is less than the other parameter.  Zero This object
            is equal to other. Greater than zero This object is greater than other.</returns>
        </member>
        <member name="M:MapAround.Geography.GlobalCoordinates.GetHashCode">
            <summary>
            Derived from <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="M:MapAround.Geography.GlobalCoordinates.Equals(System.Object)">
            <summary>
            Derived from <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The System.Object to compare with the current MapAround.Geography.GlobalCoordinates</param>
        </member>
        <member name="P:MapAround.Geography.GlobalCoordinates.Latitude">
            <summary>
            Gets or sets a latitude.
            Value will be reduced to the canonical form.
            Negative values - the southern hemisphere.
            </summary>
        </member>
        <member name="P:MapAround.Geography.GlobalCoordinates.Longitude">
            <summary>
            Gets or sets the longitude. 
            Value will be reduced to canonical form. 
            Negative value - the Western Hemisphere.
            </summary>
        </member>
        <member name="T:MapAround.Geography.GlobalPosition">
            <summary>
            Represents a global position. Which defined by the latitude, longitude and elevation
            above the surface of the ellipsoid.
            </summary>
        </member>
        <member name="F:MapAround.Geography.GlobalPosition._coordinates">
            <summary>
            Global coordinates.
            </summary>
        </member>
        <member name="F:MapAround.Geography.GlobalPosition._elevation">
            <summary>
            Elevation, in meters, above the surface of the ellipsoid.
            </summary>
        </member>
        <member name="M:MapAround.Geography.GlobalPosition.#ctor(MapAround.Geography.GlobalCoordinates,System.Double)">
            <summary>
            Initializes a new instance of the MapAround.Geography.GlobalPosition.
            </summary>
            <param name="coords">A global coordinates</param>
            <param name="elevation">An elevation obove the surface of the ellipsoid (in units of the ellipsoid's axes)</param>
        </member>
        <member name="M:MapAround.Geography.GlobalPosition.#ctor(MapAround.Geography.GlobalCoordinates)">
            <summary>
            Initializes a new instance of the MapAround.Geography.GlobalPosition with zero elevation.
            </summary>
            <param name="coords">A global coordinates</param>
        </member>
        <member name="M:MapAround.Geography.GlobalPosition.CompareTo(MapAround.Geography.GlobalPosition)">
            <summary>
            Compares this position with the other.
            West longitude is less than the east. If the longitudes are equal, 
            latitudes are compared: the northern latitude is greater than the southern.
            If the latitudes are equal, elevation compared: a large object with a high altitude.
            </summary>
            <param name="other">A position to compare with this</param>
            <returns>A 32-bit signed integer that indicates the relative order of the objects 
            being compared. The return value has the following meanings: Value Meaning 
            Less than zero This object is less than the other parameter.  Zero This object
            is equal to other. Greater than zero This object is greater than other.</returns>
        </member>
        <member name="M:MapAround.Geography.GlobalPosition.GetHashCode">
            <summary>
            Derived from <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="M:MapAround.Geography.GlobalPosition.Equals(System.Object)">
            <summary>
            Derived from <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The System.Object to compare with the current MapAround.Geography.GlobalPosition</param>
        </member>
        <member name="P:MapAround.Geography.GlobalPosition.Coordinates">
            <summary>
            Gets or sets a global coordinates.
            </summary>
        </member>
        <member name="P:MapAround.Geography.GlobalPosition.Latitude">
            <summary>
            Gets or sets an angle of latitude.
            </summary>
        </member>
        <member name="P:MapAround.Geography.GlobalPosition.Longitude">
            <summary>
            Gets or sets an angle of longitude.
            </summary>
        </member>
        <member name="P:MapAround.Geography.GlobalPosition.Elevation">
            <summary>
            Gets or sets an elevation obove the surface of the ellipsoid. In units of the ellipsoid's axes.
            </summary>
        </member>
        <member name="T:MapAround.Geography.GeodeticMeasurement">
            <summary>
            Represents a geodetic measurement.
            Geodetic measurement is the segment of a geodesic 
            line on the ellipsoid and the altitude difference 
            between start and end points of the segment.
            </summary>
        </member>
        <member name="M:MapAround.Geography.GeodeticMeasurement.#ctor(MapAround.Geography.GeodeticCurve,System.Double)">
            <summary>
            Initializes a new instance of the MapAround.Geography.GeodeticMeasurement.
            </summary>
            <param name="averageCurve">A segment of a geodesic line at the average elevation</param>
            <param name="elevationChange">A change of the elevation in units of the ellipsoid's axes</param>
        </member>
        <member name="P:MapAround.Geography.GeodeticMeasurement.AverageCurve">
            <summary>
            Gets a segment of a geodesic line at the average elevation.
            </summary>
        </member>
        <member name="P:MapAround.Geography.GeodeticMeasurement.EllipsoidalDistance">
            <summary>
            Gets a linear distance between the endpoints of the average geodesic line. 
            </summary>
        </member>
        <member name="P:MapAround.Geography.GeodeticMeasurement.Azimuth">
            <summary>
            Gets an azimuth. Azimuth is the number of degrees from north 
            to the direction defined by the start and end point.
            </summary>
        </member>
        <member name="P:MapAround.Geography.GeodeticMeasurement.ReverseAzimuth">
            <summary>
            Gets a reverse azimuth. Reverse azimuth is the number 
            of degrees from north to the direction defined by 
            the end and start point.
            </summary>
        </member>
        <member name="P:MapAround.Geography.GeodeticMeasurement.ElevationChange">
            <summary>
            Gets a change of the elevation in units of the ellipsoid's axes.
            </summary>
        </member>
        <member name="P:MapAround.Geography.GeodeticMeasurement.PointToPointDistance">
            <summary>
            Gets a distance between endpoints in the units of the ellipsoid's axes.
            </summary>
        </member>
        <member name="T:MapAround.Geography.GeodeticCalculator">
            <summary>
            Solves the direct and the inverse geodetic problems.
            Implements Thaddeus Vincenty algorithms.
            See http://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf
            </summary>
        </member>
        <member name="M:MapAround.Geography.GeodeticCalculator.CalculateEndingGlobalCoordinates(MapAround.CoordinateSystems.Ellipsoid,MapAround.Geography.GlobalCoordinates,MapAround.Geography.Angle,System.Double,MapAround.Geography.Angle@)">
            <summary>
            Solves the direct geodetic problem.
            Calculates the destination for a given point, direction and distance. 
            </summary>
            <param name="ellipsoid">An ellipsoid</param>
            <param name="start">A start point</param>
            <param name="startBearing">A start bearing</param>
            <param name="distance">A distance to target point</param>
            <param name="endBearing">An end bearing</param>
            <returns>A global coordinates of the destination point</returns>
        </member>
        <member name="M:MapAround.Geography.GeodeticCalculator.CalculateEndingGlobalCoordinates(MapAround.CoordinateSystems.Ellipsoid,MapAround.Geography.GlobalCoordinates,MapAround.Geography.Angle,System.Double)">
            <summary>
            Solves the direct geodetic problem.
            Calculates the destination for a given point, direction and distance. 
            </summary>
            <param name="ellipsoid">An ellipsoid</param>
            <param name="start">A start point</param>
            <param name="startBearing">A start bearing</param>
            <param name="distance">A distance to target point</param>
            <returns>A global coordinates of the destination point</returns>
        </member>
        <member name="M:MapAround.Geography.GeodeticCalculator.CalculateGeodeticCurve(MapAround.CoordinateSystems.Ellipsoid,MapAround.Geography.GlobalCoordinates,MapAround.Geography.GlobalCoordinates)">
            <summary>
            Solves the inverse geodetic problem.
            Calculates the geodetic curve between two points on the ellipsoid. 
            </summary>
            <param name="ellipsoid">An ellipsoid</param>
            <param name="start">A start point</param>
            <param name="end">An end point</param>
            <returns>A geodetic curve between the start and the end points</returns>
        </member>
        <member name="M:MapAround.Geography.GeodeticCalculator.CalculateGeodeticMeasurement(MapAround.CoordinateSystems.Ellipsoid,MapAround.Geography.GlobalPosition,MapAround.Geography.GlobalPosition)">
            <summary>
            Calculates the distance between two points on the ellipsoid given elevations.
            
            First finded a new ellipsoid which radius is greater (or less) than the radius of the original ellipsoid
            by the difference between the elevations. Then calculated the length of a geodesic on this ellipsoid. The 
            distance between two points is calculated as the hypotenuse of a triangle, which cathetus are geodesic 
            length and height difference.
            </summary>
            <param name="refEllipsoid">Ellipsoid</param>
            <param name="start">A start point</param>
            <param name="end">An end point</param>
            <returns>An object that represents the result</returns>
        </member>
        <member name="T:MapAround.Geometry.BufferBuilder">
            <summary>
            Calculates buffers.
            <remarks>
            Supports <see cref="T:MapAround.Geometry.PointD"/>, 
            <see cref="T:MapAround.Geometry.Polyline"/>, 
            <see cref="T:MapAround.Geometry.Polygon"/>, 
            <see cref="T:MapAround.Geometry.MultiPoint"/>. 
            Buffer distance for polygon may be negative.
            </remarks>
            </summary>
        </member>
        <member name="M:MapAround.Geometry.BufferBuilder.GetBuffer(MapAround.Geometry.IGeometry,System.Double,System.Int32,System.Boolean)">
            <summary>
            Builds a buffer for the specified geometry.
            </summary>
            <param name="geometry">The geometry to build a buffer</param>
            <param name="distance">Buffer distance</param>
            <param name="pointsPerCircle">The number of points in a polygon approximating a circle of a point object buffer</param>
            <param name="allowParallels">The value indicating whether the parallel computing will be used when possible</param>
            <returns>>A geometry that represents the resulting buffer</returns>
        </member>
        <member name="T:MapAround.Geometry.MonotoneChain">
            <summary>
            Represents a monotone chain of segments.
            All segments in chain are placed in single quadrant
            <remarks>
            Monotone chain segments are used to avoid a large 
            number of segments intersection checks.
            </remarks>
            </summary>
        </member>
        <member name="T:MapAround.Indexing.IIndexable">
            <summary>
            Provides access to properties and methods of object
            supporting spatial indexing.
            </summary>
        </member>
        <member name="P:MapAround.Indexing.IIndexable.BoundingRectangle">
            <summary>
            A bounding rectangle of this object.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.MonotoneChain.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance</returns>
        </member>
        <member name="M:MapAround.Geometry.MonotoneChain.GetSegmentOrientation(MapAround.Geometry.Segment)">
            <summary>
            Computes an orientation of specified segment.
            </summary>
            <param name="segment">Segment to compute orientation</param>
            <returns>An object representing segment orientation</returns>
        </member>
        <member name="M:MapAround.Geometry.MonotoneChain.InsertSegment(MapAround.Geometry.Segment)">
            <summary>
            Adds a segment to the chain.
            </summary>
            <param name="segment">The segment to add</param>
            <returns>true, if the segment was added, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.MonotoneChain.InsertSegment(MapAround.Geometry.Segment,MapAround.Geometry.SegmentLabel)">
            <summary>
            Adds a segment to the chain.
            </summary>
            <param name="segment">The segment to add</param>
            <param name="label">The label of the segment</param>
            <returns>true, if the segment was added, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.MonotoneChain.ReplaceLabel(System.Int32,MapAround.Geometry.SegmentLabel)">
            <summary>
            Replaces the label associated with segment having specified index in the chain.
            </summary>
            <param name="index">The index of segment in the chain</param>
            <param name="newValue">Instance of label</param>
        </member>
        <member name="M:MapAround.Geometry.MonotoneChain.BoundsIntersect(MapAround.Geometry.MonotoneChain)">
            <summary>
            Determines whether the bounding rectangle of this chain 
            intersects the bounding rectangle of specified chain.
            </summary>
            <param name="chain">Monotone chain</param>
            <returns>true, if the bounding rectangle of this chain 
            intersects the bounding rectangle of specified chain, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.MonotoneChain.BoundsContainPoint(MapAround.Geometry.ICoordinate)">
            <summary>
            Determines whether the bounding rectangle of this 
            monotone chain contains point.
            </summary>
            <param name="point">Point coordinate</param>
            <returns>true, if the bounding rectangle of this monotone chain contains point, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.MonotoneChain.GetCrossPoints(MapAround.Geometry.MonotoneChain)">
            <summary>
            Calculates the intersection points of two chains.
            </summary>
            <param name="chain">Monotone chain</param>
            <returns>A list containing coordinates of intersections</returns>
        </member>
        <member name="M:MapAround.Geometry.MonotoneChain.CrossesWith(MapAround.Geometry.MonotoneChain)">
            <summary>
            Determines whether this chain crosses with other.
            </summary>
            <param name="chain">Chain</param>
            <returns>true, if this chain crosses with the specified chain, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.MonotoneChain.GetCrossSegments(MapAround.Geometry.MonotoneChain)">
            <summary>
            Computes the 2D intersections of two chains.
            </summary>
            <param name="chain">Monotone chain</param>
            <returns>A list containing segments that represent 2D intersections of chain</returns>
        </member>
        <member name="M:MapAround.Geometry.MonotoneChain.ReduceSegments(System.Double)">
            <summary>
            Removes all segments from chain which length is less than specified. 
            The remaining segments are connected.
            </summary>
            <param name="minLength">The minimum length of segment</param>
        </member>
        <member name="M:MapAround.Geometry.MonotoneChain.#ctor(MapAround.Geometry.MonotoneChain.Orientation)">
            <summary>
            Initializes a new instance of <see cref="T:MapAround.Geometry.MonotoneChain"/>.
            </summary>
            <param name="orientation">Orientation of segments</param>
        </member>
        <member name="M:MapAround.Geometry.MonotoneChain.#ctor(MapAround.Geometry.Segment)">
            <summary>
            Initializes a new instance of <see cref="T:MapAround.Geometry.MonotoneChain"/>.
            </summary>
            <param name="segment">An initial segment</param>
        </member>
        <member name="M:MapAround.Geometry.MonotoneChain.#ctor(MapAround.Geometry.Segment,MapAround.Geometry.SegmentLabel)">
            <summary>
            Initializes a new instance of <see cref="T:MapAround.Geometry.MonotoneChain"/>.
            </summary>
            <param name="segment">An initial segment</param>
            <param name="tag">A label of initial segment</param>
        </member>
        <member name="M:MapAround.Geometry.MonotoneChain.IsPointInSegmentsBounds(MapAround.Geometry.ICoordinate)">
            <summary>
            Defines if a specified point lies into the 
            bounding rectangle of any segment of chain.
            </summary>
            <param name="point">Coordinate of point</param>
            <returns>true, if a specified point lies into the 
            bounding rectangle of any segment of chain, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.MonotoneChain.Split(System.Collections.Generic.List{MapAround.Geometry.ICoordinate})">
            <summary>
            Splits the segments of the chain at the specified points.
            </summary>
            <param name="list">A list contatinig points where you need to split the chain</param>
            <returns>true, if se segment was splitted, false otherwise</returns>
        </member>
        <member name="P:MapAround.Geometry.MonotoneChain.BoundingRectangle">
            <summary>
            Gets BoundingRectangle of all chain segments.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.MonotoneChain.Segments">
            <summary>
            Gets a collection of chain segments.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.MonotoneChain.Labels">
            <summary>
            Gets a collection of labels associated with chain segments.
            </summary>s
        </member>
        <member name="P:MapAround.Geometry.MonotoneChain.FirstPoint">
            <summary>
            Gets a coordinate of first point in chain.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.MonotoneChain.LastPoint">
            <summary>
            Gets a coordinate of last point in chain.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.MonotoneChain.Orientation">
            <summary>
            Orientation of segments in chain.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.MonotoneChain.Orientation.LeftUp">
            <summary>
            Left up.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.MonotoneChain.Orientation.RightUp">
            <summary>
            Right up.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.MonotoneChain.Orientation.RightDown">
            <summary>
            Right down.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.MonotoneChain.Orientation.LeftDown">
            <summary>
            Left down.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.SegmentLabel">
            <summary>
            Represents an object for labeling segment in the monotone chain.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.SegmentLabel.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:MapAround.Geometry.SegmentLabel"/>.
            </summary>
            <param name="objectIndex"></param>
            <param name="sequenceIndex"></param>
            <param name="indexInSequence"></param>
        </member>
        <member name="P:MapAround.Geometry.SegmentLabel.IndexInSequence">
            <summary>
            Index in the coordinate sequence.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.SegmentLabel.ObjectIndex">
            <summary>
            Object index.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.SegmentLabel.SequenceIndex">
            <summary>
            Index of coordinate sequence.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.DistanceCalculator">
            <summary>
            Calculates a distances.
            This class allows to find the Euclidean distance between 
            two plane geometries .
            Supports Points, MultiPoints, Polylines and Polygons.
            All other geometries, for example, the bounding rectangle 
            or the line segment should be converted to these four.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.DistanceCalculator.EuclideanDistance(MapAround.Geometry.IGeometry,MapAround.Geometry.IGeometry,System.Double)">
            <summary>
            Calculates the Euclidean distance between two geometries.
            </summary>
            <param name="geometry1">First geometry</param>
            <param name="geometry2">Second geometry</param>
            /// <param name="threshold">The threshold value of the distance 
            at which a search is terminated</param>
            <returns>A distance between geometries (less than or equal to the threshold value)</returns>
        </member>
        <member name="M:MapAround.Geometry.DistanceCalculator.MinimumEuclideanDistance(MapAround.Geometry.IGeometry,MapAround.Geometry.IGeometry)">
            <summary>
            Computes the minimum Euclidean distance between two geometries.
            </summary>
            <param name="geometry1">First geometry</param>
            <param name="geometry2">Second geometry</param>
            <returns>The minimum Euclidean distance between two geometries</returns>
        </member>
        <member name="T:MapAround.Geometry.ICoordinate">
            <summary>
            Provides access to methods and properties of object 
            that represents coordinates on a 2D plane.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.ICoordinate.Equals(MapAround.Geometry.ICoordinate)">
            <summary>
            Gets a value indicating whether this coordinate is equal to another.
            Comparisions performs with tolerance value stored in
            <see cref="P:MapAround.Geometry.PlanimetryAlgorithms.Tolerance"/>.
            </summary>
            <param name="p">The MapAround.Geometry.ICoordinate implementor to compare with the current object</param>
        </member>
        <member name="M:MapAround.Geometry.ICoordinate.ExactEquals(MapAround.Geometry.ICoordinate)">
            <summary>
            Gets a value indicating whether this coordinate instance is equal to another.
            Comparisions performs exactly (used zero tolerance value).
            </summary>
            <param name="p">The MapAround.Geometry.ICoordinate implementor to compare with the current object</param>
        </member>
        <member name="M:MapAround.Geometry.ICoordinate.Translate(System.Double,System.Double)">
            <summary>
            Adds a values to X and Y coordinates.
            </summary>
            <param name="x">The value that will be added to X coordinate</param>
            <param name="y">The value that will be added to Y coordinate</param>
        </member>
        <member name="M:MapAround.Geometry.ICoordinate.Values">
            <summary>
            Gets an array containing coordinate values.
            </summary>
            <returns>An array containing coordinate values</returns>
        </member>
        <member name="M:MapAround.Geometry.ICoordinate.ReadOnlyCopy">
            <summary>
            Creates a read only copy of this object.
            </summary>
            <returns>A read only copy of this object</returns>
        </member>
        <member name="P:MapAround.Geometry.ICoordinate.X">
            <summary>
            Gets or sets an X coordinate. 
            </summary>
        </member>
        <member name="P:MapAround.Geometry.ICoordinate.Y">
            <summary>
            Gets or sets a Y coordinate. 
            </summary>
        </member>
        <member name="P:MapAround.Geometry.ICoordinate.IsReadOnly">
            <summary>
            Gets a value indicating whether this object is read obly. 
            </summary>
            <returns>true, if this object is read obly, false otherwise</returns>
        </member>
        <member name="T:MapAround.Geometry.Coordinate">
            <summary>
            Represents coordinates on a 2D plane.
            Instances of this class are used to determine geometries, 
            but are not geometries themselves.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.Coordinate.Equals(MapAround.Geometry.ICoordinate)">
            <summary>
            Gets a value indicating whether this coordinate is equal to another.
            Comparisions performs with tolerance value stored in
            <see cref="P:MapAround.Geometry.PlanimetryAlgorithms.Tolerance"/>.
            </summary>
            <param name="p">The MapAround.Geometry.ICoordinate implementor to compare with the current object</param>
        </member>
        <member name="M:MapAround.Geometry.Coordinate.ExactEquals(MapAround.Geometry.ICoordinate)">
            <summary>
            Gets a value indicating whether this coordinate instance is equal to another.
            Comparisions performs exactly (used zero tolerance value).
            </summary>
            <param name="p">The MapAround.Geometry.ICoordinate implementor to compare with the current object</param>
        </member>
        <member name="M:MapAround.Geometry.Coordinate.Equals(System.Object)">
            <summary>
            Derived from <see cref="T:System.Object"/>.
            </summary>
            <param name="o">The System.Object to compare with the current MapAround.Geometry.Coordinate</param>
        </member>
        <member name="M:MapAround.Geometry.Coordinate.GetHashCode">
            <summary>
            Derived from <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.Coordinate.op_Equality(MapAround.Geometry.Coordinate,MapAround.Geometry.ICoordinate)">
            <summary>
            Returns true if coordinates are equal (used tolerance value stored in
            <see cref="P:MapAround.Geometry.PlanimetryAlgorithms.Tolerance"/>).
            </summary>
        </member>
        <member name="M:MapAround.Geometry.Coordinate.op_Inequality(MapAround.Geometry.Coordinate,MapAround.Geometry.ICoordinate)">
            <summary>
            Returns true if coordinates are not equal (used tolerance value stored in
            <see cref="P:MapAround.Geometry.PlanimetryAlgorithms.Tolerance"/>).
            </summary>
        </member>
        <member name="M:MapAround.Geometry.Coordinate.Values">
            <summary>
            Gets an array containing coordinate values.
            </summary>
            <returns>An array containing coordinate values</returns>
        </member>
        <member name="M:MapAround.Geometry.Coordinate.ReadOnlyCopy">
            <summary>
            Creates a read only copy of this object.
            </summary>
            <returns>A read only copy of this object</returns>
        </member>
        <member name="M:MapAround.Geometry.Coordinate.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance</returns>  
        </member>
        <member name="M:MapAround.Geometry.Coordinate.Translate(System.Double,System.Double)">
            <summary>
            Adds a values to X and Y coordinates.
            </summary>
            <param name="x">The value that will be added to X coordinate</param>
            <param name="y">The value that will be added to Y coordinate</param>
        </member>
        <member name="M:MapAround.Geometry.Coordinate.GetBoundingRectangle">
            <summary>
            Calculates a minimal axis-aligned bounding rectangle.
            </summary>
            <returns>A bounding rectangle of this coordinate</returns>
        </member>
        <member name="M:MapAround.Geometry.Coordinate.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of <see cref="T:MapAround.Geometry.Coordinate"/>.
            </summary>
            <param name="x">An X coordinate value</param>
            <param name="y">A Y coordinate value</param>
        </member>
        <member name="M:MapAround.Geometry.Coordinate.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of <see cref="T:MapAround.Geometry.Coordinate"/>.
            </summary>
            <param name="coords">An array containing coordinate values</param>
        </member>
        <member name="P:MapAround.Geometry.Coordinate.X">
            <summary>
            Gets or sets an X coordinate. 
            </summary>
        </member>
        <member name="P:MapAround.Geometry.Coordinate.Y">
            <summary>
            Gets or sets a Y coordinate. 
            </summary>
        </member>
        <member name="P:MapAround.Geometry.Coordinate.IsReadOnly">
            <summary>
            Gets a value indicating whether this object is read obly. 
            This implementation always returns false.
            </summary>
            <returns>false</returns>
        </member>
        <member name="T:MapAround.Geometry.Coordinate3D">
            <summary>
            Represents coordinates on a 2D plane with z value.
            Instances of this class are used to determine geometries, 
            but are not geometries themselves.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.Coordinate3D.Equals(MapAround.Geometry.ICoordinate)">
            <summary>
            Gets a value indicating whether this coordinate is equal to another.
            Comparisions performs with tolerance value stored in
            <see cref="P:MapAround.Geometry.PlanimetryAlgorithms.Tolerance"/>.
            Z values are not compared.
            </summary>
            <param name="p">The MapAround.Geometry.ICoordinate implementor to compare with the current object</param>
        </member>
        <member name="M:MapAround.Geometry.Coordinate3D.ExactEquals(MapAround.Geometry.ICoordinate)">
            <summary>
            Gets a value indicating whether this coordinate instance is equal to another.
            Comparisions performs exactly (used zero tolerance value).
            Z values are not compared.
            </summary>
            <param name="p">The MapAround.Geometry.ICoordinate implementor to compare with the current object</param>
        </member>
        <member name="M:MapAround.Geometry.Coordinate3D.Equals(System.Object)">
            <summary>
            Derived from <see cref="T:System.Object"/>.
            </summary>
            <param name="o">The System.Object to compare with the current MapAround.Geometry.Coordinate</param>
        </member>
        <member name="M:MapAround.Geometry.Coordinate3D.GetHashCode">
            <summary>
            Derived from <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.Coordinate3D.op_Equality(MapAround.Geometry.Coordinate3D,MapAround.Geometry.ICoordinate)">
            <summary>
            Returns true if coordinates are equal (used tolerance value stored in
            <see cref="P:MapAround.Geometry.PlanimetryAlgorithms.Tolerance"/>).
            </summary>
        </member>
        <member name="M:MapAround.Geometry.Coordinate3D.op_Inequality(MapAround.Geometry.Coordinate3D,MapAround.Geometry.ICoordinate)">
            <summary>
            Returns true if coordinates are not equal (used tolerance value stored in
            <see cref="P:MapAround.Geometry.PlanimetryAlgorithms.Tolerance"/>).
            </summary>
        </member>
        <member name="M:MapAround.Geometry.Coordinate3D.Values">
            <summary>
            Gets an array containing coordinate values.
            </summary>
            <returns>An array containing coordinate values</returns>
        </member>
        <member name="M:MapAround.Geometry.Coordinate3D.ReadOnlyCopy">
            <summary>
            Creates a read only copy of this object.
            </summary>
            <returns>A read only copy of this object</returns>
        </member>
        <member name="M:MapAround.Geometry.Coordinate3D.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance</returns>  
        </member>
        <member name="M:MapAround.Geometry.Coordinate3D.Translate(System.Double,System.Double)">
            <summary>
            Adds a values to X and Y coordinates.
            </summary>
            <param name="x">The value that will be added to X coordinate</param>
            <param name="y">The value that will be added to Y coordinate</param>
        </member>
        <member name="M:MapAround.Geometry.Coordinate3D.GetBoundingRectangle">
            <summary>
            Calculates a minimal axis-aligned bounding rectangle.
            </summary>
            <returns>A bounding rectangle of this coordinate</returns>
        </member>
        <member name="M:MapAround.Geometry.Coordinate3D.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of <see cref="T:MapAround.Geometry.Coordinate3D"/>.
            </summary>
            <param name="x">An X coordinate value</param>
            <param name="y">A Y coordinate value</param>
        </member>
        <member name="M:MapAround.Geometry.Coordinate3D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of <see cref="T:MapAround.Geometry.Coordinate3D"/>.
            </summary>
            <param name="x">An X coordinate value</param>
            <param name="y">A Y coordinate value</param>
            <param name="z">A Z value</param>
        </member>
        <member name="M:MapAround.Geometry.Coordinate3D.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of <see cref="T:MapAround.Geometry.Coordinate3D"/>.
            </summary>
            <param name="coords">An array containing coordinate values</param>
        </member>
        <member name="P:MapAround.Geometry.Coordinate3D.X">
            <summary>
            Gets or sets an X coordinate. 
            </summary>
        </member>
        <member name="P:MapAround.Geometry.Coordinate3D.Y">
            <summary>
            Gets or sets a Y coordinate. 
            </summary>
        </member>
        <member name="P:MapAround.Geometry.Coordinate3D.Z">
            <summary>
            Gets or sets a Z value. 
            </summary>
        </member>
        <member name="P:MapAround.Geometry.Coordinate3D.IsReadOnly">
            <summary>
            Gets a value indicating whether this object is read obly. 
            This implementation always returns false.
            </summary>
            <returns>false</returns>
        </member>
        <member name="T:MapAround.Geometry.ReadOnlyCoordinate">
            <summary>
            Represents an immutable coordinates on a 2D plane.
            Instances of this class are used to determine geometries, 
            but are not geometries themselves.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.ReadOnlyCoordinate.Equals(MapAround.Geometry.ICoordinate)">
            <summary>
            Gets a value indicating whether this coordinate is equal to another.
            Comparisions performs with tolerance value stored in
            <see cref="P:MapAround.Geometry.PlanimetryAlgorithms.Tolerance"/>.
            </summary>
            <param name="p">The MapAround.Geometry.ICoordinate implementor to compare with the current object</param>
        </member>
        <member name="M:MapAround.Geometry.ReadOnlyCoordinate.ExactEquals(MapAround.Geometry.ICoordinate)">
            <summary>
            Gets a value indicating whether this coordinate instance is equal to another.
            Comparisions performs exactly (used zero tolerance value).
            </summary>
            <param name="p">The MapAround.Geometry.ICoordinate implementor to compare with the current object</param>
        </member>
        <member name="M:MapAround.Geometry.ReadOnlyCoordinate.Equals(System.Object)">
            <summary>
            Derived from <see cref="T:System.Object"/>.
            </summary>
            <param name="o">The System.Object to compare with the current MapAround.Geometry.PointD</param>
        </member>
        <member name="M:MapAround.Geometry.ReadOnlyCoordinate.GetHashCode">
            <summary>
            Derived from <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.ReadOnlyCoordinate.op_Equality(MapAround.Geometry.ReadOnlyCoordinate,MapAround.Geometry.ICoordinate)">
            <summary>
            Returns true if coordinates are equal (used tolerance value stored in
            <see cref="P:MapAround.Geometry.PlanimetryAlgorithms.Tolerance"/>).
            </summary>
        </member>
        <member name="M:MapAround.Geometry.ReadOnlyCoordinate.op_Inequality(MapAround.Geometry.ReadOnlyCoordinate,MapAround.Geometry.ICoordinate)">
            <summary>
            Returns true if coordinates are not equal (used tolerance value stored in
            <see cref="P:MapAround.Geometry.PlanimetryAlgorithms.Tolerance"/>).
            </summary>
        </member>
        <member name="M:MapAround.Geometry.ReadOnlyCoordinate.Values">
            <summary>
            Gets an array containing coordinate values.
            </summary>
            <returns>An array containing coordinate values</returns>
        </member>
        <member name="M:MapAround.Geometry.ReadOnlyCoordinate.ReadOnlyCopy">
            <summary>
            Creates a read only copy of this object.
            </summary>
            <returns>A read only copy of this object</returns>
        </member>
        <member name="M:MapAround.Geometry.ReadOnlyCoordinate.Clone">
            <summary>
            Creates a new Coordinate instance that is a changeable copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance</returns>  
        </member>
        <member name="M:MapAround.Geometry.ReadOnlyCoordinate.Translate(System.Double,System.Double)">
            <summary>
            Adds a values to X and Y coordinates.
            This implementation always throw an InvalidOperationException.
            </summary>
            <param name="x">The value that will be added to X coordinate</param>
            <param name="y">The value that will be added to Y coordinate</param>
            <exception cref="T:System.InvalidOperationException">Throws always</exception>
        </member>
        <member name="M:MapAround.Geometry.ReadOnlyCoordinate.GetBoundingRectangle">
            <summary>
            Calculates a minimal axis-aligned bounding rectangle.
            </summary>
            <returns>A bounding rectangle of this coordinate</returns>
        </member>
        <member name="M:MapAround.Geometry.ReadOnlyCoordinate.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of <see cref="T:MapAround.Geometry.ReadOnlyCoordinate"/>.
            </summary>
            <param name="x">An X coordinate value</param>
            <param name="y">A Y coordinate value</param>
        </member>
        <member name="M:MapAround.Geometry.ReadOnlyCoordinate.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of <see cref="T:MapAround.Geometry.ReadOnlyCoordinate"/>.
            </summary>
            <param name="coords">An array containing coordinate values</param>
        </member>
        <member name="P:MapAround.Geometry.ReadOnlyCoordinate.X">
            <summary>
            Gets or sets an X coordinate. 
            </summary>
        </member>
        <member name="P:MapAround.Geometry.ReadOnlyCoordinate.Y">
            <summary>
            Gets or sets a Y coordinate. 
            </summary>
        </member>
        <member name="P:MapAround.Geometry.ReadOnlyCoordinate.IsReadOnly">
            <summary>
            Gets a value indicating whether this object is read obly. 
            This implementation always returns true.
            </summary>
            <returns>true</returns>
        </member>
        <member name="T:MapAround.Geometry.ReadOnlyCoordinate3D">
            <summary>
            Represents an immutable coordinate on a 2D plane with Z value.
            Instances of this class are used to determine geometries, 
            but are not geometries themselves.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.ReadOnlyCoordinate3D.Equals(MapAround.Geometry.ICoordinate)">
            <summary>
            Gets a value indicating whether this coordinate is equal to another.
            Comparisions performs with tolerance value stored in
            <see cref="P:MapAround.Geometry.PlanimetryAlgorithms.Tolerance"/>.
            Z values are not compared.
            </summary>
            <param name="p">The MapAround.Geometry.ICoordinate implementor to compare with the current object</param>
        </member>
        <member name="M:MapAround.Geometry.ReadOnlyCoordinate3D.ExactEquals(MapAround.Geometry.ICoordinate)">
            <summary>
            Gets a value indicating whether this coordinate instance is equal to another.
            Comparisions performs exactly (used zero tolerance value).
            Z values are not compared.
            </summary>
            <param name="p">The MapAround.Geometry.ICoordinate implementor to compare with the current object</param>
        </member>
        <member name="M:MapAround.Geometry.ReadOnlyCoordinate3D.Equals(System.Object)">
            <summary>
            Derived from <see cref="T:System.Object"/>.
            </summary>
            <param name="o">The System.Object to compare with the current MapAround.Geometry.PointD</param>
        </member>
        <member name="M:MapAround.Geometry.ReadOnlyCoordinate3D.GetHashCode">
            <summary>
            Derived from <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.ReadOnlyCoordinate3D.op_Equality(MapAround.Geometry.ReadOnlyCoordinate3D,MapAround.Geometry.ICoordinate)">
            <summary>
            Returns true if coordinates are equal (used tolerance value stored in
            <see cref="P:MapAround.Geometry.PlanimetryAlgorithms.Tolerance"/>).
            </summary>
        </member>
        <member name="M:MapAround.Geometry.ReadOnlyCoordinate3D.op_Inequality(MapAround.Geometry.ReadOnlyCoordinate3D,MapAround.Geometry.ICoordinate)">
            <summary>
            Returns true if coordinates are not equal (used tolerance value stored in
            <see cref="P:MapAround.Geometry.PlanimetryAlgorithms.Tolerance"/>).
            </summary>
        </member>
        <member name="M:MapAround.Geometry.ReadOnlyCoordinate3D.Values">
            <summary>
            Gets an array containing coordinate values.
            </summary>
            <returns>An array containing coordinate values</returns>
        </member>
        <member name="M:MapAround.Geometry.ReadOnlyCoordinate3D.ReadOnlyCopy">
            <summary>
            Creates a read only copy of this object.
            </summary>
            <returns>A read only copy of this object</returns>
        </member>
        <member name="M:MapAround.Geometry.ReadOnlyCoordinate3D.Clone">
            <summary>
            Creates a new Coordinate3D instance that is a changeable copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance</returns>  
        </member>
        <member name="M:MapAround.Geometry.ReadOnlyCoordinate3D.Translate(System.Double,System.Double)">
            <summary>
            Adds a values to X and Y coordinates.
            This implementation always throw an InvalidOperationException.
            </summary>
            <param name="x">The value that will be added to X coordinate</param>
            <param name="y">The value that will be added to Y coordinate</param>
            <exception cref="T:System.InvalidOperationException">Throws always</exception>
        </member>
        <member name="M:MapAround.Geometry.ReadOnlyCoordinate3D.GetBoundingRectangle">
            <summary>
            Calculates a minimal axis-aligned bounding rectangle.
            </summary>
            <returns>A bounding rectangle of this coordinate</returns>
        </member>
        <member name="M:MapAround.Geometry.ReadOnlyCoordinate3D.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of <see cref="T:MapAround.Geometry.ReadOnlyCoordinate3D"/>.
            </summary>
            <param name="x">An X coordinate value</param>
            <param name="y">A Y coordinate value</param>
        </member>
        <member name="M:MapAround.Geometry.ReadOnlyCoordinate3D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of <see cref="T:MapAround.Geometry.ReadOnlyCoordinate3D"/>.
            </summary>
            <param name="x">An X coordinate value</param>
            <param name="y">A Y coordinate value</param>
            <param name="z">A Z value</param>
        </member>
        <member name="M:MapAround.Geometry.ReadOnlyCoordinate3D.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of <see cref="T:MapAround.Geometry.ReadOnlyCoordinate3D"/>.
            </summary>
            <param name="coords">An array containing coordinate values</param>
        </member>
        <member name="P:MapAround.Geometry.ReadOnlyCoordinate3D.X">
            <summary>
            Gets or sets an X coordinate. 
            </summary>
        </member>
        <member name="P:MapAround.Geometry.ReadOnlyCoordinate3D.Y">
            <summary>
            Gets or sets a Y coordinate. 
            </summary>
        </member>
        <member name="P:MapAround.Geometry.ReadOnlyCoordinate3D.Z">
            <summary>
            Gets or sets a Z value. 
            </summary>
        </member>
        <member name="P:MapAround.Geometry.ReadOnlyCoordinate3D.IsReadOnly">
            <summary>
            Gets a value indicating whether this object is read obly. 
            This implementation always returns true.
            </summary>
            <returns>true</returns>
        </member>
        <member name="T:MapAround.Geometry.ICoordinateFactory">
            <summary>
            Provides access to the properties and methods of object that 
            creates a new coordinate instances.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.ICoordinateFactory.Create(System.Double,System.Double)">
            <summary>
            Create a new instance of the object representing coordinate.
            </summary>
            <param name="x">An X coordinate value</param>
            <param name="y">A Y coordinate value</param>
            <returns>A new instance of the object representing coordinate</returns>
        </member>
        <member name="M:MapAround.Geometry.ICoordinateFactory.Create(System.Double[])">
            <summary>
            Create a new instance of the object representing coordinate.
            </summary>
            <param name="values">An array containing coordinate values</param>
            <returns>A new instance of the object representing coordinate</returns>
        </member>
        <member name="T:MapAround.Geometry.DefaultCoordinateFactory">
            <summary>
            Represents default coordinate factory.
            An instance of <see cref="T:MapAround.Geometry.DefaultCoordinateFactory"/>
            creates instances of <see cref="T:MapAround.Geometry.Coordinate"/>.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.DefaultCoordinateFactory.Create(System.Double,System.Double)">
            <summary>
            Create a new instance of the object representing coordinate.
            </summary>
            <param name="x">An X coordinate value</param>
            <param name="y">A Y coordinate value</param>
            <returns>A new instance of the object representing coordinate</returns>
        </member>
        <member name="M:MapAround.Geometry.DefaultCoordinateFactory.Create(System.Double[])">
            <summary>
            Create a new instance of the object representing coordinate.
            </summary>
            <param name="values">An array containing coordinate values</param>
            <returns>A new instance of the object representing coordinate</returns>
        </member>
        <member name="T:MapAround.Geometry.Coordinate3DFactory">
            <summary>
            Represents default coordinate factory.
            An instance of <see cref="T:MapAround.Geometry.Coordinate3DFactory"/>
            creates instances of <see cref="T:MapAround.Geometry.Coordinate3D"/>.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.Coordinate3DFactory.Create(System.Double,System.Double)">
            <summary>
            Create a new instance of the object representing coordinate.
            </summary>
            <param name="x">An X coordinate value</param>
            <param name="y">A Y coordinate value</param>
            <returns>A new instance of the object representing coordinate</returns>
        </member>
        <member name="M:MapAround.Geometry.Coordinate3DFactory.Create(System.Double[])">
            <summary>
            Create a new instance of the object representing coordinate.
            </summary>
            <param name="values">An array containing coordinate values</param>
            <returns>A new instance of the object representing coordinate</returns>
        </member>
        <member name="P:MapAround.Geometry.Coordinate3DFactory.DefaultZValue">
            <summary>
            Gets or sets a default Z value of creating coordinates.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.PlanimetryEnvironment">
            <summary>
            Represents an geometric environment.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.PlanimetryEnvironment.NewCoordinate(System.Double,System.Double)">
            <summary>
            Create a new instance of coordinate using a CoordinateFactory.
            </summary>
            <param name="x">An X coordinate value</param>
            <param name="y">A Y coordinate value</param>
            <returns>A new instance of the object representing coordinate</returns>
        </member>
        <member name="M:MapAround.Geometry.PlanimetryEnvironment.NewCoordinate(System.Double[])">
            <summary>
            Create a new instance of coordinate using a CoordinateFactory.
            </summary>
            <param name="values">An array containing coordinate values</param>
            <returns>A new instance of the object representing coordinate</returns>
        </member>
        <member name="P:MapAround.Geometry.PlanimetryEnvironment.CoordinateFactory">
            <summary>
            Gets or sets coordinate factory.
            Each thread have a separate instance of CoordinateFactory.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.NamespaceDoc">
            <summary>
            The MapAround.Geometry contains interfaces and 
            classes that represent geometries on  a 2D plane 
            and implement spatial algorithms.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.IGeometry">
            <summary>
            Provides access to members that describe 
            properties and behavior of all geometric objects.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.IGeometry.ExtractCoordinates">
            <summary>
            Extracts all coordinates that define this geometry.
            </summary>
            <returns>An array containing all coordinates defining this geometry</returns>
        </member>
        <member name="M:MapAround.Geometry.IGeometry.GetBoundingRectangle">
            <summary>
            Calculates a minimal axis-aligned bounding rectangle.
            </summary>
            <returns>
            A bounding rectangle of the geometry.
            </returns>
        </member>
        <member name="M:MapAround.Geometry.IGeometry.GetConvexHull">
            <summary>
            Calculates convex hull.
            </summary>
            <returns>A list containing a convex hull coordinate sequence</returns>
        </member>
        <member name="P:MapAround.Geometry.IGeometry.CoordinateCount">
            <summary>
            Gets a number of coordinate.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.IGeometry.Dimension">
            <summary>
            Gets a dimension.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.GeometryCollection">
            <summary>
            Represents a collection of geometries.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.GeometryCollection.ExtractCoordinates">
            <summary>
            Extracts all coordinates that define this geometry.
            </summary>
            <returns>An array containing all coordinates defining this geometry</returns>
        </member>
        <member name="M:MapAround.Geometry.GeometryCollection.GetBoundingRectangle">
            <summary>
            Calculates a minimal axis-aligned bounding rectangle.
            </summary>
            <returns>
            A bounding rectangle of the geometry.
            </returns>
        </member>
        <member name="M:MapAround.Geometry.GeometryCollection.GetConvexHull">
            <summary>
            Calculates convex hull.
            </summary>
            <returns>A list containing a convex hull coordinate sequence</returns>
        </member>
        <member name="M:MapAround.Geometry.GeometryCollection.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance</returns>
        </member>
        <member name="M:MapAround.Geometry.GeometryCollection.#ctor(System.Collections.Generic.IEnumerable{MapAround.Geometry.IGeometry})">
            <summary>
            Initializes a new instance of MapAround.Geometry.GeometryCollection.
            </summary>
            <param name="geometries">Enumerator of geometries</param>
        </member>
        <member name="M:MapAround.Geometry.GeometryCollection.#ctor">
            <summary>
            Initializes a new instance of MapAround.Geometry.GeometryCollection.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.GeometryCollection.CoordinateCount">
            <summary>
            Gets a number of coordinate.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.GeometryCollection.Dimension">
            <summary>
            Gets a dimension.
            This value is equal to the maximum dimension 
            of the geometry in the collection.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.GeometryCollection.IsHomogenous">
            <summary>
            Gets a value indicating whether a collection is homogenous.
            The collection is homogenous when the dimensions of all geometries 
            are equal.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.GeometryCollection.HasDifferentTypeInstances">
            <summary>
            Gets a value indicating whether a collection contains geometries 
            of different types.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.PointD">
            <summary>
            Represents a point on a euclidean plane.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.ISpatialRelative">
            <summary>
            Provides access to members that determine if a certain spatial 
            relationship (such as touching or overlapping) exists between 
            two geometries.
            <remarks>
            Methods compare two geometries and return a boolean indicating 
            whether or not the desired relationship exists.  Some relationships 
            require that the input geometries be of the same dimension while 
            other have more flexible dimensional constraints.  Most of the 
            methods are mutually exclusive Clementini operators.
            </remarks>
            </summary>
        </member>
        <member name="M:MapAround.Geometry.ISpatialRelative.Equals(MapAround.Geometry.ISpatialRelative)">
            <summary>
            Indicates if the two geometries are define the same set of points in the plane.
            </summary>
            <param name="other">The instance of MapAround.Geometry.ISpatialRelative to compute the equality</param>
            <returns>true, if the two geometries are define the same set of points in the plane, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.ISpatialRelative.Crosses(MapAround.Geometry.ISpatialRelative)">
            <summary>
            Indicates if the two geometries intersect in a geometry of lesser dimension.
            Both interiors should intersect exterior of another geometry.
            </summary>
            <param name="other">The instance of MapAround.Geometry.ISpatialRelative to compute the crosses predicate</param>
            <returns>true, if the two geometries intersect in a geometry of lesser dimension, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.ISpatialRelative.Disjoint(MapAround.Geometry.ISpatialRelative)">
            <summary>
            Indicates if the two geometries share no points in common.
            The intersection of interiors should be an empty set.
            </summary>
            <param name="other">The instance of MapAround.Geometry.ISpatialRelative to compute the disjoint predicate</param>
            <returns>true, if the two geometries share no points in common, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.ISpatialRelative.Overlaps(MapAround.Geometry.ISpatialRelative)">
            <summary>
            Indicates if the intersection of the two geometries has the same dimension as one of the input geometries.
            Both exterior should intersect interior of other geometry. Implementation should always return false in 
            the case of different dimensions.
            </summary>
            <param name="other">The instance of MapAround.Geometry.ISpatialRelative to compute the disjoint predicate</param>
            <returns>true, if the intersection of the two geometries has the same dimension as one of the input geometries, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.ISpatialRelative.Touches(MapAround.Geometry.ISpatialRelative)">
            <summary>
            Indicates if the boundaries of the geometries intersect.
            </summary>
            <param name="other">The instance of MapAround.Geometry.ISpatialRelative 
            to compute the touches predicate</param>
            <returns>true, if the boundaries of the geometries intersect, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.ISpatialRelative.Intersects(MapAround.Geometry.ISpatialRelative)">
            <summary>
            Indicates if the two geometries share at least one point in common.
            </summary>
            <param name="other">The instance of MapAround.Geometry.ISpatialRelative 
            to compute the intersects predicate</param>
            <returns>true, if the two geometries share at least one points in common, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.ISpatialRelative.Within(MapAround.Geometry.ISpatialRelative)">
            <summary>
            Indicates if this geometry is contained (is within) another geometry.
            </summary>
            <param name="other">The instance of MapAround.Geometry.ISpatialRelative 
            to compute the within predicate</param>
            <returns>true, if this geometry is contained another geometry, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.ISpatialRelative.Contains(MapAround.Geometry.ISpatialRelative)">
            <summary>
            Indicates if this geometry contains the other geometry.
            </summary>
            <param name="other">The instance of MapAround.Geometry.ISpatialRelative 
            to compute the contains predicate</param>
            <returns>true, if this geometry contains the other geometry, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.ISpatialRelative.Relate(MapAround.Geometry.ISpatialRelative,System.String)">
            <summary>
            Indicates if the defined relationship exists.
            </summary>
            <param name="other">The instance of MapAround.Geometry.ISpatialRelative 
            to compute the defined relation</param>
            <param name="template">Template of the intersection matrix that defines relation</param>
            <returns>true, if the defined relationship exists, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.PointD.Equals(MapAround.Geometry.PointD)">
            <summary>
            Gets a value indicating whether this point instance is equal to another.
            Comparisions performs with tolerance value stored in
            <see cref="P:MapAround.Geometry.PlanimetryAlgorithms.Tolerance"/>.
            </summary>
            <param name="p">The instance of MapAround.Geometry.PointD to compare with the current MapAround.Geometry.PointD</param>
        </member>
        <member name="M:MapAround.Geometry.PointD.ExactEquals(MapAround.Geometry.PointD)">
            <summary>
            Gets a value indicating whether this point instance is equal to another.
            Comparisions performs exactly (used zero tolerance value).
            </summary>
            <param name="p">The instance of MapAround.Geometry.PointD to compare with the current MapAround.Geometry.PointD</param>
        </member>
        <member name="M:MapAround.Geometry.PointD.Equals(System.Object)">
            <summary>
            Derived from <see cref="T:System.Object"/>.
            </summary>
            <param name="o">The System.Object to compare with the current MapAround.Geometry.PointD</param>
        </member>
        <member name="M:MapAround.Geometry.PointD.GetHashCode">
            <summary>
            Derived from <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.PointD.op_Equality(MapAround.Geometry.PointD,MapAround.Geometry.PointD)">
            <summary>
            Returns true if points are equal (used tolerance value stored in
            <see cref="P:MapAround.Geometry.PlanimetryAlgorithms.Tolerance"/>).
            </summary>
        </member>
        <member name="M:MapAround.Geometry.PointD.op_Inequality(MapAround.Geometry.PointD,MapAround.Geometry.PointD)">
            <summary>
            Returns true if points are not equal (used tolerance value stored in
            <see cref="P:MapAround.Geometry.PlanimetryAlgorithms.Tolerance"/>).
            </summary>
        </member>
        <member name="M:MapAround.Geometry.PointD.CoordsArray">
            <summary>
            Gets a double array containing coordinate values of the current MapAround.Geometry.PointD.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.PointD.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance</returns>        
        </member>
        <member name="M:MapAround.Geometry.PointD.ExtractCoordinates">
            <summary>
            Extracts all coordinates that define this geometry.
            </summary>
            <returns>An array containing all coordinates defining this geometry</returns>
        </member>
        <member name="M:MapAround.Geometry.PointD.Translate(System.Double,System.Double)">
            <summary>
            Adds a values to X and Y coordinates.
            </summary>
            <param name="x">The value that will be added to X coordinate</param>
            <param name="y">The value that will be added to Y coordinate</param>
        </member>
        <member name="M:MapAround.Geometry.PointD.GetConvexHull">
            <summary>
            Calculates convex hull.
            </summary>
            <returns>A list containing a convex hull coordinate sequence</returns>
        </member>
        <member name="M:MapAround.Geometry.PointD.Buffer(System.Double,System.Int32,System.Boolean)">
            <summary>
            Builds a buffer for this geometry.
            </summary>
            <param name="distance">The distance of the buffer</param>
            <param name="pointsPerCircle">The number of points in a polygon approximating a circle of a point object buffer</param>
            <param name="allowParallels">The value indicating whether the parallel computing will be used when possible</param>
            <returns>A geometry that represents a buffer</returns>
        </member>
        <member name="M:MapAround.Geometry.PointD.GetBoundingRectangle">
            <summary>
            Calculates a minimal axis-aligned bounding rectangle.
            </summary>
            <returns>
            A bounding rectangle of the geometry.
            </returns>
        </member>
        <member name="M:MapAround.Geometry.PointD.Intersection(MapAround.Geometry.IGeometry)">
            <summary>
            Computes an intersection of this geometry with another.
            </summary>
            <param name="other">The instance of MapAround.Geometry.IGeometry to compute the intersection</param>
            <returns>A collection of geometries that represents the intersection</returns>
        </member>
        <member name="M:MapAround.Geometry.PointD.Union(MapAround.Geometry.IGeometry)">
            <summary>
            Computes a union of this geometry with another.
            </summary>
            <param name="other">The instance of MapAround.Geometry.IGeometry to compute the union</param>
            <returns>A collection of geometries that represents the union</returns>
        </member>
        <member name="M:MapAround.Geometry.PointD.Difference(MapAround.Geometry.IGeometry)">
            <summary>
            Computes a difference of this geometry with another.
            </summary>
            <param name="other">The instance of MapAround.Geometry.IGeometry to compute the difference</param>
            <returns>A collection of geometries that represents the difference</returns>
        </member>
        <member name="M:MapAround.Geometry.PointD.SymmetricDifference(MapAround.Geometry.IGeometry)">
            <summary>
            Computes a symmetric difference of this geometry with another.
            </summary>
            <param name="other">The instance of MapAround.Geometry.IGeometry to compute the symmetric difference</param>
            <returns>A collection of geometries that represents the symmetric difference</returns>
        </member>
        <member name="M:MapAround.Geometry.PointD.MapAround#Geometry#ISpatialRelative#Equals(MapAround.Geometry.ISpatialRelative)">
            <summary>
            Indicates if the two geometries are define the same set of points in the plane.
            </summary>
            <param name="other">The instance of MapAround.Geometry.ISpatialRelative to compute the equality</param>
            <returns>true, if the two geometries are define the same set of points in the plane, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.PointD.Crosses(MapAround.Geometry.ISpatialRelative)">
            <summary>
            This method will always returns false.
            See <c>ISpatialRelative.Crosses</c> for details.
            </summary>
            <param name="other">The instance of MapAround.Geometry.ISpatialRelative to compute the crosses predicate</param>
            <returns>false</returns>
        </member>
        <member name="M:MapAround.Geometry.PointD.Disjoint(MapAround.Geometry.ISpatialRelative)">
            <summary>
            Indicates if the two geometries share no points in common.
            </summary>
            <param name="other">The instance of MapAround.Geometry.ISpatialRelative to compute the disjoint predicate</param>
            <returns>true, if the two geometries share no points in common, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.PointD.Overlaps(MapAround.Geometry.ISpatialRelative)">
            <summary>
            This method will always returns false.
            </summary>
            <param name="other">The instance of MapAround.Geometry.ISpatialRelative 
            to compute the overlaps predicate</param>
            <returns>false</returns>
        </member>
        <member name="M:MapAround.Geometry.PointD.Intersects(MapAround.Geometry.ISpatialRelative)">
            <summary>
            Indicates if the two geometries share at least one point in common.
            </summary>
            <param name="other">The instance of MapAround.Geometry.ISpatialRelative 
            to compute the intersects predicate</param>
            <returns>true, if the two geometries share at least one points in common, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.PointD.Touches(MapAround.Geometry.ISpatialRelative)">
            <summary>
            Indicates if the boundaries of the geometries intersect.
            </summary>
            <param name="other">The instance of MapAround.Geometry.ISpatialRelative 
            to compute the touches predicate</param>
            <returns>true, if the boundaries of the geometries intersect, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.PointD.Within(MapAround.Geometry.ISpatialRelative)">
            <summary>
            Indicates if this geometry is contained (is within) another geometry.
            </summary>
            <param name="other">The instance of MapAround.Geometry.ISpatialRelative 
            to compute the within predicate</param>
            <returns>true, if this geometry is contained another geometry, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.PointD.Contains(MapAround.Geometry.ISpatialRelative)">
            <summary>
            Indicates if this geometry contains the other geometry.
            </summary>
            <param name="other">The instance of MapAround.Geometry.ISpatialRelative 
            to compute the contains predicate</param>
            <returns>true, if this geometry contains the other geometry, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.PointD.Relate(MapAround.Geometry.ISpatialRelative,System.String)">
            <summary>
            Indicates if the defined relationship exists.
            </summary>
            <param name="other">The instance of MapAround.Geometry.ISpatialRelative 
            to compute the defined relation</param>
            <param name="template">Template of the intersection matrix that defines relation</param>
            <returns>true, if the defined relationship exists, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.PointD.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:MapAround.Geometry.PointD"/>.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.PointD.#ctor(System.Double,System.Double)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:MapAround.Geometry.PointD"/>.
            </summary>
            <param name="x">An X coordinate value</param>
            <param name="y">A Y coordinate value</param>
        </member>
        <member name="M:MapAround.Geometry.PointD.#ctor(MapAround.Geometry.ICoordinate)">
            <summary>
            Initializes a new instance of <see cref="T:MapAround.Geometry.PointD"/>.
            </summary>
            <param name="coord">An object representing coordinates</param>
        </member>
        <member name="M:MapAround.Geometry.PointD.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of <see cref="T:MapAround.Geometry.PointD"/>.
            </summary>
            <param name="coords">An array containing the coordinate values</param>
        </member>
        <member name="P:MapAround.Geometry.PointD.Coordinate">
            <summary>
            Gets or sets coordinate values.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.PointD.X">
            <summary>
            Gets or sets an X coordinate. 
            </summary>
        </member>
        <member name="P:MapAround.Geometry.PointD.Y">
            <summary>
            Gets or sets a Y coordinate. 
            </summary>
        </member>
        <member name="P:MapAround.Geometry.PointD.CoordinateCount">
            <summary>
            Gets a number of coordinate.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.PointD.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.PointD.Dimension">
            <summary>
            Gets a dimension.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.Segment">
            <summary>
            Represents a segment of the straight line.
            </summary>
            <remarks>
            Instances of this class defines a 2D straight line between a pair of 2D endpoints.
            </remarks>
        </member>
        <member name="F:MapAround.Geometry.Segment.V1">
            <summary>
            First endpoint.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.Segment.V2">
            <summary>
            Second endpoint.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.Segment.ExtractCoordinates">
            <summary>
            Extracts all coordinates that define this geometry.
            </summary>
            <returns>An array containing all coordinates defining this geometry</returns>
        </member>
        <member name="M:MapAround.Geometry.Segment.GetConvexHull">
            <summary>
            Calculates convex hull.
            </summary>
            <returns>A list containing a convex hull coordinate sequence</returns>
        </member>
        <member name="M:MapAround.Geometry.Segment.Length">
            <summary>
            Calculates a length of this segment (euclidean distance between endpoints).
            </summary>
        </member>
        <member name="M:MapAround.Geometry.Segment.Equals(MapAround.Geometry.Segment)">
            <summary>
            Indicates if this instance of MapAround.Geometry.Segment is equal to another.
            Comparision performs with the tolerance value stored in <see cref="P:MapAround.Geometry.PlanimetryAlgorithms.Tolerance"/>.
            </summary>
            <param name="s">The instance of MapAround.Geometry.Segment to compare</param>
        </member>
        <member name="M:MapAround.Geometry.Segment.ExactEquals(MapAround.Geometry.Segment)">
            <summary>
            Indicates if this instance of MapAround.Geometry.Segment is equal to another.
            Comparision performs with the zero tolerance value.
            </summary>
            <param name="s">The instance of MapAround.Geometry.Segment to compare</param>
        </member>
        <member name="M:MapAround.Geometry.Segment.GetBoundingRectangle">
            <summary>
            Calculates a minimal axis-aligned bounding rectangle.
            </summary>
            <returns>
            A bounding rectangle of the geometry.
            </returns>
        </member>
        <member name="M:MapAround.Geometry.Segment.GetHashCode">
            <summary>
            Derived from <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.Segment.Equals(System.Object)">
            <summary>
            Derived from <see cref="T:System.Object"/>.
            </summary>
            <param name="o">The instance of the System.Object to compare</param>
        </member>
        <member name="M:MapAround.Geometry.Segment.op_Equality(MapAround.Geometry.Segment,MapAround.Geometry.Segment)">
            <summary>
            Returns true if segments are equal (used tolerance value stored in
            <see cref="P:MapAround.Geometry.PlanimetryAlgorithms.Tolerance"/>).
            </summary>
        </member>
        <member name="M:MapAround.Geometry.Segment.op_Inequality(MapAround.Geometry.Segment,MapAround.Geometry.Segment)">
            <summary>
            Returns true if segments are not equal (used tolerance value stored in
            <see cref="P:MapAround.Geometry.PlanimetryAlgorithms.Tolerance"/>).
            </summary>
        </member>
        <member name="M:MapAround.Geometry.Segment.IsSingular">
            <summary>
            Indicates if this segment is singular (have equal endpoints).
            Used tolerance value stored in <see cref="P:MapAround.Geometry.PlanimetryAlgorithms.Tolerance"/>.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.Segment.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance</returns>
        </member>
        <member name="M:MapAround.Geometry.Segment.Center">
            <summary>
            Calculates a coordinate of the center point of this segment.
            </summary>
            <returns>A coordinate of the center point of this segment</returns>
        </member>
        <member name="M:MapAround.Geometry.Segment.#ctor(MapAround.Geometry.ICoordinate,MapAround.Geometry.ICoordinate)">
            <summary>
            Initializes a new instance of <see cref="T:MapAround.Geometry.Segment"/>.
            </summary>
            <param name="p1">First endpoint</param>
            <param name="p2">Second endpoint</param>
        </member>
        <member name="M:MapAround.Geometry.Segment.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of  <see cref="T:MapAround.Geometry.Segment"/>.
            </summary>
            <param name="x1">An X coordinate of first endpoint</param>
            <param name="y1">A Y coordinate of first endpoint</param>
            <param name="x2">An X coordinate of second endpoint</param>
            <param name="y2">A Y coordinate of second endpoint</param>
        </member>
        <member name="P:MapAround.Geometry.Segment.CoordinateCount">
            <summary>
            Gets a number of coordinate.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.Segment.Dimension">
            <summary>
            Gets a dimension.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.MultiPoint">
            <summary>
            An ordered collection of points.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.MultiPoint.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance</returns>
        </member>
        <member name="M:MapAround.Geometry.MultiPoint.ExtractCoordinates">
            <summary>
            Extracts all coordinates that define this geometry.
            </summary>
            <returns>An array containing all coordinates defining this geometry</returns>
        </member>
        <member name="M:MapAround.Geometry.MultiPoint.GetConvexHull">
            <summary>
            Calculates convex hull.
            </summary>
            <returns>A list containing a convex hull coordinate sequence</returns>
        </member>
        <member name="M:MapAround.Geometry.MultiPoint.GetBoundingRectangle">
            <summary>
            Calculates a minimal axis-aligned bounding rectangle.
            </summary>
            <returns>
            A bounding rectangle of the geometry.
            </returns>
        </member>
        <member name="M:MapAround.Geometry.MultiPoint.Intersection(MapAround.Geometry.IGeometry)">
            <summary>
            Computes an intersection of this geometry with another.
            </summary>
            <param name="other">The instance of MapAround.Geometry.IGeometry to compute the intersection</param>
            <returns>A collection of geometries that represents the intersection</returns>
        </member>
        <member name="M:MapAround.Geometry.MultiPoint.Union(MapAround.Geometry.IGeometry)">
            <summary>
            Computes a union of this geometry with another.
            </summary>
            <param name="other">The instance of MapAround.Geometry.IGeometry to compute the union</param>
            <returns>A collection of geometries that represents the union</returns>
        </member>
        <member name="M:MapAround.Geometry.MultiPoint.Difference(MapAround.Geometry.IGeometry)">
            <summary>
            Computes a difference of this geometry with another.
            </summary>
            <param name="other">The instance of MapAround.Geometry.IGeometry to compute the difference</param>
            <returns>A collection of geometries that represents the difference</returns>
        </member>
        <member name="M:MapAround.Geometry.MultiPoint.SymmetricDifference(MapAround.Geometry.IGeometry)">
            <summary>
            Computes a symmetric difference of this geometry with another.
            </summary>
            <param name="other">The instance of MapAround.Geometry.IGeometry to compute the symmetric difference</param>
            <returns>A collection of geometries that represents the symmetric difference</returns>
        </member>
        <member name="M:MapAround.Geometry.MultiPoint.MapAround#Geometry#ISpatialRelative#Equals(MapAround.Geometry.ISpatialRelative)">
            <summary>
            Indicates if the two geometries are define the same set of points in the plane.
            </summary>
            <param name="other">The instance of MapAround.Geometry.ISpatialRelative to compute the equality</param>
            <returns>true, if the two geometries are define the same set of points in the plane, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.MultiPoint.Crosses(MapAround.Geometry.ISpatialRelative)">
            <summary>
            This method will always returns false.
            See <c>ISpatialRelative.Crosses</c> for details.
            </summary>
            <param name="other">The instance of MapAround.Geometry.ISpatialRelative to compute the crosses predicate</param>
            <returns>false</returns>
        </member>
        <member name="M:MapAround.Geometry.MultiPoint.Disjoint(MapAround.Geometry.ISpatialRelative)">
            <summary>
            Indicates if the two geometries share no points in common.
            </summary>
            <param name="other">The instance of MapAround.Geometry.ISpatialRelative to compute the disjoint predicate</param>
            <returns>true, if the two geometries share no points in common, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.MultiPoint.Overlaps(MapAround.Geometry.ISpatialRelative)">
            <summary>
            Indicates if the intersection of the two geometries has the same dimension as one of the input geometries.
            See <c>ISpatialRelative.Overlaps</c> for details.
            </summary>
            <param name="other">The instance of MapAround.Geometry.ISpatialRelative to compute the disjoint predicate</param>
            <returns>true, if the intersection of the two geometries has the same dimension as one of the input geometries, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.MultiPoint.Intersects(MapAround.Geometry.ISpatialRelative)">
            <summary>
            Indicates if the two geometries share at least one point in common.
            </summary>
            <param name="other">The instance of MapAround.Geometry.ISpatialRelative 
            to compute the intersects predicate</param>
            <returns>true, if the two geometries share at least one points in common, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.MultiPoint.Touches(MapAround.Geometry.ISpatialRelative)">
            <summary>
            Indicates if the boundaries of the geometries intersect.
            </summary>
            <param name="other">The instance of MapAround.Geometry.ISpatialRelative 
            to compute the touches predicate</param>
            <returns>true, if the boundaries of the geometries intersect, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.MultiPoint.Within(MapAround.Geometry.ISpatialRelative)">
            <summary>
            Indicates if this geometry is contained (is within) another geometry.
            </summary>
            <param name="other">The instance of MapAround.Geometry.ISpatialRelative 
            to compute the within predicate</param>
            <returns>true, if this geometry is contained another geometry, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.MultiPoint.Contains(MapAround.Geometry.ISpatialRelative)">
            <summary>
            Indicates if this geometry contains the other geometry.
            </summary>
            <param name="other">The instance of MapAround.Geometry.ISpatialRelative 
            to compute the contains predicate</param>
            <returns>true, if this geometry contains the other geometry, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.MultiPoint.Relate(MapAround.Geometry.ISpatialRelative,System.String)">
            <summary>
            Indicates if the defined relationship exists.
            </summary>
            <param name="other">The instance of MapAround.Geometry.ISpatialRelative 
            to compute the defined relation</param>
            <param name="template">Template of the intersection matrix that defines relation</param>
            <returns>true, if the defined relationship exists, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.MultiPoint.SnapToGrid(MapAround.Geometry.ICoordinate,System.Double)">
            <summary>
            Snaps all coordinates of this geometry to grid nodes.
            Coordinates can be changed to a value less than cellSize / 2.
            </summary>
            <param name="origin">The origin of the grid</param>
            <param name="cellSize">Cell size of the grid</param>
        </member>
        <member name="M:MapAround.Geometry.MultiPoint.#ctor(System.Collections.Generic.IEnumerable{MapAround.Geometry.ICoordinate})">
            <summary>
            Initializes a new instance of <see cref="T:MapAround.Geometry.MultiPoint"/>.
            </summary>
            <param name="coordinates">Enumerator of points coordinates</param>
        </member>
        <member name="M:MapAround.Geometry.MultiPoint.#ctor(System.Collections.Generic.IEnumerable{System.Double[]})">
            <summary>
            Initializes a new instance of <see cref="T:MapAround.Geometry.MultiPoint"/>.
            </summary>
            <param name="points">Enumerator of coordinate arrays</param>
        </member>
        <member name="M:MapAround.Geometry.MultiPoint.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:MapAround.Geometry.MultiPoint"/>.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.MultiPoint.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.MultiPoint.Points">
            <summary>
            Gets or sets a list of coordinates of points 
            in the collection.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.MultiPoint.Dimension">
            <summary>
            Gets a dimension.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.MultiPoint.CoordinateCount">
            <summary>
            Gets a number of coordinate.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.Contour">
            <summary>
            Represents closed sequence of connected segments
            </summary>
        </member>
        <member name="M:MapAround.Geometry.Contour.ExtractCoordinates">
            <summary>
            Extracts all coordinates that define this geometry.
            </summary>
            <returns>An array containing all coordinates defining this geometry</returns>
        </member>
        <member name="M:MapAround.Geometry.Contour.GetConvexHull">
            <summary>
            Calculates convex hull.
            </summary>
            <returns>A list containing a convex hull coordinate sequence</returns>
        </member>
        <member name="F:MapAround.Geometry.Contour.Layout">
            <summary>
            Contour layout in polygon.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.Contour.Length">
            <summary>
            Calculates a length of this contour.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.Contour.GetBoundingRectangle">
            <summary>
            Calculates a minimal axis-aligned bounding rectangle.
            </summary>
            <returns>
            A bounding rectangle of the geometry.
            </returns>
        </member>
        <member name="M:MapAround.Geometry.Contour.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance</returns>
        </member>
        <member name="M:MapAround.Geometry.Contour.SimpleArea">
            <summary>
            Calculates a simple area of contour.
            Self intersections may lead to incorrect results.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.Contour.Weed(System.Double)">
            <summary>
            Generalizes this contour.
            <para>
            The Douglas-Pecker algorithm implementation. 
            Points discarded if they are closer than epsilon 
            from the direction specified neighboring points.
            </para>
            </summary>
        </member>
        <member name="M:MapAround.Geometry.Contour.ReduceSegments(System.Double)">
            <summary>
            Removes all segments with a length less than the 
            specified minimum length. Method does not guarantee 
            preservation of topology.
            </summary>
            <param name="minLength">The minimum length value</param>
        </member>
        <member name="M:MapAround.Geometry.Contour.AppendMonotoneChains(System.Collections.Generic.IList{MapAround.Geometry.MonotoneChain})">
            <summary>
            Computes a monotone chains of this contour and then 
            adds it to the specified list.
            </summary>
            <remarks>
            Singular segments can not be included in monotone chains and will throw an exception.
            The Labels collection contains segment indices.
            </remarks>
            <param name="chains">A list to adds monotone chains</param>
        </member>
        <member name="M:MapAround.Geometry.Contour.GetMonotoneChains">
            <summary>
            Computes a monotone chains of this contour.
            </summary>
            <remarks>
            Singular segments can not be included in monotone chains and will throw an exception.
            The Labels collection contains segment indices.
            </remarks>
            <returns>A list containing monotone chains</returns>
        </member>
        <member name="M:MapAround.Geometry.Contour.HasSelfIntersections">
            <summary>
            Indicates whether a contour has self-intersections.
            </summary>
            <remarks>
            Contour has self-intersections if
            1. Any non-adjacent segments intersect.
            2. Any contour segments intersect and their intersection is a segment.
            </remarks>
            <returns>true, if a contour has self-intersections, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.Contour.GetSelfIntersectionPoint">
            <summary>
            Compuset a self-intersection point.
            </summary>
            <remarks>
            Contour has self-intersections if
            1. Intersect any non-adjacent segments.
            2. Intersect any contour segments and their intersection is a segment.
            </remarks>
            <returns>Coordinate of a self-intersection point or null</returns>
        </member>
        <member name="M:MapAround.Geometry.Contour.GetOrientation">
            <summary>
            Computes orientation of this contour.
            </summary>
            <returns>Orientation of this contour</returns>
        </member>
        <member name="M:MapAround.Geometry.Contour.SignedArea">
            <summary>
            Computes a signed area of this contour.
            </summary>
            <remarks>
            If the contours of the polygon do not intersect, and points 
            oriented clockwise for shells (counter clockwise for holes), 
            the sum of signed areas is equal to the polygon area.
            </remarks>
        </member>
        <member name="M:MapAround.Geometry.Contour.PointLiesInside(MapAround.Geometry.ICoordinate)">
            <summary>
            Indicates if the point lies on the area bounded by the contour.
            </summary>
            <param name="coordinate">Coordinate of point</param>
            <returns>true, if the point lies on the area bounded by the contour, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.Contour.PointLiesOn(MapAround.Geometry.ICoordinate)">
            <summary>
            Indicates if the point lies on one of the contour segments.
            </summary>
            <param name="point">Coordinate of point</param>
            <returns>true, if the point lies on one of the contour segments, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.Contour.VerticesCentroid">
            <summary>
            Calculates the center of mass of the vertices of the contour.
            </summary>
            <remarks>
            Masses of vertices are set equal.
            </remarks>
        </member>
        <member name="M:MapAround.Geometry.Contour.EdgesCentroid">
            <summary>
            Calculates the center of mass of the segments of the contour.
            </summary>
            <remarks>
            The density of edges is identical.
            </remarks>
        </member>
        <member name="M:MapAround.Geometry.Contour.Reverse">
            <summary>
            Reverses the sequence of vertices.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.Contour.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:MapAround.Geometry.Contour"/>.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.Contour.#ctor(System.Collections.Generic.IEnumerable{MapAround.Geometry.ICoordinate})">
            <summary>
            Initializes a new instance of <see cref="T:MapAround.Geometry.Contour"/>.
            </summary>
            <param name="vertices">Enumerator of vertices coordinates</param>
        </member>
        <member name="M:MapAround.Geometry.Contour.#ctor(System.Collections.Generic.IEnumerable{System.Double[]})">
            <summary>
            Initializes a new instance of  <see cref="T:MapAround.Geometry.Contour"/>.
            </summary>
            <param name="vertices">Enumerator of the vertices coordinate arrays</param>
        </member>
        <member name="P:MapAround.Geometry.Contour.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.Contour.Vertices">
            <summary>
            Gets or sets a list of vertices coordinates.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.Contour.CoordinateCount">
            <summary>
            Gets a number of coordinate.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.Contour.Dimension">
            <summary>
            Gets a dimension.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.Contour.ContourLayout">
            <summary>
            Contour layout in polygon.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.Contour.ContourLayout.Unknown">
            <summary>
            The layout of contour is unknown.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.Contour.ContourLayout.External">
            <summary>
            Contour is the shell.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.Contour.ContourLayout.Internal">
            <summary>
            Contour is the hole.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.Contour.ContourLayout.Intersect">
            <summary>
            Contour has self intersections or intersects another contours.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.Contour.Orientation">
            <summary>
            Contour orientation.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.Contour.Orientation.Undefined">
            <summary>
            The orientation is unknown.
            This value used for self-intersected contours.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.Contour.Orientation.CCW">
            <summary>
            Contour oriented counter clockwise.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.Contour.Orientation.CW">
            <summary>
            Contour oriented clockwise.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.Polygon">
            <summary>
            Represents a polygon on a 2D plane.
            </summary>
            <remarks>
            Set of closed line paths (contours) define a polygon boundary.
            Polygon is the locus of points drawn from which a ray crosses 
            the boundary an odd number of times. This definition does not 
            require connectivity in contrast to the definition providing 
            by OGC.
            </remarks>
        </member>
        <member name="M:MapAround.Geometry.Polygon.ExtractCoordinates">
            <summary>
            Extracts all coordinates that define this geometry.
            </summary>
            <returns>An array containing all coordinates defining this geometry</returns>
        </member>
        <member name="M:MapAround.Geometry.Polygon.GetConvexHull">
            <summary>
            Calculates convex hull.
            </summary>
            <returns>A list containing a convex hull coordinate sequence</returns>
        </member>
        <member name="M:MapAround.Geometry.Polygon.Buffer(System.Double,System.Int32,System.Boolean)">
            <summary>
            Builds a buffer for this geometry.
            </summary>
            <param name="distance">The distance of the buffer</param>
            <param name="pointsPerCircle">The number of points in a polygon approximating a circle of a point object buffer</param>
            <param name="allowParallels">The value indicating whether the parallel computing will be used when possible</param>
            <returns>A geometry that represents a buffer</returns>
        </member>
        <member name="M:MapAround.Geometry.Polygon.Perimeter">
            <summary>
            Calculates the length of the polygon boundary.
            </summary>
            <returns>The length of the polygon boundary</returns>
        </member>
        <member name="M:MapAround.Geometry.Polygon.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance</returns>
        </member>
        <member name="M:MapAround.Geometry.Polygon.Weed(System.Double)">
            <summary>
            Generalizes this polygon.
            <para>
            The Douglas-Pecker algorithm implementation. 
            Points, that are closer than epsilon from the 
            direction specified neighboring points  - are 
            discarded.
            </para>
            </summary>
        </member>
        <member name="M:MapAround.Geometry.Polygon.SnapVertices(MapAround.Geometry.ICoordinate,System.Double)">
            <summary>
            Snaps coordinates of all vertices to grid nodes.
            Coordinates can be changed to a value less than cellSize / 2.
            </summary>
            <param name="origin">The origin of the grid</param>
            <param name="cellSize">Cell size of the grid</param>
        </member>
        <member name="M:MapAround.Geometry.Polygon.#ctor(System.Collections.Generic.IEnumerable{MapAround.Geometry.Contour})">
            <summary>
            Initializes a new instance of <see cref="T:MapAround.Geometry.Polygon"/>.
            </summary>
            <param name="contours">Enumerator of contours</param>
        </member>
        <member name="M:MapAround.Geometry.Polygon.Area">
            <summary>
            Calculates an area of this polygon.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.Polygon.ReduceSegments(System.Double)">
            <summary>
            Removes all segments with a length less than the 
            specified minimum length. Method does not guarantee 
            preservation of topology.
            </summary>
            <param name="minLength">The minimum length value</param>
        </member>
        <member name="M:MapAround.Geometry.Polygon.SplitToConnectedDomains">
            <summary>
            Splits this polygon to connected domains.
            Each domain is representing by the polygon with 
            one exterior and many interior contours.
            </summary>
            <returns>List of polygons representing connected domains</returns>
        </member>
        <member name="M:MapAround.Geometry.Polygon.Simplify">
            <summary>
            Normalizes the topology of the polygon.
            Contours are transformed to not intersected. 
            Orientations are set clockwise for holes and 
            counter clockwise for shells.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.Polygon.IsOGCValid">
            <summary>
            Checks the topology for validity in compliance with the OGC.
            First contour in list is external, the other - internal.
            Not connected domains considered invalid.
            <remarks>
            The MapAround.Geometry.Polygon class represents a 2D domain,
            that may not be connected. However, the OGC standards require 
            connectivity. To obtain such polygons you need to use a 
            MapAround.Geometry.Polygon.SplitToConnectedDomains method.
            </remarks>
            </summary>
            <returns>true, if this polygon is valid, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.Polygon.GetOGCValidationError">
            <summary>
            Calculates the error in the polygon definition in compliance with the OGC.
            </summary>
            <returns>Aa object representing the error or null</returns>
        </member>
        <member name="M:MapAround.Geometry.Polygon.Intersection(MapAround.Geometry.IGeometry)">
            <summary>
            Computes an intersection of this geometry with another.
            </summary>
            <param name="other">The instance of MapAround.Geometry.IGeometry to compute the intersection</param>
            <returns>A collection of geometries that represents the intersection</returns>
        </member>
        <member name="M:MapAround.Geometry.Polygon.Union(MapAround.Geometry.IGeometry)">
            <summary>
            Computes a union of this geometry with another.
            </summary>
            <param name="other">The instance of MapAround.Geometry.IGeometry to compute the union</param>
            <returns>A collection of geometries that represents the union</returns>
        </member>
        <member name="M:MapAround.Geometry.Polygon.Difference(MapAround.Geometry.IGeometry)">
            <summary>
            Computes a difference of this geometry with another.
            </summary>
            <param name="other">The instance of MapAround.Geometry.IGeometry to compute the difference</param>
            <returns>A collection of geometries that represents the difference</returns>
        </member>
        <member name="M:MapAround.Geometry.Polygon.SymmetricDifference(MapAround.Geometry.IGeometry)">
            <summary>
            Computes a symmetric difference of this geometry with another.
            </summary>
            <param name="other">The instance of MapAround.Geometry.IGeometry to compute the symmetric difference</param>
            <returns>A collection of geometries that represents the symmetric difference</returns>
        </member>
        <member name="M:MapAround.Geometry.Polygon.GetSimplifiedContours">
            <summary>
            Computes the contours of the topologically normalized polygon.
            </summary>
            <remarks>
            Contours that are not intersected. 
            Orientations are set clockwise for holes and 
            counter clockwise for shells.
            Sections of the boundary repeated an even number of times will be removed.
            </remarks>
            <returns>A list containing contours of the topologically normalized polygon</returns>
        </member>
        <member name="M:MapAround.Geometry.Polygon.ContainsPoint(MapAround.Geometry.ICoordinate,System.Collections.Generic.IList{MapAround.Geometry.Contour})">
            <summary>
            Indicates if the point lies on the area bounded by the specified contours.
            </summary>
            <param name="point">Coordinate of point</param>
            <param name="contours">A list of contours</param>
            <returns>true, if the point lies on the area bounded by the contours, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.Polygon.GetBoundingRectangle">
            <summary>
            Calculates a minimal axis-aligned bounding rectangle.
            </summary>
            <returns>
            A bounding rectangle of the geometry.
            </returns>
        </member>
        <member name="M:MapAround.Geometry.Polygon.ContainsPoint(MapAround.Geometry.ICoordinate)">
            <summary>
            Indicates if the point lies on the area bounded by 
            the polygon boundary.
            </summary>
            <param name="point">Coordinate of point</param>
            <returns>true, if the point lies on the area bounded by 
            the polygon boundary, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.Polygon.PointOnSurface">
            <summary>
            Calculates the point located on this polygon.
            </summary>
            <returns>Coordinate of point located on this polygon</returns>
        </member>
        <member name="M:MapAround.Geometry.Polygon.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:MapAround.Geometry.Polygon"/>.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.Polygon.#ctor(System.Collections.Generic.IEnumerable{MapAround.Geometry.ICoordinate})">
            <summary>
            Initializes a new instance of  <see cref="T:MapAround.Geometry.Polygon"/> 
            with single contour.
            </summary>
            <param name="vertices">Enumerator of vertices</param>
        </member>
        <member name="M:MapAround.Geometry.Polygon.MapAround#Geometry#ISpatialRelative#Equals(MapAround.Geometry.ISpatialRelative)">
            <summary>
            Indicates if the two geometries are define the same set of points in the plane.
            </summary>
            <param name="other">The instance of MapAround.Geometry.ISpatialRelative to compute the equality</param>
            <returns>true, if the two geometries are define the same set of points in the plane, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.Polygon.Crosses(MapAround.Geometry.ISpatialRelative)">
            <summary>
            Indicates if the two geometries intersect in a geometry of lesser dimension.
            See <c>ISpatialRelative.Crosses</c> for details.
            </summary>
            <param name="other">The instance of MapAround.Geometry.ISpatialRelative to compute the crosses predicate</param>
            <returns>true, if the two geometries intersect in a geometry of lesser dimension, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.Polygon.Disjoint(MapAround.Geometry.ISpatialRelative)">
            <summary>
            Indicates if the two geometries share no points in common.
            </summary>
            <param name="other">The instance of MapAround.Geometry.ISpatialRelative to compute the disjoint predicate</param>
            <returns>true, if the two geometries share no points in common, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.Polygon.Overlaps(MapAround.Geometry.ISpatialRelative)">
            <summary>
            Indicates if the intersection of the two geometries has the same dimension as one of the input geometries.
            See <c>ISpatialRelative.Overlaps</c> for details.
            </summary>
            <param name="other">The instance of MapAround.Geometry.ISpatialRelative to compute the disjoint predicate</param>
            <returns>true, if the intersection of the two geometries has the same dimension as one of the input geometries, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.Polygon.Intersects(MapAround.Geometry.ISpatialRelative)">
            <summary>
            Indicates if the two geometries share at least one point in common.
            </summary>
            <param name="other">The instance of MapAround.Geometry.ISpatialRelative 
            to compute the intersects predicate</param>
            <returns>true, if the two geometries share at least one points in common, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.Polygon.Touches(MapAround.Geometry.ISpatialRelative)">
            <summary>
            Indicates if the boundaries of the geometries intersect.
            </summary>
            <param name="other">The instance of MapAround.Geometry.ISpatialRelative 
            to compute the touches predicate</param>
            <returns>true, if the boundaries of the geometries intersect, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.Polygon.Within(MapAround.Geometry.ISpatialRelative)">
            <summary>
            Indicates if this geometry is contained (is within) another geometry.
            </summary>
            <param name="other">The instance of MapAround.Geometry.ISpatialRelative 
            to compute the within predicate</param>
            <returns>true, if this geometry is contained another geometry, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.Polygon.Contains(MapAround.Geometry.ISpatialRelative)">
            <summary>
            Indicates if this geometry contains the other geometry.
            </summary>
            <param name="other">The instance of MapAround.Geometry.ISpatialRelative 
            to compute the contains predicate</param>
            <returns>true, if this geometry contains the other geometry, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.Polygon.Relate(MapAround.Geometry.ISpatialRelative,System.String)">
            <summary>
            Indicates if the defined relationship exists.
            </summary>
            <param name="other">The instance of MapAround.Geometry.ISpatialRelative 
            to compute the defined relation</param>
            <param name="template">Template of the intersection matrix that defines relation</param>
            <returns>true, if the defined relationship exists, false otherwise</returns>
        </member>
        <member name="P:MapAround.Geometry.Polygon.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.Polygon.Contours">
            <summary>
            Gets or sets an object that represents a 
            list of polygon contours.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.Polygon.CoordinateCount">
            <summary>
            Gets a number of coordinate.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.Polygon.Dimension">
            <summary>
            Gets a dimension.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.Polygon.ContourLayoutElement">
            <summary>
            Element of the structure of the contour layout in polygons.
            Used by SplitToConnectedDomains method.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.InvalidityCase">
            <summary>
            Topology invalidity case.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.InvalidityCase.RepeatedPoints">
            <summary>
            The definition contains repeated points.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.InvalidityCase.SelfIntersection">
            <summary>
            The definition contains invalid self-intersection.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.InvalidityCase.WrongOrientation">
            <summary>
            Contour has wrong orientation.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.InvalidityCase.HoleOutOfShell">
            <summary>
            The hole contour is exceeds the shell contour.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.InvalidityCase.HolesAreIntersected">
            <summary>
            The hole contours have intersection. 
            </summary>
        </member>
        <member name="F:MapAround.Geometry.InvalidityCase.WrongMutualTouch">
            <summary>
            Contours have wrong mutual touch.
            Touching more than a single point or a common segment.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.InvalidityCase.WrongSelfTouch">
            <summary>
            Line path have a self-intersection or a common segment.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.InvalidityCase.MutualTouchesViolateLinearConnectivity">
            <summary>
            Mutual touches of contours violate linear connectivity.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.ValidationError">
            <summary>
            Represents an error in the definition of object .
            </summary>
        </member>
        <member name="M:MapAround.Geometry.ValidationError.#ctor(MapAround.Geometry.InvalidityCase,MapAround.Geometry.ICoordinate,System.Int32)">
            <summary>
            Initializes a new instance of MapAround.Geometry.ValidationError.
            </summary>
            <param name="invCase">Invalidity case</param>
            <param name="location">Position of an error</param>
            <param name="sequenceIndex">An index of the erroneous coordinate sequence</param>
        </member>
        <member name="P:MapAround.Geometry.ValidationError.Case">
            <summary>
            Invalidity case.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.ValidationError.ErrorLocation">
            <summary>
            Gets a coordinate indicating the position of error.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.ValidationError.ErrorSequenceIndex">
            <summary>
            Gets an index of the erroneous coordinate sequence.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.LinePath">
            <summary>
            A sequence of connected segments.
            <para>
            Contains no discontinuities. Any two points of this geometry can be 
            connected by a line, so that all points of this line will lie on 
            this geometry.
            </para>
            </summary>
        </member>
        <member name="M:MapAround.Geometry.LinePath.ExtractCoordinates">
            <summary>
            Extracts all coordinates that define this geometry.
            </summary>
            <returns>An array containing all coordinates defining this geometry</returns>
        </member>
        <member name="M:MapAround.Geometry.LinePath.GetConvexHull">
            <summary>
            Calculates convex hull.
            </summary>
            <returns>A list containing a convex hull coordinate sequence</returns>
        </member>
        <member name="M:MapAround.Geometry.LinePath.Length">
            <summary>
            Calculates the length of the line path.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.LinePath.GetBoundingRectangle">
            <summary>
            Calculates a minimal axis-aligned bounding rectangle.
            </summary>
            <returns>
            A bounding rectangle of the geometry.
            </returns>
        </member>
        <member name="M:MapAround.Geometry.LinePath.VerticesCentroid">
            <summary>
            Calculates the center of mass of the vertices of the line path.
            </summary>
            <remarks>
            Masses of vertices are set equal.
            </remarks>
        </member>
        <member name="M:MapAround.Geometry.LinePath.EdgesCentroid">
            <summary>
            Calculates the center of mass of the segments of the line path.
            </summary>
            <remarks>
            The density of edges is identical.
            </remarks>
        </member>
        <member name="M:MapAround.Geometry.LinePath.Weed(System.Double)">
            <summary>
            Generalizes this LinePath.
            <para>
            The Douglas-Pecker algorithm implementation. 
            Points, that are closer than epsilon from the 
            direction specified neighboring points  - are 
            discarded.
            </para>
            </summary>
        </member>
        <member name="M:MapAround.Geometry.LinePath.ReduceSegments(System.Double)">
            <summary>
            Removes all segments with a length less than the 
            specified minimum length. Method does not guarantee 
            preservation of topology.
            </summary>
            <param name="minLength">The minimum length value</param>
        </member>
        <member name="M:MapAround.Geometry.LinePath.GetMonotoneChains">
            <summary>
            Computes a monotone chains of this line path.
            </summary>
            <remarks>
            Singular segments can not be included in monotone chains and will throw an exception.
            The Labels collection contains segment indices.
            </remarks>
            <returns>A list containing monotone chains</returns>
        </member>
        <member name="M:MapAround.Geometry.LinePath.AppendMonotoneChains(System.Collections.Generic.IList{MapAround.Geometry.MonotoneChain})">
            <summary>
            Computes a monotone chains of this line path and then 
            adds it to the specified list.
            </summary>
            <remarks>
            Singular segments can not be included in monotone chains and will throw an exception.
            The Labels collection contains segment indices.
            </remarks>
            <param name="chains">A list to adds monotone chains</param>
        </member>
        <member name="M:MapAround.Geometry.LinePath.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance</returns>
        </member>
        <member name="M:MapAround.Geometry.LinePath.Reverse">
            <summary>
            Reverses the sequence of vertices.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.LinePath.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:MapAround.Geometry.LinePath"/>.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.LinePath.#ctor(System.Collections.Generic.IEnumerable{System.Double[]})">
            <summary>
            Initializes a new instance of <see cref="T:MapAround.Geometry.LinePath"/>.
            </summary>
            <param name="vertices">Enumerator of the vertices coordinate arrays</param>
        </member>
        <member name="M:MapAround.Geometry.LinePath.#ctor(System.Collections.Generic.IEnumerable{MapAround.Geometry.ICoordinate})">
            <summary>
            Initializes a new instance of <see cref="T:MapAround.Geometry.LinePath"/>.
            </summary>
            <param name="vertices">Enumerator of vertices coordinates</param>
        </member>
        <member name="P:MapAround.Geometry.LinePath.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.LinePath.Vertices">
            <summary>
            Gets or sets a list of vertices coordinates.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.LinePath.CoordinateCount">
            <summary>
            Gets a number of coordinate.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.LinePath.Dimension">
            <summary>
            Gets a dimension.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.Polyline">
            <summary>
            Represents a polyline. 
            </summary>
            <remarks>
            Polyline is an ordered collection of line paths.
            </remarks>
        </member>
        <member name="M:MapAround.Geometry.Polyline.ExtractCoordinates">
            <summary>
            Extracts all coordinates that define this geometry.
            </summary>
            <returns>An array containing all coordinates defining this geometry</returns>
        </member>
        <member name="M:MapAround.Geometry.Polyline.GetConvexHull">
            <summary>
            Calculates convex hull.
            </summary>
            <returns>A list containing a convex hull coordinate sequence</returns>
        </member>
        <member name="M:MapAround.Geometry.Polyline.Buffer(System.Double,System.Int32,System.Boolean)">
            <summary>
            Builds a buffer for this geometry.
            </summary>
            <param name="distance">The distance of the buffer</param>
            <param name="pointsPerCircle">The number of points in a polygon approximating a circle of a point object buffer</param>
            <param name="allowParallels">The value indicating whether the parallel computing will be used when possible</param>
            <returns>A geometry that represents a buffer</returns>
        </member>
        <member name="M:MapAround.Geometry.Polyline.Length">
            <summary>
            Calculates the length of the polyline.
            </summary>
            <returns>The length of the polyline</returns>
        </member>
        <member name="M:MapAround.Geometry.Polyline.Weed(System.Double)">
            <summary>
            Generalizes this Polyline.
            <para>
            The Douglas-Pecker algorithm implementation. 
            Points, that are closer than epsilon from the 
            direction specified neighboring points  - are 
            discarded.
            </para>
            </summary>
        </member>
        <member name="M:MapAround.Geometry.Polyline.GetBoundingRectangle">
            <summary>
            Calculates a minimal axis-aligned bounding rectangle.
            </summary>
            <returns>
            A bounding rectangle of the geometry.
            </returns>
        </member>
        <member name="M:MapAround.Geometry.Polyline.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance</returns>
        </member>
        <member name="M:MapAround.Geometry.Polyline.SnapVertices(MapAround.Geometry.ICoordinate,System.Double)">
            <summary>
            Snaps coordinates of all vertices to grid nodes.
            Coordinates can be changed to a value less than cellSize / 2.
            </summary>
            <param name="origin">The origin of the grid</param>
            <param name="cellSize">Cell size of the grid</param>
        </member>
        <member name="M:MapAround.Geometry.Polyline.ReduceSegments(System.Double)">
            <summary>
            Removes all segments with a length less than the 
            specified minimum length. Method does not guarantee 
            preservation of topology.
            </summary>
            <param name="minLength">The minimum length value</param>
        </member>
        <member name="M:MapAround.Geometry.Polyline.GetSimplifiedPaths">
            <summary>
            Computes a list of line paths of the topologically normalized polyline.
            </summary>
            <summary>
            These line paths do not contain intersections.
            Allowed only the mutual and self-touches at the start and end points.
            </summary>
            <returns>A list of line paths of the topologically normalized polyline</returns>
        </member>
        <member name="M:MapAround.Geometry.Polyline.Simplify">
            <summary>
            Normalizes the topology of this polyline.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.Polyline.IsValid">
            <summary>
            Determines the validity of the polyline. OGC standards does not define 
            polyline validity. However, this method checks validity 
            in accordance with the common (?) sense: 
            line paths can not contain duplicate points, 2D self-intersections 
            are not permitted.
            </summary>
            <returns>true, if the polyline is valid, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.Polyline.GetValidationError">
            <summary>
            Calculates the error in the polyline definition.
            </summary>
            <returns>An object representing an error in the polyline definition or null</returns>
        </member>
        <member name="M:MapAround.Geometry.Polyline.Intersection(MapAround.Geometry.IGeometry)">
            <summary>
            Computes an intersection of this geometry with another.
            </summary>
            <param name="other">The instance of MapAround.Geometry.IGeometry to compute the intersection</param>
            <returns>A collection of geometries that represents the intersection</returns>
        </member>
        <member name="M:MapAround.Geometry.Polyline.Union(MapAround.Geometry.IGeometry)">
            <summary>
            Computes a union of this geometry with another.
            </summary>
            <param name="other">The instance of MapAround.Geometry.IGeometry to compute the union</param>
            <returns>A collection of geometries that represents the union</returns>
        </member>
        <member name="M:MapAround.Geometry.Polyline.Difference(MapAround.Geometry.IGeometry)">
            <summary>
            Computes a difference of this geometry with another.
            </summary>
            <param name="other">The instance of MapAround.Geometry.IGeometry to compute the difference</param>
            <returns>A collection of geometries that represents the difference</returns>
        </member>
        <member name="M:MapAround.Geometry.Polyline.SymmetricDifference(MapAround.Geometry.IGeometry)">
            <summary>
            Computes a symmetric difference of this geometry with another.
            </summary>
            <param name="other">The instance of MapAround.Geometry.IGeometry to compute the symmetric difference</param>
            <returns>A collection of geometries that represents the symmetric difference</returns>
        </member>
        <member name="M:MapAround.Geometry.Polyline.#ctor(System.Collections.Generic.IEnumerable{MapAround.Geometry.ICoordinate})">
            <summary>
            Initializes a new instance of <see cref="T:MapAround.Geometry.Polyline"/> 
            with single line path.
            </summary>
            <param name="vertices">Enumerator of vertices coordinates</param>
        </member>
        <member name="M:MapAround.Geometry.Polyline.#ctor(System.Collections.Generic.IEnumerable{MapAround.Geometry.LinePath})">
            <summary>
            Initializes a new instance of <see cref="T:MapAround.Geometry.Polyline"/>.
            </summary>
            <param name="paths">Enumerator of line paths</param>
        </member>
        <member name="M:MapAround.Geometry.Polyline.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:MapAround.Geometry.Polyline"/>.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.Polyline.MapAround#Geometry#ISpatialRelative#Equals(MapAround.Geometry.ISpatialRelative)">
            <summary>
            Indicates if the two geometries are define the same set of points in the plane.
            </summary>
            <param name="other">The instance of MapAround.Geometry.ISpatialRelative to compute the equality</param>
            <returns>true, if the two geometries are define the same set of points in the plane, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.Polyline.Crosses(MapAround.Geometry.ISpatialRelative)">
            <summary>
            Indicates if the two geometries intersect in a geometry of lesser dimension.
            See <c>ISpatialRelative.Crosses</c> for details.
            </summary>
            <param name="other">The instance of MapAround.Geometry.ISpatialRelative to compute the crosses predicate</param>
            <returns>true, if the two geometries intersect in a geometry of lesser dimension, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.Polyline.Disjoint(MapAround.Geometry.ISpatialRelative)">
            <summary>
            Indicates if the two geometries share no points in common.
            </summary>
            <param name="other">The instance of MapAround.Geometry.ISpatialRelative to compute the disjoint predicate</param>
            <returns>true, if the two geometries share no points in common, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.Polyline.Overlaps(MapAround.Geometry.ISpatialRelative)">
            <summary>
            Indicates if the intersection of the two geometries has the same dimension as one of the input geometries.
            See <c>ISpatialRelative.Overlaps</c> for details.
            </summary>
            <param name="other">The instance of MapAround.Geometry.ISpatialRelative to compute the disjoint predicate</param>
            <returns>true, if the intersection of the two geometries has the same dimension as one of the input geometries, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.Polyline.Intersects(MapAround.Geometry.ISpatialRelative)">
            <summary>
            Indicates if the two geometries share at least one point in common.
            </summary>
            <param name="other">The instance of MapAround.Geometry.ISpatialRelative 
            to compute the intersects predicate</param>
            <returns>true, if the two geometries share at least one points in common, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.Polyline.Touches(MapAround.Geometry.ISpatialRelative)">
            <summary>
            Indicates if the boundaries of the geometries intersect.
            </summary>
            <param name="other">The instance of MapAround.Geometry.ISpatialRelative 
            to compute the touches predicate</param>
            <returns>true, if the boundaries of the geometries intersect, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.Polyline.Within(MapAround.Geometry.ISpatialRelative)">
            <summary>
            Indicates if this geometry is contained (is within) another geometry.
            </summary>
            <param name="other">The instance of MapAround.Geometry.ISpatialRelative 
            to compute the within predicate</param>
            <returns>true, if this geometry is contained another geometry, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.Polyline.Contains(MapAround.Geometry.ISpatialRelative)">
            <summary>
            Indicates if this geometry contains the other geometry.
            </summary>
            <param name="other">The instance of MapAround.Geometry.ISpatialRelative 
            to compute the contains predicate</param>
            <returns>true, if this geometry contains the other geometry, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.Polyline.Relate(MapAround.Geometry.ISpatialRelative,System.String)">
            <summary>
            Indicates if the defined relationship exists.
            </summary>
            <param name="other">The instance of MapAround.Geometry.ISpatialRelative 
            to compute the defined relation</param>
            <param name="template">Template of the intersection matrix that defines relation</param>
            <returns>true, if the defined relationship exists, false otherwise</returns>
        </member>
        <member name="P:MapAround.Geometry.Polyline.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.Polyline.Paths">
            <summary>
            Gets or sets a list containing line paths.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.Polyline.CoordinateCount">
            <summary>
            Gets a number of coordinate.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.Polyline.Dimension">
            <summary>
            Gets a dimension.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.BoundingRectangle">
            <summary>
            Represents an axis-aligned rectangle.
            <para>
            Instances of this class usually used for 
            storing envelope of 2D planar geometries.
            </para>
            </summary>
        </member>
        <member name="M:MapAround.Geometry.BoundingRectangle.Equals(MapAround.Geometry.BoundingRectangle)">
            <summary>
            Gets a value indicating whether this MapAround.Geometry.BoundingRectangle 
            instance is equal to another.
            </summary>
            <param name="br">The instance of MapAround.Geometry.BoundingRectangle to compare with current instance</param>
        </member>
        <member name="M:MapAround.Geometry.BoundingRectangle.ExtractCoordinates">
            <summary>
            Extracts all coordinates that define this geometry.
            </summary>
            <returns>An array containing all coordinates defining this geometry</returns>
        </member>
        <member name="M:MapAround.Geometry.BoundingRectangle.GetConvexHull">
            <summary>
            Calculates convex hull.
            </summary>
            <returns>A list containing a convex hull coordinate sequence</returns>
        </member>
        <member name="M:MapAround.Geometry.BoundingRectangle.GetBoundingRectangle">
            <summary>
            Calculates a minimal axis-aligned bounding rectangle.
            </summary>
            <returns>
            A bounding rectangle of the geometry.
            </returns>
        </member>
        <member name="M:MapAround.Geometry.BoundingRectangle.Grow(System.Double)">
            <summary>
            Increases the distance from the center to each side of the 
            rectangle by the specified amount. The central point remains in place.
            </summary>
            <param name="delta">The value by which you want to increase the rectangle</param>
        </member>
        <member name="M:MapAround.Geometry.BoundingRectangle.IsEmpty">
            <summary>
            Indicates whether the rectangle is not defined.
            </summary>
            <returns>true if the rectangle is not defined, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.BoundingRectangle.Center">
            <summary>
            Calculates a center point of this rectangle.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.BoundingRectangle.Clear">
            <summary>
            Makes the rectangle undefined.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.BoundingRectangle.Join(MapAround.Geometry.BoundingRectangle)">
            <summary>
            Increases the rectangle so that it includes 
            a rectangle passed as parameter.
            </summary>
            <param name="rectangle">The MapAround.Geometry.BoundingRectangle instance to join</param>
        </member>
        <member name="M:MapAround.Geometry.BoundingRectangle.Join(MapAround.Geometry.ICoordinate)">
            <summary>
            Increases the rectangle so that it includes 
            a point whose coordinates are passed as a 
            parameter.
            </summary>
            <param name="point">Point</param>
        </member>
        <member name="M:MapAround.Geometry.BoundingRectangle.ContainsPoint(MapAround.Geometry.ICoordinate)">
            <summary>
            Determines whether this rectangle contains a specified point.
            </summary>
            <param name="p">Point</param>
            <returns>true, if this rectangle contains a specified point, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.BoundingRectangle.ContainsRectangle(MapAround.Geometry.BoundingRectangle)">
            <summary>
            Determines whether this rectangle contains a specified rectangle.
            </summary>
            <param name="rectangle">Rectangle</param>
            <returns>true, if this rectangle contains a specified rectangle, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.BoundingRectangle.Intersects(MapAround.Geometry.BoundingRectangle)">
            <summary>
            Indicates if this bounding rectangle share at least one point in common with other.
            </summary>
            <param name="box">The instance of MapAround.Geometry.BoundingRectangle 
            to compute the intersects predicate</param>
            <returns>true, if this bounding rectangle share at least one point in common with other, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.BoundingRectangle.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:MapAround.Geometry.BoundingRectangle"/>.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.BoundingRectangle.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance</returns>
        </member>
        <member name="M:MapAround.Geometry.BoundingRectangle.Intersects(MapAround.Geometry.Polyline)">
            <summary>
            Determines whether this rectangle intersects with the polyline.
            </summary>
            <param name="polyline">Polyline</param>
            <returns>true, if this rectangle intersects with the polyline, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.BoundingRectangle.Intersects(MapAround.Geometry.Polygon)">
            <summary>
            Determines whether this rectangle intersects with the polygon.
            </summary>
            <param name="polygon">polygon</param>
            <returns>true, if this rectangle intersects with the polygon, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.BoundingRectangle.ToPolygon">
            <summary>
            Gets the polygon whose vertices are equal 
            to vertices of this rectangle.
            </summary>
            <returns>polygon whose vertices are equal 
            to vertices of this rectangle</returns>
        </member>
        <member name="M:MapAround.Geometry.BoundingRectangle.#ctor(MapAround.Geometry.ICoordinate,MapAround.Geometry.ICoordinate)">
            <summary>
            Initializes a new instance of <see cref="T:MapAround.Geometry.BoundingRectangle"/>.
            </summary>
            <param name="minCorner">The point of minimum coordinate</param>
            <param name="maxCorner">The point of maximum coordinate</param>
        </member>
        <member name="M:MapAround.Geometry.BoundingRectangle.SetBounds(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets coordinates of this rectangle.
            </summary>
            <param name="minX">Minimum X coordinate</param>
            <param name="minY">Minimum Y coordinate</param>
            <param name="maxX">Maximum X coordinate</param>
            <param name="maxY">Maximum Y coordinate</param>
        </member>
        <member name="M:MapAround.Geometry.BoundingRectangle.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of <see cref="T:MapAround.Geometry.BoundingRectangle"/>.
            </summary>
            <param name="minX">Minimum X coordinate</param>
            <param name="minY">Minimum Y coordinate</param>
            <param name="maxX">Maximum X coordinate</param>
            <param name="maxY">Maximum Y coordinate</param>
        </member>
        <member name="P:MapAround.Geometry.BoundingRectangle.MinX">
            <summary>
            Gets a minimum X coordinate of this geometry.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.BoundingRectangle.MinY">
            <summary>
            Gets a minimum Y coordinate of this geometry.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.BoundingRectangle.MaxX">
            <summary>
            Gets a maximum X coordinate of this geometry.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.BoundingRectangle.MaxY">
            <summary>
            Gets a maximum Y coordinate of this geometry.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.BoundingRectangle.CoordinateCount">
            <summary>
            Gets a number of coordinate.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.BoundingRectangle.Width">
            <summary>
            Gets a width of this rectangle.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.BoundingRectangle.Height">
            <summary>
            Gets a height of this rectangle.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.BoundingRectangle.Min">
            <summary>
            Gets the point of minimum coordinates of rectangle.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.BoundingRectangle.Max">
            <summary>
            Gets the point of maximum coordinates of rectangle.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.BoundingRectangle.Dimension">
            <summary>
            Gets a dimension.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.Tile">
            <summary>
            Represents an axis-aligned tile.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.Tile.#ctor(MapAround.Mapping.Map,System.UInt32,System.UInt32)">
            <summary>
            Constructs Tile object
            </summary>
            <param name="map"></param>
            <param name="tileRow"></param>
            <param name="tileCol"></param>
        </member>
        <member name="M:MapAround.Geometry.Tile.IsEmpty">
            <summary>
            Checks tile emptiness
            </summary>
            <returns></returns>
        </member>
        <member name="P:MapAround.Geometry.Tile.Width">
            <summary>
            Returns width of a tile
            </summary>
        </member>
        <member name="P:MapAround.Geometry.Tile.Height">
            <summary>
            Returns height of a tile
            </summary>
        </member>
        <member name="P:MapAround.Geometry.Tile.Row">
            <summary>
            Returns row number of a tile
            </summary>
        </member>
        <member name="P:MapAround.Geometry.Tile.Col">
            <summary>
            Returns column number of a tile
            </summary>
        </member>
        <member name="P:MapAround.Geometry.Tile.ZoomLevel">
            <summary>
            Sets and gets zoom level
            </summary>
        </member>
        <member name="P:MapAround.Geometry.Tile.ScaleDenominator">
            <summary>
            Gets scale denominator for this level
            </summary>
        </member>
        <member name="P:MapAround.Geometry.Tile.PixelSize">
            <summary>
            Gets pixel size for this level
            </summary>
        </member>
        <member name="P:MapAround.Geometry.Tile.BBox">
            <summary>
            Returns tile as a Bounding Rectangle
            </summary>
        </member>
        <member name="T:MapAround.Geometry.OverlayType">
            <summary>
            Represents an overlay type .
            </summary>
        </member>
        <member name="F:MapAround.Geometry.OverlayType.Union">
            <summary>
            Union.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.OverlayType.Intersection">
            <summary>
            Intersection.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.OverlayType.Difference">
            <summary>
            Difference.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.OverlayType.SymmetricDifference">
            <summary>
            Symmetric difference.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.OverlayCalculator">
            <summary>
            Overlay calculator.
            <remarks>
            Instances of this class are used to calculate the results of Boolean operations 
            (union, intersection, difference, symmetric difference) over the point sets. 
            Point sets can be defined as a polygons, polylines or points.
            </remarks>
            </summary>
        </member>
        <member name="M:MapAround.Geometry.OverlayCalculator.Union(MapAround.Geometry.IGeometry,MapAround.Geometry.IGeometry)">
            <summary>
            Calculates a union of two geometries.
            </summary>
            <param name="geometry1">First geometry</param>
            <param name="geometry2">Second geometry</param>
            <returns>A union of two geometries</returns>
        </member>
        <member name="M:MapAround.Geometry.OverlayCalculator.Intersection(MapAround.Geometry.IGeometry,MapAround.Geometry.IGeometry)">
            <summary>
            Calculates an intersection of two geometries.
            </summary>
            <param name="geometry1">First geometry</param>
            <param name="geometry2">Second geometry</param>
            <returns>An intersection of two geometries</returns>
        </member>
        <member name="M:MapAround.Geometry.OverlayCalculator.Difference(MapAround.Geometry.IGeometry,MapAround.Geometry.IGeometry)">
            <summary>
            Calculates a difference of two geometries.
            </summary>
            <param name="geometry1">First geometry</param>
            <param name="geometry2">Second geometry</param>
            <returns>A difference of two geometries</returns>
        </member>
        <member name="M:MapAround.Geometry.OverlayCalculator.SymmetricDifference(MapAround.Geometry.IGeometry,MapAround.Geometry.IGeometry)">
            <summary>
            Calculates a symmetric difference of two geometries.
            </summary>
            <param name="geometry1">First geometry</param>
            <param name="geometry2">Second geometry</param>
            <returns>A symmetric difference of two geometries</returns>
        </member>
        <member name="M:MapAround.Geometry.OverlayCalculator.CalculateOverlay(MapAround.Geometry.IGeometry,MapAround.Geometry.IGeometry,MapAround.Geometry.OverlayType)">
            <summary>
            Calculates an overlay of two geometries.
            </summary>
            <param name="geometry1">First geometry</param>
            <param name="geometry2">Second geometry</param>
            <param name="operation">Overlay type</param>
            <returns>An overlay of two geometries</returns>
        </member>
        <member name="M:MapAround.Geometry.OverlayCalculator.SimplifyContours(System.Collections.Generic.IList{MapAround.Geometry.Contour})">
            <summary>
            Computes the contours of the topologically normalized polygon.
            </summary>
            <remarks>
            Contours that are not intersected. 
            Orientations are set clockwise for holes and 
            counter clockwise for shells.
            Sections of the boundary repeated an even number of times will be removed.
            </remarks>
            <param name="contours">A list containing initial contours</param>
            <returns>A list containing contours of the topologically normalized polygon</returns>
        </member>
        <member name="M:MapAround.Geometry.OverlayCalculator.SimplifyLinePaths(System.Collections.Generic.IList{MapAround.Geometry.LinePath})">
            <summary>
            Computes a list of line paths of the topologically normalized polyline.
            </summary>
            <summary>
            These line paths do not contain intersections.
            Allowed only the mutual and self-touches at the start and end points.
            </summary>
            <param name="paths">A list containing initial line paths</param>
            <returns>A list of line paths of the topologically normalized polyline</returns>
        </member>
        <member name="T:MapAround.Geometry.TopologyException">
            <summary>
            Represents a topology exception.
            Throws when the topology can not be handled correctly.
            For example, because of the effect of 
            loss of transitivity of numbers.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.Dimension">
            <summary>
            Represents a dimension of geometric object.
            Dimension is the number of independent parameters you need 
            to pick out a unique point inside. This is an intuitive explanation. 
            See http://en.wikipedia.org/wiki/Lebesgue_covering_dimension
            for accurate definition.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.Dimension.None">
            <summary>
            Applies to objects that have no dimension. Empty geometries etc.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.Dimension.Zero">
            <summary>
            Dimension value of zero-dimensional objects like points.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.Dimension.One">
            <summary>
            Dimension value of one-dimensional objects like curves.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.Dimension.Two">
            <summary>
            Dimension value of two-dimensional objects like surfaces.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.PlanimetryAlgorithms">
            <summary>
            Implements basic 2D spatial algorithms.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.PlanimetryAlgorithms.DefaultTolerance">
            <summary>
            Default tolerance value.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.PlanimetryAlgorithms.RectangleContainsPoint(MapAround.Geometry.Segment,MapAround.Geometry.ICoordinate)">
            <summary>
            Determines if the axis-aligned rectangle contains the point.
            </summary>
            <param name="rectangle">The diagonal of the bounding rectangle</param>
            <param name="p">The point</param>
            <returns>true, if the axis-aligned rectangle contains the point, false otherwise</returns>       
        </member>
        <member name="M:MapAround.Geometry.PlanimetryAlgorithms.RectangleContainsRectangle(MapAround.Geometry.Segment,MapAround.Geometry.Segment)">
            <summary>
            Determines if one axis-aligned rectangle contains ather axis-aligned rectangle.
            </summary>
            <param name="container">Container diagonal</param>
            <param name="content">Content diagonal</param>
            <returns>true, if one container contains content, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.PlanimetryAlgorithms.AreRectanglesIntersect(MapAround.Geometry.Segment,MapAround.Geometry.Segment)">
            <summary>
            Determines if two axis-aligned rectangles are intersect.
            </summary>
            <param name="rectangle1">Diagonal of first rectangle</param>
            <param name="rectangle2">Diagonal of second rectangle</param>
            <returns>true, if two axis-aligned rectangles are intersect, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.PlanimetryAlgorithms.JoinRectangles(MapAround.Geometry.Segment,MapAround.Geometry.Segment)">
            <summary>
            Joins two axis-aligned rectangles.
            </summary>
            <param name="rectangle1">Diagonal of first rectangle</param>
            <param name="rectangle2">Diagonal of second rectangle</param>
            <returns>Diagonal of the axis-aligned rectangle that contains both rectangles</returns>
        </member>
        <member name="M:MapAround.Geometry.PlanimetryAlgorithms.AreRectanglesIntersect(MapAround.Geometry.Segment@,MapAround.Geometry.Segment@)">
            <summary>
            Determines if two axis-aligned rectangles are intersect.
            </summary>
            <param name="rectangle1">Diagonal of first rectangle</param>
            <param name="rectangle2">Diagonal of second rectangle</param>
            <returns>true, if two axis-aligned rectangles are intersect, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.PlanimetryAlgorithms.GetPointsBoundingRectangle(System.Collections.Generic.IList{MapAround.Geometry.ICoordinate})">
            <summary>
            Calculates a bounding rectangle for a list of points.
            </summary>
            <param name="points">A list of points</param>
            <returns>A bounding rectangle</returns>
        </member>
        <member name="M:MapAround.Geometry.PlanimetryAlgorithms.LiesOnLine(MapAround.Geometry.ICoordinate,MapAround.Geometry.Segment)">
            <summary>
            Determines if the point lies on the line.
            </summary>
            <param name="coordinate">Point coordinates</param>
            <param name="s">A segment defining straight line</param>
            <returns>true, if the point lies on the line, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.PlanimetryAlgorithms.NearTheLine(MapAround.Geometry.ICoordinate,MapAround.Geometry.Segment,System.Double)">
            <summary>
            Determines if the distance between line and point 
            is less than specified value.
            </summary>
            <param name="coordinate">Point coordinates</param>
            <param name="s">A segment defining straight line</param>
            <param name="epsilon">A distance</param>
            <returns>true, if the distance between line and point 
            is less than the epsilon value</returns>
        </member>
        <member name="M:MapAround.Geometry.PlanimetryAlgorithms.ScalarProduct(MapAround.Geometry.Segment,MapAround.Geometry.Segment)">
            <summary>
            Computes a scalar product of two vectors.
            </summary>
            <param name="s1">A segment defining first vector</param>
            <param name="s2">A segment defining second vector</param>
            <returns>A scalar product value</returns>
        </member>
        <member name="M:MapAround.Geometry.PlanimetryAlgorithms.LiesOnSegment(MapAround.Geometry.ICoordinate,MapAround.Geometry.Segment)">
            <summary>
            Determines whether the point lies on segment.
            Comparisions used MapAround.Geometry.PlanimetryAlgorithms.Tolerance value.
            </summary>
            <param name="coordinate">Point coordinates</param>
            <param name="s">Segment</param>
            <returns>true, if the point lies on segment, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.PlanimetryAlgorithms.LiesOnRay(MapAround.Geometry.ICoordinate,MapAround.Geometry.Segment)">
            <summary>
            Determines whether the point lies on ray.
            Comparisions used MapAround.Geometry.PlanimetryAlgorithms.Tolerance value.
            </summary>
            <param name="coordinate">Point coordinates</param>
            <param name="s">Segment defining a ray. V1 is the begining of the ray.</param>
            <returns>true, if the point lies on ray, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.PlanimetryAlgorithms.DistanceToSegment(MapAround.Geometry.ICoordinate,MapAround.Geometry.Segment)">
            <summary>
            Computes a distance between the point and the segment.
            </summary>
            <param name="coordinate">Point coordinates</param>
            <param name="s">Segment</param>
            <returns>Distance between the point and the segment</returns>
        </member>
        <member name="M:MapAround.Geometry.PlanimetryAlgorithms.DistanceToRay(MapAround.Geometry.ICoordinate,MapAround.Geometry.Segment)">
            <summary>
            Computes a distance between the point and the ray.
            </summary>
            <param name="coordinate">Point coordinates</param>
            <param name="s">Segment defining ray. V1 is the begining of ray.</param>
            <returns>Distance between the point and the ray</returns>
        </member>
        <member name="M:MapAround.Geometry.PlanimetryAlgorithms.DistanceToLine(MapAround.Geometry.Segment,MapAround.Geometry.ICoordinate)">
            <summary>
            Computes a distance between the point and the straight line.
            </summary>
            <param name="p">Point coordinates</param>
            <param name="s">Segment defining line</param>
            <returns>Distance between the point and the straight line</returns>
        </member>
        <member name="M:MapAround.Geometry.PlanimetryAlgorithms.SignedDistanceToLine(MapAround.Geometry.Segment,MapAround.Geometry.ICoordinate)">
            <summary>
            Computes a signed distance between the point and the straight line.
            </summary>
            <param name="c">Point coordinates</param>
            <param name="s">Segment defining line</param>
            <returns>Distance between the point and the straight line</returns>
        </member>
        <member name="M:MapAround.Geometry.PlanimetryAlgorithms.Distance(MapAround.Geometry.ICoordinate,MapAround.Geometry.ICoordinate)">
            <summary>
            Computes Euclidean distance between two points.
            </summary>
            <param name="c1">Coordinates of first point</param>
            <param name="c2">Coordinates of second point</param>
            <returns>Euclidean distance between two points</returns>
        </member>
        <member name="M:MapAround.Geometry.PlanimetryAlgorithms.DistanceTolerant(MapAround.Geometry.ICoordinate,MapAround.Geometry.ICoordinate)">
            <summary>
            Computes value indicating whether 
            the distance between two points is less than
            the tolerance value.
            </summary>
            <param name="p1">Coordinate of first point</param>
            <param name="p2">Coordinate of second point</param>
            <returns>true, if the distance between the points is less than <see cref="P:MapAround.Geometry.PlanimetryAlgorithms.Tolerance"/>, otherwise false</returns>
        </member>
        <member name="M:MapAround.Geometry.PlanimetryAlgorithms.DirectsIntersection(MapAround.Geometry.Segment,MapAround.Geometry.Segment,MapAround.Geometry.ICoordinate@)">
            <summary>
            Computes an intersection of two straight lines.
            </summary>
            <param name="s1">Segment defining first line</param>
            <param name="s2">Segment defining second line</param>
            <param name="crossCoord">MapAround.Geometry.ICoordinate implementor for storing
            coordinate of cross point</param>
            <returns>The object representing an intersection dimension</returns>
        </member>
        <member name="M:MapAround.Geometry.PlanimetryAlgorithms.GetPerpendicular(MapAround.Geometry.Segment)">
            <summary>
            Builds perpendicular segment.
            </summary>
            <param name="segment">Source segment</param>
            <returns>Segment that is perpendicular to source</returns>
        </member>
        <member name="M:MapAround.Geometry.PlanimetryAlgorithms.RobustSegmentsIntersection(MapAround.Geometry.Segment,MapAround.Geometry.Segment,MapAround.Geometry.ICoordinate@,MapAround.Geometry.Segment@)">
            <summary>
            Computes an intersection of two line segments.
            This implementation performs a robust checks on disjoining.
            </summary>
            <param name="s1">First segment</param>
            <param name="s2">Second segment</param>
            <param name="intersectionPoint">An intersection point</param>
            <param name="intersectionSegment">An intersection segment</param>
            <returns>A dimension of intersection</returns>
        </member>
        <member name="M:MapAround.Geometry.PlanimetryAlgorithms.SegmentsIntersection(MapAround.Geometry.Segment,MapAround.Geometry.Segment,MapAround.Geometry.ICoordinate@,MapAround.Geometry.Segment@)">
            <summary>
            Computes an intersection of two line segments.
            Non-robust but fast version.
            </summary>
            <param name="s1">First segment</param>
            <param name="s2">Second segment</param>
            <param name="intersectionPoint">An intersection point</param>
            <param name="intersectionSegment">An intersection segment</param>
            <returns>A dimension of intersection</returns>
        </member>
        <member name="M:MapAround.Geometry.PlanimetryAlgorithms.GetCentroid(System.Collections.Generic.IList{MapAround.Geometry.ICoordinate})">
            <summary>
            Calculates the center of mass of points.
            </summary>
            <remarks>
            Masses of points are set equal.
            </remarks>
        </member>
        <member name="M:MapAround.Geometry.PlanimetryAlgorithms.OrderPointsOverAxis(System.Collections.Generic.List{MapAround.Geometry.ICoordinate})">
            <summary>
            Orders points over coordinate axis (horizontal or vertical).
            </summary>
            <param name="coordinates">A list containing the points coordinates</param>
        </member>
        <member name="M:MapAround.Geometry.PlanimetryAlgorithms.OrderPointsOverSegment(System.Collections.Generic.List{MapAround.Geometry.ICoordinate},MapAround.Geometry.Segment)">
            <summary>
            Orders points along a direction defined by specified segment.
            </summary>
            <param name="coordinates">A list containing the points coordinates</param>
            <param name="s">Segment defining the direction</param>
        </member>
        <member name="M:MapAround.Geometry.PlanimetryAlgorithms.SortCoordsHorizontally(System.Collections.Generic.List{MapAround.Geometry.ICoordinate})">
            <summary>
            Orders points horizontally.
            </summary>
            <param name="coordinates">A list containing the points coordinates</param>
        </member>
        <member name="M:MapAround.Geometry.PlanimetryAlgorithms.SortPointsVertically(System.Collections.Generic.List{MapAround.Geometry.ICoordinate})">
            <summary>
            Orders points vertically.
            </summary>
            <param name="coordinates">A list containing the points coordinates</param>
        </member>
        <member name="M:MapAround.Geometry.PlanimetryAlgorithms.GetConvexHull(System.Collections.Generic.IEnumerable{MapAround.Geometry.ICoordinate})">
            <summary>
            Computes a convex hull coordinates for the specified points.
            </summary>
            <param name="coordinates">Enumerator of coordinates for which convex hull should be computed</param>
            <returns>A list containing a convex hull coordinate sequence</returns>
        </member>
        <member name="M:MapAround.Geometry.PlanimetryAlgorithms.OrientationIndex(MapAround.Geometry.Segment,MapAround.Geometry.ICoordinate)">
            <summary>
            Computes an orientation of the line (segment) and the point.
            <remarks>
            If this method returns values with the same sign for two points, 
            then these points are located on the same side of the 
            line, otherwise - in different sides. 
            For a point lying on the line method returns zero.
            </remarks>
            </summary>
            <param name="s">A MapAround.Geometry.Segment instance</param>
            <param name="c">Point coordinates</param>
            <returns>Integer whose sign indicates the location of the point relative to the segment</returns>
        </member>
        <member name="M:MapAround.Geometry.PlanimetryAlgorithms.OrientationIndex(MapAround.Geometry.ICoordinate,MapAround.Geometry.ICoordinate,MapAround.Geometry.ICoordinate)">
            <summary>
            Computes an orientation of the line (segment) and the point.
            </summary>
            <remarks>
            If this method returns a value of the same sign for two points, 
            then these points are located on the same side of the 
            line, otherwise - in different sides. 
            For a point lying on the line method returns zero.
            </remarks>
            <param name="с1">First endpoint of the segment</param>
            <param name="с2">Second endpoint of the segment</param>
            <param name="c">Point coordinates</param>
            <returns>Integer whose sign indicates the location of the point relative to the segment</returns>
        </member>
        <member name="M:MapAround.Geometry.PlanimetryAlgorithms.SnapCoordinatesToGrid(System.Collections.Generic.IList{MapAround.Geometry.ICoordinate},MapAround.Geometry.ICoordinate,System.Double)">
            <summary>
            Snaps coordinates to the grid nodes.
            Coordinates can be changed to a value less than cellSize / 2.
            </summary>
            <param name="coordinates">A list containing the coordinates</param>
            <param name="origin">The origin of the grid</param>
            <param name="cellSize">Cell size of the grid</param>
        </member>
        <member name="M:MapAround.Geometry.PlanimetryAlgorithms.SnapToGrid(MapAround.Geometry.ICoordinate@,MapAround.Geometry.ICoordinate,System.Double)">
            <summary>
            Snaps coordinate to the grid nodes.
            Coordinate can be changed to a value less than cellSize / 2.
            </summary>
            <param name="coordinate">Coordinate to snap</param>
            <param name="origin">The origin of the grid</param>
            <param name="cellSize">Cell size of the grid</param>
        </member>
        <member name="M:MapAround.Geometry.PlanimetryAlgorithms.DeterminantSign(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the sign of 2x2 determinant.
            </summary>
            <param name="x1">Matrix element at 1, 1</param>
            <param name="y1">Matrix element at 1, 2</param>
            <param name="x2">Matrix element at 2, 1</param>
            <param name="y2">Matrix element at 2, 2</param>
            <remarks>
            Direct calculation of the determinant (Math.Sign (x1 * y2 - x2 * y1)) 
            is impossible, since the product of very large numbers can lead to loss 
            of precision greatly exceeding the difference between the products.
            This method provides a robust calculation.
            </remarks>
            <returns>
            -1, if the determinant is nagetive,
            1, if the determinant is positive,
            0, if the determinant equals zero.
            </returns>
        </member>
        <member name="P:MapAround.Geometry.PlanimetryAlgorithms.Tolerance">
            <summary>
            Gets or sets a tolerance value.
            </summary>
            <remarks>
            <para>
            If the distance between two points is less than this value, 
            algorithms operate by comparing the coordinates of the points 
            considered to coincide. 
            To handle all situations correctly, you should select this value 
            based on the size of the treated area. 
            </para>
            <para>
            Each thread have a separate instance of Tolerance.
            </para>
            </remarks>
        </member>
        <member name="T:MapAround.Geometry.SDMinVertexWeightNeededEventArgs">
            <summary>
            Instances of Maparound.Geometry.SDMinVertexWeightNeededEventArgs contains data
            for the SDMinVertexWeightNeeded event.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.SDMinVertexWeightNeededEventArgs.#ctor(MapAround.Geometry.ICoordinate,MapAround.Geometry.ICoordinate,MapAround.Geometry.ICoordinate,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of MapAround.Geometry.SDMinVertexWeightNeededEventArgs.
            </summary>
            <param name="previousPoint">Coordinate of previous point</param>
            <param name="point">Coordinate of point for defining a weight</param>
            <param name="nextPoint">Coordinate of next point</param>
            <param name="pathIndex">Line path index</param>
            <param name="pointIndex">Index of a point in the line path</param>
        </member>
        <member name="P:MapAround.Geometry.SDMinVertexWeightNeededEventArgs.PointIndex">
            <summary>
            Gets an index of point into line path.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.SDMinVertexWeightNeededEventArgs.PathIndex">
            <summary>
            Gets a line path index.
            Gets the index of the line.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.SDMinVertexWeightNeededEventArgs.Point">
            <summary>
            Gets a coordinate of point to determine a weight.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.SDMinVertexWeightNeededEventArgs.PreviousPoint">
            <summary>
            Gets a coordinates of previous point.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.SDMinVertexWeightNeededEventArgs.NextPoint">
            <summary>
            Gets a coordinates of next point.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.SDMinVertexWeightNeededEventArgs.Weight">
            <summary>
            Gets or sets the point weight.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.GeometrySimplifier">
            <summary>
            Simplifies a geometry, ensuring that the result 
            is a geometry having the same topology.
            Implements an S-DMin algorithm.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.GeometrySimplifier.SymplifySDMin(MapAround.Geometry.IGeometry,System.Double)">
            <summary>
            Simplifies a geometry using S-DMin method.
            </summary>
            <param name="geometry">A geometry for simplification</param>
            <param name="compressionLevel">A compression level (the ratio of the 
            number of coordinates in a simplified geometry to the number of coordinates 
            in the original figure).</param>
            <returns>Simlpified geometry</returns>
        </member>
        <member name="P:MapAround.Geometry.GeometrySimplifier.VertexWeighting">
            <summary>
            Gets or sets a vertex weighting function
            <remarks>
            Points with the low weights remove first.
            </remarks>
            </summary>
        </member>
        <member name="E:MapAround.Geometry.GeometrySimplifier.SDMinVertexWeightNeeded">
            <summary>
            Raises when VertexWeighting == VertexWeightingType.Custom and weight value needed.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.GeometrySimplifier.VertexWeightingType">
            <summary>
            types of the weighting function.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.GeometrySimplifier.VertexWeightingType.NormalizedLinear">
            <summary>
            Normalized linear weight.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.GeometrySimplifier.VertexWeightingType.AngleCube">
            <summary>
            The cube of rotation angle.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.GeometrySimplifier.VertexWeightingType.SquareDifference">
            <summary>
            Area difference.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.GeometrySimplifier.VertexWeightingType.Custom">
            <summary>
            A custom weighting function.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.GeometrySimplifier.SDMinVertex">
            <summary>
            Represents a weighted vertex in the S-DMin algorithm.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.GeometrySimplifier.SDMinCrossPoint">
            <summary>
            Represents an intersection point in the S-DMin algorithm.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.IntersectionMatrix">
            <summary>
            Dimensionally extended intersection matrix.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.IntersectionMatrix.Matches(System.String)">
            <summary>
            Indicates whether this matrix matches a specified template.
            </summary>
            <param name="template">String template of matrix</param>
            <returns>true, if this matrix matches a specified template, false otherwise</returns>
        </member>
        <member name="M:MapAround.Geometry.IntersectionMatrix.ToString">
            <summary>
            Converts this instance to its equivalent string representation.
            </summary>
            <returns>String representation of this instance</returns>
        </member>
        <member name="M:MapAround.Geometry.IntersectionMatrix.CalculatePartial(MapAround.Geometry.IGeometry,MapAround.Geometry.IGeometry,System.String)">
            <summary>
            Calculates a specified elements of intersection matrix 
            for two geometries.
            </summary>
            <param name="geometry1">First geometry</param>
            <param name="geometry2">Second geometry</param>
            <param name="template">String template of intersection matrix
            Will be calculated all the elements that do not correspond to the symbol '*'.</param>
        </member>
        <member name="M:MapAround.Geometry.IntersectionMatrix.Calculate(MapAround.Geometry.IGeometry,MapAround.Geometry.IGeometry)">
            <summary>
            Calculates an intersection matrix for two geometries.
            </summary>
            <param name="geometry1">First geometry</param>
            <param name="geometry2">Second geometry</param>
        </member>
        <member name="M:MapAround.Geometry.IntersectionMatrix.#ctor">
            <summary>
            Initializes a new instance of MapAround.Geometry.IntersectionMatrix
            </summary>
        </member>
        <member name="P:MapAround.Geometry.IntersectionMatrix.Item(MapAround.Geometry.IntersectionMatrix.ElementPosition,MapAround.Geometry.IntersectionMatrix.ElementPosition)">
            <summary>
            Represents an element of this intersection matrix
            </summary>
            <param name="x">Row number</param>
            <param name="y">Column number</param>
            <returns></returns>
        </member>
        <member name="T:MapAround.Geometry.IntersectionMatrix.ElementValue">
            <summary>
            Possible values of an element of intersection matrix.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.IntersectionMatrix.ElementValue.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.IntersectionMatrix.ElementValue.Empty">
            <summary>
            Empty set.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.IntersectionMatrix.ElementValue.Zero">
            <summary>
            Zero-dimensional set.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.IntersectionMatrix.ElementValue.One">
            <summary>
            Single-dimensional set.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.IntersectionMatrix.ElementValue.Two">
            <summary>
            Two-dimensional set.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.IntersectionMatrix.ElementPosition">
            <summary>
            Symbolic names of index values in the intersection matrix.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.IntersectionMatrix.ElementPosition.Internal">
            <summary>
            Interior.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.IntersectionMatrix.ElementPosition.Boundary">
            <summary>
            Boundary.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.IntersectionMatrix.ElementPosition.External">
            <summary>
            Exterior.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.Tessellations.NamespaceDoc">
            <summary>
            The MapAround.Geometry.Tesselations namespace contains interfaces and classes
            representing tessellations of space.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.Tessellations.VoronoiTesselation">
            <summary>
            Represents Voronoi tessellation and 
            the dual structure - Delaunay triangulation.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.Tessellations.VoronoiTesselation.#ctor(System.Collections.Generic.List{MapAround.Geometry.Tessellations.VoronoiCell},System.Collections.Generic.List{MapAround.Geometry.Tessellations.Triangle})">
            <summary>
            Initializes a new instance of MapAround.Geometry.Tesselations.VoronoiTesselation.
            </summary>
            <param name="cells">A list containing cells of the tessellation</param>
            <param name="triangles">A list containing the Delaunay triangles</param>
        </member>
        <member name="P:MapAround.Geometry.Tessellations.VoronoiTesselation.Cells">
            <summary>
            Gets a collection of cells of this tessellation.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.Tessellations.VoronoiTesselation.Triangles">
            <summary>
            Gets a collection of triangles forming the Delaunay triangulation.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.Tessellations.VoronoiCell">
            <summary>
            Represents a cell in the Voronoi tessellation.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.Tessellations.VoronoiCell.AddEdge(MapAround.Geometry.Tessellations.VoronoiEdge)">
            <summary>
            Adds an edge to the cell.
            </summary>
            <param name="edge">An edge to add</param>
        </member>
        <member name="M:MapAround.Geometry.Tessellations.VoronoiCell.RemoveEdge(MapAround.Geometry.Tessellations.VoronoiEdge)">
            <summary>
            Removes an edge from the cell.
            </summary>
            <param name="edge">An edge to remove</param>
        </member>
        <member name="P:MapAround.Geometry.Tessellations.VoronoiCell.Tag">
            <summary>
            Gets or sets a custom object associated with this cell.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.Tessellations.VoronoiCell.Edges">
            <summary>
            Gets a collection of edges of this cell.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.Tessellations.VoronoiCell.IsInfinit">
            <summary>
            Gats a value indicating whether this cell contains an infinit edge.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.Tessellations.VoronoiCell.DataPoint">
            <summary>
            The point this cell was built for.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.Tessellations.VoronoiEdge">
            <summary>
            Represents an edge of the Voronoi tessellation.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.Tessellations.VoronoiEdge.#ctor(MapAround.Geometry.Tessellations.VoronoiCell,MapAround.Geometry.Tessellations.VoronoiCell)">
            <summary>
            Initializes a new instance of  MapAround.Geometry.Tesselations.VoronoiEdge.
            </summary>
            <param name="cell1">First cell</param>
            <param name="cell2">Second cell</param>
        </member>
        <member name="P:MapAround.Geometry.Tessellations.VoronoiEdge.Tag">
            <summary>
            Gets or sets a custom object associated with this edge.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.Tessellations.VoronoiEdge.Node1">
            <summary>
            Gets or sets first node of this edge.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.Tessellations.VoronoiEdge.Node2">
            <summary>
            Gets or sets second node of this edge.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.Tessellations.VoronoiEdge.IsInfinit">
            <summary>
            Gats a value indicating whether this edge is infinit.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.Tessellations.VoronoiEdge.Cell1">
            <summary>
            Gats a first Voronoi cell including this edge.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.Tessellations.VoronoiEdge.Cell2">
            <summary>
            Gats a second Voronoi cell including this edge.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.Tessellations.VoronoiNode">
            <summary>
            Represents a node of Voronoi tesselation.
            Node is an ednpoint of any VoronoiEdge or 
            an infinit dangle of edge.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.Tessellations.VoronoiNode.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of MapAround.Geometry.Tesselations.VoronoiNode
            </summary>
        </member>
        <member name="P:MapAround.Geometry.Tessellations.VoronoiNode.Tag">
            <summary>
            Gets or sets a custom object associated with this node.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.Tessellations.VoronoiNode.IsInfinit">
            <summary>
            Gats a value indicating whether this node 
            represents an infinit dangle of edge.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.Tessellations.VoronoiNode.Point">
            <summary>
            Gets or sets a value determining a location of this node
            or a direction of the edge (if it is infinit)
            </summary>
        </member>
        <member name="T:MapAround.Geometry.Tessellations.Triangle">
            <summary>
            Represents a triangle.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.Tessellations.Triangle.Tag">
            <summary>
            Gets or sets a custom object associated with this triangle.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.Tessellations.Triangle.#ctor(MapAround.Geometry.Tessellations.VoronoiCell,MapAround.Geometry.Tessellations.VoronoiCell,MapAround.Geometry.Tessellations.VoronoiCell)">
            <summary>
            Initializes a new instance of  MapAround.Geometry.Tesselations.Triangle.
            </summary>
            <param name="cell1">First cell</param>
            <param name="cell2">Second cell</param>
            <param name="cell3">Third sell</param>
        </member>
        <member name="P:MapAround.Geometry.Tessellations.Triangle.Cell1">
            <summary>
            The first cell of the tessellation, the center 
            of which is the vertex of the triangle.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.Tessellations.Triangle.Cell2">
            <summary>
            The second cell of the tessellation, the center 
            of which is the vertex of the triangle.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.Tessellations.Triangle.Cell3">
            <summary>
            The third cell of the tessellation, the center 
            of which is the vertex of the triangle.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.Tessellations.FortuneEvent">
            <summary>
            Represents an event in Fortune algorithm.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.Tessellations.FortuneEvent.SetKind(MapAround.Geometry.Tessellations.FortuneEvent.EventKind)">
            <summary>
            Sets a type of event.
            </summary>
            <param name="kind">Type of event.</param>
        </member>
        <member name="F:MapAround.Geometry.Tessellations.FortuneEvent.Point">
            <summary>
            An occurence location of this event.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.Tessellations.FortuneEvent.Kind">
            <summary>
            A kind of this event.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.Tessellations.FortuneEvent.EventKind.Point">
            <summary>
            A point event.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.Tessellations.FortuneEvent.EventKind.Circle">
            <summary>
            A circle event.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.Tessellations.FortunePointEvent">
            <summary>
            Represents a point event in Fortune algorithm.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.Tessellations.FortunePointEvent.Cell">
            <summary>
            The cell of Voronoi tessellation.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.Tessellations.FortunePointEvent.#ctor">
            <summary>
            Initializes a new instance of MapAround.Geometry.Tesselations.FortunePointEvent.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.Tessellations.FortuneCircleEvent">
            <summary>
            Represents a circle event in Fortune algorithm.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.Tessellations.FortuneCircleEvent.CircleCenter">
            <summary>
            Center of circle.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.Tessellations.FortuneCircleEvent.Triangle">
            <summary>
            Delaunay triangle.
            This field is used only if when 
            constructed Delaunay triangulation.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.Tessellations.FortuneCircleEvent.Arc">
            <summary>
            A Fortune arc.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.Tessellations.FortuneCircleEvent.#ctor">
            <summary>
            Initializes a new instance of MapAround.Geometry.Tesselations.FortuneCircleEvent.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.Tessellations.FortuneArc">
            <summary>
            Represents an arc in Fortune algorithm
            </summary>
        </member>
        <member name="M:MapAround.Geometry.Tessellations.FortuneArc.#ctor">
            <summary>
            Initializes a new instance of MapAround.Geometry.Tessellations.FortuneArc
            </summary>
        </member>
        <member name="M:MapAround.Geometry.Tessellations.FortuneArc.#ctor(MapAround.Geometry.Tessellations.FortuneArc,MapAround.Geometry.Tessellations.FortuneArc)">
            <summary>
            Initializes a new instance of MapAround.Geometry.Tessellations.FortuneArc
            </summary>
        </member>
        <member name="P:MapAround.Geometry.Tessellations.FortuneArc.LeftSubtreeBound">
             <summary>
            Gets the right arc in the left subtree.
             </summary>
        </member>
        <member name="P:MapAround.Geometry.Tessellations.FortuneArc.RightSubtreeBound">
            <summary>
            Gets the leftmost arc in the right subtree.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.Tessellations.FortuneArc.LeftNeighbor">
            <summary>
            Gets the left next to the arc of coastline.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.Tessellations.FortuneArc.RightNeighbor">
             <summary>
            Gets right to the next arc of coastline.
             </summary>
        </member>
        <member name="T:MapAround.Geometry.Tessellations.FortuneSite">
            <summary>
            Represents a site in Fortune algorithm.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.Tessellations.FortuneShoreLine">
            <summary>
            Represents a shore line in Fortune algorithm.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.Tessellations.FortuneShoreLine.FindArc(System.Double,System.Double)">
            <summary>
            Finds the arc of the shoreline, under which arose a point event.
            </summary>
            <param name="eventX">An X coordinate of event</param>
            <param name="ly">A Y coordinate of the sweepline</param>
            <returns>The arc finded or null</returns>
        </member>
        <member name="M:MapAround.Geometry.Tessellations.FortuneShoreLine.RemoveArc(MapAround.Geometry.Tessellations.FortuneArc)">
            <summary>
            Removes an arc from the shoreline.
            </summary>
            <param name="arc">An arc to remove</param>
        </member>
        <member name="M:MapAround.Geometry.Tessellations.FortuneShoreLine.Finish(MapAround.Geometry.BoundingRectangle,System.Collections.Generic.List{MapAround.Geometry.Tessellations.VoronoiNode})">
            <summary>
            Sets the directions of dangles for infinite edges.
            </summary>
            <param name="rectangle">Bounding rectangle of the tessellation nodes</param>
            <param name="startVerticalNodes">The initial nodes of the infinit vertical edges, 
            formed by points with the maximum Y coordinate</param>
        </member>
        <member name="T:MapAround.Geometry.Tessellations.VoronoiBuilder">
            <summary>
            Builds a Voronoi tessellation. Implements a Fortune algorithm.
            http://en.wikipedia.org/wiki/Fortune%27s_algorithm
            </summary>
        </member>
        <member name="M:MapAround.Geometry.Tessellations.VoronoiBuilder.Build(System.Collections.Generic.IEnumerable{MapAround.Geometry.ICoordinate},System.Boolean)">
            <summary>
            Builds a Voronoi tessellation.
            </summary>
            <param name="points">Enumerator of points for tesselation building</param>
            <param name="buildTraingles">A value indicating whether the constructed Delaunay triangulation</param>
            <returns>A Voronoi tessellation for cpecified points</returns>
        </member>
        <member name="T:MapAround.Geometry.Tessellations.VoronoiBuilder.StartPointsComparer">
            <summary>
            Compares abscissas. Used to sort the point with minimum ordinate.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.PlanarGraph">
            <summary>
            Represents a graph embedded into 2D plane.
            <remarks>
            Planar graph is used in plenty of spatial operations 
            such as overlay or Clementini operators.
            </remarks>
            </summary>
        </member>
        <member name="M:MapAround.Geometry.PlanarGraph.getAngleBetweenEdges(MapAround.Geometry.Segment@,MapAround.Geometry.Segment@,System.Boolean)">
            <summary>
            Gets an angle between two segments that share an endpoint.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.PlanarGraph.getAngle(MapAround.Geometry.ICoordinate,MapAround.Geometry.ICoordinate,MapAround.Geometry.ICoordinate,System.Boolean)">
            <summary>
            Gets an angle between p2p1 and p2p3 rays.
            Angle is measured from p2p1 ray.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.PlanarGraph.BuildPoints">
            <summary>
            Builds a points from graph nodes.
            </summary>
            <returns>List containing visited points</returns>
        </member>
        <member name="M:MapAround.Geometry.PlanarGraph.BuildPolyline(System.Boolean,System.Boolean)">
            <summary>
            Builds a polyline from graph edges.
            </summary>
            <returns>Polyline</returns>
        </member>
        <member name="M:MapAround.Geometry.PlanarGraph.BuildPolygon(System.Boolean,System.Boolean)">
            <summary>
            Builds a polygon from graph edges.
            </summary>
            <returns>Polygon</returns>
        </member>
        <member name="M:MapAround.Geometry.PlanarGraph.BuildFaces(System.Collections.Generic.IList{MapAround.Geometry.Segment}@)">
            <summary>
            Builds all faces.
            </summary>
            <returns>List of polygons defining faces</returns>
        </member>
        <member name="M:MapAround.Geometry.PlanarGraph.processContour(MapAround.Geometry.PlanarGraphEdge,System.Boolean)">
            <summary>
            Constructs a contour.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.PlanarGraph.processContour(System.Int32,MapAround.Geometry.PlanarGraphNode.NodeLayout,System.Boolean,System.Boolean)">
            <summary>
            Constructs a contour.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.PlanarGraph.Build(MapAround.Geometry.IGeometry,MapAround.Geometry.IGeometry)">
            <summary>
            Builds a planar graph of two geometries.
            </summary>
            <param name="geometry1">First geometry</param>
            <param name="geometry2">Second geometry</param>
            <returns>Planar graph of two geometries</returns>
        </member>
        <member name="M:MapAround.Geometry.PlanarGraph.BuildWithSnap(MapAround.Geometry.IGeometry,MapAround.Geometry.IGeometry,MapAround.Geometry.ICoordinate)">
            <summary>
            Builds a planar graph of two geometries.
            </summary>
            <param name="geometry1">First geometry</param>
            <param name="geometry2">Second geometry</param>
            <param name="gridOrigin">Snapping grid origin</param>
            <returns>Planar graph of two geometries</returns>
        </member>
        <member name="M:MapAround.Geometry.PlanarGraph.SetElementsEnabledState(System.Boolean)">
            <summary>
            Sets enabled state to all graph nodes and edges.
            </summary>
            <param name="enabled">Enabled state</param>
        </member>
        <member name="M:MapAround.Geometry.PlanarGraph.#ctor">
            <summary>
            Initializes a new instance of MapAround.Geometry.PlanarGraph
            </summary>
        </member>
        <member name="P:MapAround.Geometry.PlanarGraph.IsBuilt">
            <summary>
            Gets a value indicating whether a graph is built.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.PlanarGraph.Edges">
            <summary>
            Gets a collection of edges of this graph.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.PlanarGraph.Nodes">
            <summary>
            Gets a collection of nodes of this graph.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.PlanarGraph.GridOrigin">
            <summary>
            Gets an origin of snapping grid.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.PlanarGraph.PerformSnapping">
            <summary>
            Gets a value indicating whether the snapping should be performed.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.PlanarGraphNode">
            <summary>
            Node of the planar graph.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.PlanarGraphNode.Layout">
            <summary>
            Layout of this node.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.PlanarGraphNode.#ctor(MapAround.Geometry.ICoordinate)">
            <summary>
            Initializes a new instance of MapAround.Geometry.PlanarGraphNode.
            </summary>
            <param name="coordinate">Coordinate of a node</param>
        </member>
        <member name="P:MapAround.Geometry.PlanarGraphNode.Enabled">
            <summary>
            Gets or sets an enabled state of this node.
            This value is used to indicate that a node 
            is logically deleted from the graph.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.PlanarGraphNode.Label">
            <summary>
            Gets or sets a topology label.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.PlanarGraphNode.IncidentEdges">
            <summary>
            Gets or sets a list containing the incident edges.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.PlanarGraphNode.Point">
            <summary>
            Gets a coordinate of  this node.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.PlanarGraphNode.NodeLayout">
            <summary>
            Layouts of node.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.PlanarGraphNode.NodeLayout.Unknown">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.PlanarGraphNode.NodeLayout.External">
            <summary>
            Node of exterior contour.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.PlanarGraphNode.NodeLayout.Internal">
            <summary>
            Node of interior contour.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.TopologyLabel">
            <summary>
            Represents a topology label.
            Instances of this class is used to mark a planar graph elements.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.TopologyLabel.Tag">
            <summary>
            An object for custom usage.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.TopologyLabel.UsedByObject1">
            <summary>
            Gets or sets a value indicating whether 
            the graph element is used by first geometry object.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.TopologyLabel.UsedByObject2">
            <summary>
            Gets or sets a value indicating whether 
            the graph element is used by second geometry object.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.TopologyLabel.Object2OccurrencesCount">
            <summary>
            Gets or sets a usage count of the graph element 
            by second geometry object.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.TopologyLabel.Object1OccurrencesCount">
            <summary>
            Gets or sets a usage count of the graph element 
            by first geometry object.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.PlanarGraphEdge">
            <summary>
            Edge of the planar graph.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.PlanarGraphEdge.CenterPoint">
            <summary>
            Computes a coordinate of the center point.
            </summary>
            <returns>Coordinate of the center point</returns>
        </member>
        <member name="F:MapAround.Geometry.PlanarGraphEdge.OrientationInObject1">
            <summary>
            Edge orientation relative to the direction of first object traversal;
            </summary>
        </member>
        <member name="F:MapAround.Geometry.PlanarGraphEdge.OrientationInObject2">
            <summary>
            Edge orientation relative to the direction of second object traversal;
            </summary>
        </member>
        <member name="M:MapAround.Geometry.PlanarGraphEdge.SwapNodes">
            <summary>
            Swap nodes of edges.
            </summary>
        </member>
        <member name="M:MapAround.Geometry.PlanarGraphEdge.#ctor(MapAround.Geometry.PlanarGraphNode,MapAround.Geometry.PlanarGraphNode)">
            <summary>
            Initializes a new instance of MapAround.Geometry.PlanarGraphEdge
            </summary>
            <param name="node1">First node</param>
            <param name="node2">Second node</param>
        </member>
        <member name="P:MapAround.Geometry.PlanarGraphEdge.Label">
            <summary>
            Gets or sets a topology label.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.PlanarGraphEdge.IsVisited">
            <summary>
            Gets or sets a value indicating whether this edge is visited.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.PlanarGraphEdge.Enabled">
            <summary>
            Gets or sets an enabled state of this edge.
            This value is used to indicate that an edge
            is logically deleted from the graph.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.PlanarGraphEdge.Node1">
            <summary>
            Gets first node of this edge.
            </summary>
        </member>
        <member name="P:MapAround.Geometry.PlanarGraphEdge.Node2">
            <summary>
            
            Gets second node of this edge.
            </summary>
        </member>
        <member name="T:MapAround.Geometry.PlanarGraphEdge.EdgeOrientation">
            <summary>
            Edge orientations relative to the direction of traversal;
            </summary>
        </member>
        <member name="F:MapAround.Geometry.PlanarGraphEdge.EdgeOrientation.Unknown">
            <summary>
            Unknown orientation.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.PlanarGraphEdge.EdgeOrientation.Forward">
            <summary>
            Edge is oriented along the direction of traversal.
            </summary>
        </member>
        <member name="F:MapAround.Geometry.PlanarGraphEdge.EdgeOrientation.Backward">
            <summary>
            Edge is oriented against the direction of traversal.
            </summary>
        </member>
        <member name="T:MapAround.Indexing.NamespaceDoc">
            <summary>
            The MapAround.Indexing namespace contains 
            interfaces and classes for spatial indexing.
            </summary>
        </member>
        <member name="T:MapAround.Indexing.ISpatialIndex">
            <summary>
            Provides access to properties and methods of object
            that implements a spatial indexing funcions.
            <para>
            This interface should be implemented by objects that are used
            for indexing rectangular bounding objects.
            </para>
            </summary>
        </member>
        <member name="M:MapAround.Indexing.ISpatialIndex.Build``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Built an index for a specified objects.
            </summary>
            <param name="objects">Enumerator of objects for indexing</param>
        </member>
        <member name="M:MapAround.Indexing.ISpatialIndex.Insert``1(``0)">
            <summary>
            Inserts an object into index.
            </summary>
            <param name="obj">An object to insert</param>
        </member>
        <member name="M:MapAround.Indexing.ISpatialIndex.Remove``1(``0)">
            <summary>
            Removes an object from index.
            </summary>
            <param name="obj">An object to remove</param>
            <returns>true, if the object was removed, false otherwise</returns>
        </member>
        <member name="M:MapAround.Indexing.ISpatialIndex.QueryObjectsInRectangle``1(MapAround.Geometry.BoundingRectangle,System.Collections.Generic.IList{``0})">
            <summary>
            Adds objects, which bounding rectangles intersect 
            specified rectangle, to the list.
            </summary>
            <param name="box">A bounding rectangle defining queryable area</param>
            <param name="objects">A list for adding objects</param>
        </member>
        <member name="M:MapAround.Indexing.ISpatialIndex.QueryObjectsContainingPoint``1(MapAround.Geometry.ICoordinate,System.Collections.Generic.IList{``0})">
            <summary>
            Adds objects, which bounding rectangles contains 
            specified point, to the list.
            </summary>
            <param name="point">A point</param>
            <param name="objects">A list for adding objects</param>
        </member>
        <member name="P:MapAround.Indexing.ISpatialIndex.IndexedSpace">
            <summary>
            Gets a bounding rectangle defining the indexed space.
            </summary>
        </member>
        <member name="P:MapAround.Indexing.ISpatialIndex.MaxDepth">
            <summary>
            Gets or sets a value defining a maximum index depth.
            </summary>
        </member>
        <member name="P:MapAround.Indexing.ISpatialIndex.BoxSquareThreshold">
            <summary>
            Gets or sets a threshold 
            value of a cell area.
            </summary>
        </member>
        <member name="P:MapAround.Indexing.ISpatialIndex.MinObjectCount">
            <summary>
            Gets or sets a value defining 
            minimum object number in a cell.
            </summary>
        </member>
        <member name="T:MapAround.Indexing.KDTree">
            <summary>
            Represents a kD-tree.
            This spatial index is optimized for fast discarding the empty space.
            </summary>
        </member>
        <member name="M:MapAround.Indexing.KDTree.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance</returns>    
        </member>
        <member name="F:MapAround.Indexing.KDTree.DividingGridRowCount">
            <summary>
            The number of the possible divisions of cell.
            </summary>
        </member>
        <member name="M:MapAround.Indexing.KDTree.Insert``1(``0)">
            <summary>
            Inserts an object into index.
            </summary>
            <param name="obj">An object to insert</param>
        </member>
        <member name="M:MapAround.Indexing.KDTree.Remove``1(``0)">
            <summary>
            Removes an object from index.
            </summary>
            <param name="obj">An object to remove</param>
            <returns>true, if the object was removed, false otherwise</returns>
        </member>
        <member name="M:MapAround.Indexing.KDTree.Clear">
            <summary>
            Removes all objects from index.
            </summary>
        </member>
        <member name="M:MapAround.Indexing.KDTree.Build``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Built an index for a specified objects.
            <para>
            This method creates a more optimal partitioning of the space 
            than the one which is obtained by sequentially adding objects 
            to the index. The resulting tree is unbalanced.
            </para>
            </summary>
            <remarks>
            <para>
            The algorithm is optimized for fast discarding the empty space. 
            The criterion for the optimal partition is the minimum of 
            (number_of_objects_in_1st_area * square_of_1st_area + number_of_objects_in_2nd_area * square_of_2nd_area). 
            The number of possible partitions defined into <see cref="F:MapAround.Indexing.KDTree.DividingGridRowCount"/>.
            </para>
            </remarks>
            <param name="objects">Enumerator of objects for indexing</param>
        </member>
        <member name="M:MapAround.Indexing.KDTree.QueryObjectsInRectangle``1(MapAround.Geometry.BoundingRectangle,System.Collections.Generic.IList{``0})">
            <summary>
            Adds objects, which bounding rectangles intersect 
            specified rectangle, to the list.
            </summary>
            <param name="box">A bounding rectangle defining queryable area</param>
            <param name="objects">A list for adding objects</param>
        </member>
        <member name="M:MapAround.Indexing.KDTree.QueryObjectsContainingPoint``1(MapAround.Geometry.ICoordinate,System.Collections.Generic.IList{``0})">
            <summary>
            Adds objects, which bounding rectangles contains 
            specified point, to the list.
            </summary>
            <param name="point">A point</param>
            <param name="objects">A list for adding objects</param>
        </member>
        <member name="M:MapAround.Indexing.KDTree.#ctor(MapAround.Geometry.BoundingRectangle)">
            <summary>
            Initializes a new instance of MapAround.Indexing.KDTree.
            </summary>
            <param name="indexedSpace">A bounding rectangle defining the extent of spatial index</param>
        </member>
        <member name="P:MapAround.Indexing.KDTree.MinObjectCount">
            <summary>
            Gets or sets a value defining 
            minimum object number in a cell.
            <para>
            This value is used only by Build(...) methods.
            Ignored in other cases.
            </para>
            </summary>
        </member>
        <member name="P:MapAround.Indexing.KDTree.BoxSquareThreshold">
            <summary>
            Gets or sets a threshold 
            value of a cell area.
            </summary>
        </member>
        <member name="P:MapAround.Indexing.KDTree.MaxDepth">
            <summary>
            Gets or sets a value defining a maximum depth of this kD-tree.
            </summary>
        </member>
        <member name="P:MapAround.Indexing.KDTree.Depth">
            <summary>
            Gets a depth of this kD-tree.
            </summary>
        </member>
        <member name="P:MapAround.Indexing.KDTree.NodeCount">
            <summary>
            Gets a number of nodes of kD-tree.
            </summary>
        </member>
        <member name="P:MapAround.Indexing.KDTree.IndexedSpace">
            <summary>
            Gets a bounding rectangle defining the extent of spatial index.
            </summary>
        </member>
        <member name="T:MapAround.Indexing.KDTree.KDTreeNode">
            <summary>
            Represents a kD-tree node.
            </summary>
        </member>
        <member name="M:MapAround.Indexing.KDTree.KDTreeNode.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance</returns> 
        </member>
        <member name="M:MapAround.Indexing.KDTree.KDTreeNode.Remove(MapAround.Indexing.IIndexable)">
            <summary>
            Removes an object from this node or from
            one of its child nodes.
            </summary>
        </member>
        <member name="M:MapAround.Indexing.KDTree.KDTreeNode.Insert(MapAround.Indexing.IIndexable,System.Int32)">
            <summary>
            Adds an object to this node 
            or one of its childs.
            </summary>
        </member>
        <member name="M:MapAround.Indexing.KDTree.KDTreeNode.QueryObjectsInRectangle``1(MapAround.Geometry.BoundingRectangle,System.Collections.Generic.IList{``0})">
            <summary>
            Adds objects, which bounding rectangles intersect 
            specified rectangle, to the list.
            </summary>
            <param name="box">A bounding rectangle defining queryable area</param>
            <param name="objects">A list for adding objects</param>
        </member>
        <member name="M:MapAround.Indexing.KDTree.KDTreeNode.QueryObjectsContainingPoint``1(MapAround.Geometry.ICoordinate,System.Collections.Generic.IList{``0})">
            <summary>
            Adds objects, which bounding rectangles contains 
            specified point, to the list.
            </summary>
            <param name="point">A point</param>
            <param name="objects">A list for adding objects</param>
        </member>
        <member name="M:MapAround.Indexing.KDTree.KDTreeNode.ClearChildren">
            <summary>
            Removes all child nodes.
            </summary>
        </member>
        <member name="M:MapAround.Indexing.KDTree.KDTreeNode.getSplitCostHorizontal``1(System.Collections.Generic.List{``0},MapAround.Geometry.BoundingRectangle@,MapAround.Geometry.BoundingRectangle@)">
            <summary>
            Computes the cost of horizontal split.
            </summary>
        </member>
        <member name="M:MapAround.Indexing.KDTree.KDTreeNode.getSplitCostVertical``1(System.Collections.Generic.List{``0},MapAround.Geometry.BoundingRectangle,MapAround.Geometry.BoundingRectangle)">
            <summary>
            Computes the cost of vertical split.
            </summary>
        </member>
        <member name="M:MapAround.Indexing.KDTree.KDTreeNode.BuildUnbalanced``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Builds an index for the specified objects.
            </summary>
        </member>
        <member name="P:MapAround.Indexing.KDTree.KDTreeNode.BoundingBox">
            <summary>
            Gets or sets a boundeing rectangle.
            </summary>
        </member>
        <member name="P:MapAround.Indexing.KDTree.KDTreeNode.Child0">
            <summary>
            Gets or sets first child node.
            </summary>
        </member>
        <member name="P:MapAround.Indexing.KDTree.KDTreeNode.Child1">
            <summary>
            Gets or sets second child node.
            </summary>
        </member>
        <member name="P:MapAround.Indexing.KDTree.KDTreeNode.Objects">
            <summary>
            Gets or sets a list containing 
            the objects of this node.
            </summary>
        </member>
        <member name="T:MapAround.Indexing.QuadTree">
            <summary>
            Represents a Quad tree.
            This spatial index is effective for uniform distribution of objects 
            of a small size compared to the indexed space.
            </summary>
        </member>
        <member name="M:MapAround.Indexing.QuadTree.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance</returns>    
        </member>
        <member name="M:MapAround.Indexing.QuadTree.Build``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Строит индекс для списка объектов.
            </summary>
            <param name="objects">Перечислитель объектов, для которых требуется построить индекс</param>
        </member>
        <member name="M:MapAround.Indexing.QuadTree.Clear">
            <summary>
            Removes all child nodes.
            </summary>
        </member>
        <member name="M:MapAround.Indexing.QuadTree.Insert``1(``0)">
            <summary>
            Inserts an object into index.
            </summary>
            <param name="obj">An object to insert</param>
        </member>
        <member name="M:MapAround.Indexing.QuadTree.QueryObjectsInRectangle``1(MapAround.Geometry.BoundingRectangle,System.Collections.Generic.IList{``0})">
            <summary>
            Adds objects, which bounding rectangles intersect 
            specified rectangle, to the list.
            </summary>
            <param name="box">A bounding rectangle defining queryable area</param>
            <param name="objects">A list for adding objects</param>
        </member>
        <member name="M:MapAround.Indexing.QuadTree.QueryObjectsContainingPoint``1(MapAround.Geometry.ICoordinate,System.Collections.Generic.IList{``0})">
            <summary>
            Adds objects, which bounding rectangles contains 
            specified point, to the list.
            </summary>
            <param name="point">A point</param>
            <param name="objects">A list for adding objects</param>
        </member>
        <member name="M:MapAround.Indexing.QuadTree.Remove``1(``0)">
            <summary>
            Removes an object from index.
            </summary>
            <param name="obj">An object to remove</param>
            <returns>true, if the object was removed, false otherwise</returns>
        </member>
        <member name="M:MapAround.Indexing.QuadTree.#ctor(MapAround.Geometry.BoundingRectangle)">
            <summary>
            Initializes a new instance of MapAround.Indexing.QuadTree.
            </summary>
            <param name="indexedSpace">A bounding rectangle defining the extent of spatial index</param>
        </member>
        <member name="P:MapAround.Indexing.QuadTree.Depth">
            <summary>
            Gets a depth of this QuadTree.
            </summary>
        </member>
        <member name="P:MapAround.Indexing.QuadTree.NodeCount">
            <summary>
            Gets a number of nodes of QuadTree.
            </summary>
        </member>
        <member name="P:MapAround.Indexing.QuadTree.MaxDepth">
            <summary>
            Gets or sets a value defining a maximum depth of this QuadTree.
            </summary>
        </member>
        <member name="P:MapAround.Indexing.QuadTree.BoxSquareThreshold">
            <summary>
            Gets or sets a threshold 
            value of a cell area.
            </summary>
        </member>
        <member name="P:MapAround.Indexing.QuadTree.IndexedSpace">
            <summary>
            Gets a bounding rectangle defining the extent of spatial index.
            </summary>
        </member>
        <member name="P:MapAround.Indexing.QuadTree.MinObjectCount">
            <summary>
            Gets or sets a value defining 
            minimum object number in a cell.
            </summary>
        </member>
        <member name="T:MapAround.Indexing.QuadTree.QuadTreeNodePosition">
            <summary>
            Represents positions of the quad tree node.
            </summary>
        </member>
        <member name="T:MapAround.Indexing.QuadTree.QuadTreeNode">
            <summary>
            Represents a QuadTree node.
            </summary>
        </member>
        <member name="M:MapAround.Indexing.QuadTree.QuadTreeNode.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance</returns> 
        </member>
        <member name="M:MapAround.Indexing.QuadTree.QuadTreeNode.Remove(MapAround.Indexing.IIndexable)">
            <summary>
            Removes an object from this node 
            or from one of child nodes.
            </summary>
        </member>
        <member name="M:MapAround.Indexing.QuadTree.QuadTreeNode.Build``1(System.Collections.Generic.List{``0})">
            <summary>
            Builds an index for a specified objects.
            </summary>
        </member>
        <member name="M:MapAround.Indexing.QuadTree.QuadTreeNode.ClearChildren">
            <summary>
            Removes all child nodes.
            </summary>
        </member>
        <member name="M:MapAround.Indexing.QuadTree.QuadTreeNode.QueryObjectsContainingPoint``1(MapAround.Geometry.ICoordinate,System.Collections.Generic.IList{``0})">
            <summary>
            Adds objects, which bounding rectangles contains 
            specified point, to the list.
            </summary>
        </member>
        <member name="P:MapAround.Indexing.QuadTree.QuadTreeNode.HasChildren">
            <summary>
            Gets a value indicating whether this node has child nodes.
            </summary>
        </member>
        <member name="T:MapAround.IO.NamespaceDoc">
            <summary>
            The MapAround.IO contains interfaces and classes 
            defining I/O operations with spatial data.
            </summary>
        </member>
        <member name="T:MapAround.IO.TokenType">
            <summary>
            Enumerates possible token types in
            well-known text representation.
            </summary>
        </member>
        <member name="F:MapAround.IO.TokenType.Word">
            <summary>
            A word lexem.
            </summary>
        </member>
        <member name="F:MapAround.IO.TokenType.Number">
            <summary>
            A number lexem.
            </summary>
        </member>
        <member name="F:MapAround.IO.TokenType.Eol">
            <summary>
            An end of line.
            </summary>
        </member>
        <member name="F:MapAround.IO.TokenType.Eof">
            <summary>
            An end of file (stream).
            Конец входного потока.
            </summary>
        </member>
        <member name="F:MapAround.IO.TokenType.Whitespace">
            <summary>
            A space.
            </summary>
        </member>
        <member name="F:MapAround.IO.TokenType.Symbol">
            <summary>
            A symbol.
            </summary>
        </member>
        <member name="T:MapAround.IO.StreamTokenizer">
            <summary>
             Reads an input stream and constructs tokens from the data read.
            </summary>
        </member>
        <member name="M:MapAround.IO.StreamTokenizer.#ctor(System.IO.TextReader,System.Boolean)">
            <summary>
            Initializes a new instance of MapAround.IO.StreamTokenizer
            </summary>
            <param name="reader">A System>IO.TextReader instance</param>
            <param name="ignoreWhitespace">A value indicating whether the whitespace symbols are ignored while tokenizing</param>
        </member>
        <member name="M:MapAround.IO.StreamTokenizer.GetNumericValue">
            <summary>
            Parses a numeric value.
            </summary>
            <returns>Parsed value</returns>
        </member>
        <member name="M:MapAround.IO.StreamTokenizer.GetStringValue">
            <summary>
            Parses a word value.
            </summary>
            <returns>Parsed value</returns>
        </member>
        <member name="M:MapAround.IO.StreamTokenizer.GetTokenType">
            <summary>
            Gets a type of current token.
            </summary>
            <returns>A type of current token</returns>
        </member>
        <member name="M:MapAround.IO.StreamTokenizer.NextToken(System.Boolean)">
            <summary>
            Gets a next token.
            </summary>
            <param name="ignoreWhitespace">A value indicating whether the whitespace symbols are ignored</param>
            <returns>A next token</returns>
        </member>
        <member name="M:MapAround.IO.StreamTokenizer.NextToken">
            <summary>
            Gets a next token.
            </summary>
            <returns>A next token</returns>
        </member>
        <member name="M:MapAround.IO.StreamTokenizer.GetType(System.Char)">
            <summary>
            Cumputes a token type by its firets character.
            </summary>
            <param name="character">Символ</param>
            <returns>A token type</returns>
        </member>
        <member name="M:MapAround.IO.StreamTokenizer.NextNonWhitespaceToken">
            <summary>
            Gets the next token which is different from TokenType.Whitespace.
            </summary>
            <returns>The next token which is different from TokenType.Whitespace</returns>
        </member>
        <member name="P:MapAround.IO.StreamTokenizer.LineNumber">
            <summary>
            Gets a number of current line.
            </summary>
        </member>
        <member name="P:MapAround.IO.StreamTokenizer.Column">
            <summary>
            Gets a number of symbol in current line.
            </summary>
        </member>
        <member name="T:MapAround.IO.WktStreamTokenizer">
            <summary>
            Reads an input stream containing well-known text of object 
            and constructs wkt-tokens from the data read.
            </summary>
        </member>
        <member name="M:MapAround.IO.WktStreamTokenizer.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of MapAround.IO.WktStreamTokenizer 
            </summary>
            <param name="reader">A System.IO.TextReader instance</param>
        </member>
        <member name="M:MapAround.IO.WktStreamTokenizer.ReadToken(System.String)">
            <summary>
            Reads a token and checks whether it corresponds the specified token. 
            </summary>
            <param name="expectedToken">An expected token</param>
        </member>
        <member name="M:MapAround.IO.WktStreamTokenizer.ReadDoubleQuotedWord">
            <summary>
            Reads a quoted string.
            </summary>
            <remarks>
            All the whitespace tokens between quotes are ignored.
            </remarks>
        </member>
        <member name="T:MapAround.IO.DbaseReader">
            <summary>
            Reads dBase-files.
            </summary>
        </member>
        <member name="M:MapAround.IO.DbaseReader.Open">
            <summary>
            Opens a dBase file for reading.
            </summary>
        </member>
        <member name="M:MapAround.IO.DbaseReader.Close">
            <summary>
            Closes a dBase file.
            </summary>
        </member>
        <member name="M:MapAround.IO.DbaseReader.GetSchemaTable">
            <summary>
            Generates a System.Data.DataTable instance 
            containing the schema of dBase file.
            </summary>
            <returns>A System.Data.DataTable instance 
            containing the schema of dBase file.</returns>
        </member>
        <member name="M:MapAround.IO.DbaseReader.GetRow(System.UInt32,System.Data.DataTable)">
            <summary>
            Gets a dBase row.
            </summary>
            <param name="oid">A row id value</param>
            <param name="table">A System.Data.DataTable instance containing dBase data</param>
            <returns>A data row</returns>
        </member>
        <member name="P:MapAround.IO.DbaseReader.NewTable">
            <summary>
            Creates a new System.Data.DataTable instance 
            to filling with dBase data.
            </summary> 
        </member>
        <member name="T:MapAround.IO.ShapeType">
            <summary>
            Типы форм в файле.
            </summary>
        </member>
        <member name="F:MapAround.IO.ShapeType.NullShape">
            <summary>
            Null shape.
            </summary>
        </member>
        <member name="F:MapAround.IO.ShapeType.Point">
            <summary>
            Point.
            </summary>
        </member>
        <member name="F:MapAround.IO.ShapeType.Polyline">
            <summary>
            Polyline.
            </summary>
        </member>
        <member name="F:MapAround.IO.ShapeType.Polygon">
            <summary>
            Polygon.
            </summary>
        </member>
        <member name="F:MapAround.IO.ShapeType.Multipoint">
            <summary>
            Multipoint.
            </summary>
        </member>
        <member name="T:MapAround.IO.ShapeFileHeader">
            <summary>
            Represents a header of shape file.
            </summary>
        </member>
        <member name="M:MapAround.IO.ShapeFileHeader.#ctor">
            <summary>
            Initializes a new instance of MapAround.IO.ShapeFileHeader.
            </summary>
        </member>
        <member name="M:MapAround.IO.ShapeFileHeader.ToString">
            <summary>
            Returns a System.String that represents the current MapAround.IO.ShapeFileHeader.
            </summary>
            <returns>A System.String that represents the current MapAround.IO.ShapeFileHeader</returns>
        </member>
        <member name="M:MapAround.IO.ShapeFileHeader.SetBounds(MapAround.Geometry.BoundingRectangle)">
            <summary>
            Sets a bounds of all shapes in file.
            </summary>
            <param name="Bounds">A bounding rectangle defining the bounds</param>
        </member>
        <member name="M:MapAround.IO.ShapeFileHeader.SetBounds(MapAround.IO.ShapeFileHeader)">
            <summary>
            Sets a bounds of all shapes in file.
            </summary>
            <param name="headerBounds">A header wrom which to take a bounds</param>
        </member>
        <member name="M:MapAround.IO.ShapeFileHeader.Write(MapAround.IO.BigEndianBinaryWriter,MapAround.IO.ShapeType)">
            <summary>
            Writes this header to the stream.
            </summary>
            <param name="file">A System.IO.BinaryWriter instance to write the header</param>
            <param name="ShapeType">Shape type</param>
        </member>
        <member name="P:MapAround.IO.ShapeFileHeader.Length">
            <summary>
            Gets a length of header in bytes.
            </summary>
        </member>
        <member name="P:MapAround.IO.ShapeFileHeader.FileCode">
            <summary>
            Gets or sets a shape-file code.
            Should be equal to 9994.
            </summary>
        </member>
        <member name="P:MapAround.IO.ShapeFileHeader.FileLength">
            <summary>
            Gets or sets a length of file.
            </summary>
        </member>
        <member name="P:MapAround.IO.ShapeFileHeader.Version">
            <summary>
            Gets or sets the format version.
            </summary>
        </member>
        <member name="P:MapAround.IO.ShapeFileHeader.ShapeType">
            <summary>
            Gets or sets an integer defining a type of shape-file.
            </summary>
        </member>
        <member name="P:MapAround.IO.ShapeFileHeader.MinX">
            <summary>
            Gets or sets a minimal X value of shapes
            storing in shape file.
            </summary>
        </member>
        <member name="P:MapAround.IO.ShapeFileHeader.MinY">
            <summary>
            Gets or sets a minimal Y value of shapes
            storing in shape file.
            </summary>
        </member>
        <member name="P:MapAround.IO.ShapeFileHeader.MaxX">
            <summary>
            Gets or sets a maximal X value of shapes
            storing in shape file.
            </summary>       
        </member>
        <member name="P:MapAround.IO.ShapeFileHeader.MaxY">
            <summary>
            Gets or sets a maximal Y value of shapes
            storing in shape file.
            </summary>
        </member>
        <member name="T:MapAround.IO.ShapeFileRecord">
            <summary>
            Represents a record of shape file.
            </summary>
        </member>
        <member name="M:MapAround.IO.ShapeFileRecord.#ctor">
            <summary>
            Initializes a new instance of the MapAround.IO.ShapeFileRecord 
            </summary>
        </member>
        <member name="M:MapAround.IO.ShapeFileRecord.ToString">
            <summary>
            Returns a System.String that represents the current MapAround.IO.ShapeFileRecord.
            </summary>
            <returns>A System.String that represents the current MapAround.IO.ShapeFilerecord</returns>
        </member>
        <member name="P:MapAround.IO.ShapeFileRecord.Offset">
            <summary>
            Gets or sets an offset of this record 
            from begining of file.
            </summary>
        </member>
        <member name="P:MapAround.IO.ShapeFileRecord.RecordNumber">
            <summary>
            Gets or sets a number of this record.
            </summary>
        </member>
        <member name="P:MapAround.IO.ShapeFileRecord.ContentLength">
            <summary>
            Gets or sets the length (in bytes) of this record.
            </summary>
        </member>
        <member name="P:MapAround.IO.ShapeFileRecord.ShapeType">
            <summary>
            Gets or sets the shape type.
            </summary>
        </member>
        <member name="P:MapAround.IO.ShapeFileRecord.MinX">
            <summary>
            Gets or sets the minimum X value.
            </summary>
        </member>
        <member name="P:MapAround.IO.ShapeFileRecord.MinY">
            <summary>
            Gets or sets the minimum Y value.
            </summary>
        </member>
        <member name="P:MapAround.IO.ShapeFileRecord.MaxX">
            <summary>
            Gets or sets the maximum X value.
            </summary>
        </member>
        <member name="P:MapAround.IO.ShapeFileRecord.MaxY">
            <summary>
            Gets or sets the maximum Y value.
            </summary>
        </member>
        <member name="P:MapAround.IO.ShapeFileRecord.NumberOfParts">
            <summary>
            Gets a number of parts of the geometry.
            </summary>
        </member>
        <member name="P:MapAround.IO.ShapeFileRecord.NumberOfPoints">
            <summary>
            Gets a number of points of the geometry.
            </summary>
        </member>
        <member name="P:MapAround.IO.ShapeFileRecord.Parts">
            <summary>    
            Gets a collection containing the indices of 
            coordinate sequences corresponding parts of
            geometry.
            </summary>
        </member>
        <member name="P:MapAround.IO.ShapeFileRecord.Points">
            <summary>
            Gets a collection of coordinates of
            the geometry.
            </summary>
        </member>
        <member name="P:MapAround.IO.ShapeFileRecord.Attributes">
            <summary>
            Gets or sets an attributes row associated
            with this  record.
            </summary>
        </member>
        <member name="T:MapAround.IO.ShapeFileReadInfo">
            <summary>
            Represents an information of reading shape file.
            </summary>
        </member>
        <member name="M:MapAround.IO.ShapeFileReadInfo.#ctor">
            <summary>
            Initializes a new instance of the MapAround.IO.ShapeFileReadInfo.
            </summary>
        </member>
        <member name="M:MapAround.IO.ShapeFileReadInfo.ToString">
            <summary>
            Returns a System.String that represents the current MapAround.IO.ShapeFileReadInfo.
            </summary>
            <returns>A System.String that represents the current MapAround.IO.ShapeFileReadInfo</returns>
        </member>
        <member name="P:MapAround.IO.ShapeFileReadInfo.FileName">
            <summary>
            Gets or sets the file name.
            </summary>
        </member>
        <member name="P:MapAround.IO.ShapeFileReadInfo.ShapeFile">
            <summary>
            Gets or sets a reference to read MapAround.IO.ShapeFile.
            </summary>
        </member>
        <member name="P:MapAround.IO.ShapeFileReadInfo.Stream">
            <summary>
            Gets or sets a stream from which to read MapAround.IO.ShapeFile.
            </summary>
        </member>
        <member name="P:MapAround.IO.ShapeFileReadInfo.NumberOfBytesRead">
            <summary>
            Gets or sets a number of bytes read.
            </summary>
        </member>
        <member name="P:MapAround.IO.ShapeFileReadInfo.RecordIndex">
            <summary>
            Gets or sets a number of current record.
            </summary>
        </member>
        <member name="T:MapAround.IO.ShapeFile">
            <summary>
            Represents an ESRI Shape-file.
            Implements methods for reading and writing.
            </summary>
        </member>
        <member name="M:MapAround.IO.ShapeFile.#ctor">
            <summary>
            Initializes a new instance of MapAround.IO.Shapefile.
            </summary>
        </member>
        <member name="M:MapAround.IO.ShapeFile.Read(System.String,MapAround.Geometry.BoundingRectangle)">
            <summary>
            Reads a shape-file data (geometries and attributes).
            </summary>
            <param name="fileName">The file name</param>
            <param name="bounds">The bounding rectangle. Only those records are read, 
            which bounding rectangles intersect with this rectangle</param>
        </member>
        <member name="M:MapAround.IO.ShapeFile.ReadIndex(System.String)">
            <summary>
            Reads the index of shape-file.
            </summary>
            <param name="fileName">The file name</param>
        </member>
        <member name="M:MapAround.IO.ShapeFile.ReadShapes(System.String,System.Int32[],MapAround.Geometry.BoundingRectangle)">
            <summary>
            Reads the shapes of shape-file.
            </summary>
            <param name="fileName">The file name</param>
            <param name="offsets">An array containing offsets of the records to read</param>
            <param name="bounds">The bounding rectangle. Only those records are read, 
            which bounding rectangles intersect with this rectangle</param>
        </member>
        <member name="M:MapAround.IO.ShapeFile.ReadShapes(System.IO.Stream,System.Int32[],MapAround.Geometry.BoundingRectangle)">
            <summary>
            Reads the shapes from specified stream.
            </summary>
            <param name="stream">A System.IO.Stream instance to read shapes</param>
            <param name="offsets">An array containing the offset of records to read</param>
            <param name="bounds">The bounding rectangle. Only those records are read, 
            which bounding rectangles intersect with this rectangle</param>
        </member>
        <member name="M:MapAround.IO.ShapeFile.ReadHeader(System.IO.Stream)">
            <summary>
            Reads the header oe shape-file.
            <remarks>
            Headers are placed into .shp and .shx files.
            </remarks>
            </summary>
            <param name="stream">A System.IO.Stream instance to read</param>
        </member>
        <member name="M:MapAround.IO.ShapeFile.ReadRecord(System.IO.Stream,System.Nullable{System.Int32},MapAround.Geometry.BoundingRectangle)">
            <summary>
            Reads a record from the specified stream.
            </summary>
            <param name="stream">A System.IO.Stream instance to read</param>
            <param name="recordOffset">An offset of record</param>
            <param name="bounds">An object representing a bounds of the reading area</param>
        </member>
        <member name="M:MapAround.IO.ShapeFile.ReadAttributes(System.String)">
            <summary>
            Reads a dBase file and merges dBase records with shapes.
            </summary>
            <param name="dbaseFile">The dBase file name</param>
        </member>
        <member name="M:MapAround.IO.ShapeFile.ToString">
            <summary>
            Returns a System.String that represents the current MapAround.IO.ShapeFiler.
            </summary>
            <returns>A System.String that represents the current MapAround.IO.ShapeFile</returns>
        </member>
        <member name="M:MapAround.IO.ShapeFile.WriteAttributes(System.String,System.Collections.Generic.ICollection{MapAround.Mapping.Feature})">
            <summary>
            Writes the attribute file.
            </summary>
            <param name="featureCollection">A collection containing features which attributes is to be written</param>
            <param name="dbaseFile">file attributes</param>
        </member>
        <member name="M:MapAround.IO.ShapeFile.WriteShapes(System.String,MapAround.Geometry.GeometryCollection)">
            <summary>
            Writes shapes.
            </summary>
            <param name="filename">The string value defining shape file name without .shp extension</param>
            <param name="geometryCollection"> MapAround.Geometry.GeometryCollection instance containing
            the geometries to write to shape file</param>		
        </member>
        <member name="M:MapAround.IO.ShapeFile.Write(System.String,System.Collections.Generic.ICollection{MapAround.Mapping.Feature})">
            <summary>
            Writes a collection of features into the shape-file.
            </summary>
            <param name="fileName">The string defining file name without .shp extension</param>
            <param name="features">The collection of features to write</param>
        </member>
        <member name="M:MapAround.IO.ShapeFile.MergeAttributes(System.Data.DataTable)">
            <summary>
            Merges attribute rows with the shape file records.
            </summary>
            <param name="table">The system.Data.DataTable instance containing the attribute values</param>
        </member>
        <member name="M:MapAround.IO.ShapeFile.RecountColumnLengths(MapAround.IO.DbaseFileHeader,System.Collections.IEnumerable)">
            <summary>
            Computes the sizes of attribute fileds taking into accound 
            attribute values of the features.
            </summary>
            <param name="DbaseHeader">The header of the dBase attribute file</param>
            <param name="Features">Enumerator of features</param>
        </member>
        <member name="M:MapAround.IO.ShapeFile.RecountRecords(MapAround.IO.DbaseFileHeader,System.Collections.IEnumerable)">
            <summary>
            Computes the count of DBF records
             </summary>
            <param name="DbaseHeader">The header of the dBase attribute file</param>
            <param name="Features">Enumerator of features</param>
        </member>
        <member name="M:MapAround.IO.ShapeFile.GetDbaseHeader(MapAround.Mapping.Feature,System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            Gets a stub of dBase file header
            </summary>
            <param name="feature">The feature</param>
            <param name="count">The record count</param>
            <param name="attributeNames">A list containing the attribute names</param>
            <returns>A stub of dBase file header</returns>
        </member>
        <member name="M:MapAround.IO.ShapeFile.GetDbaseHeader(MapAround.IO.DbaseFieldDescriptor[],System.Int32)">
            <summary>
            Generates a dBase file header.
            </summary>
            <param name="dbFields">An array containing the dBase filed descriptors</param>
            <param name="count">The record count</param>
            <returns>A stub of dBase file header</returns>
        </member>
        <member name="M:MapAround.IO.ShapeFile.GetDbaseHeader(System.String)">
            <summary>
            Gets the header from a dbf file.
            </summary>
            <param name="dbfFile">The DBF file.</param>
            <returns>The dBase file header</returns>
        </member>
        <member name="M:MapAround.IO.ShapeFile.GetShapeHandler(MapAround.IO.ShapeType)">
            <summary>
            Returns the appropriate class to convert a shaperecord to an MapAround geometry given the type of shape.
            </summary>
            <param name="type">The shape file type.</param>
            <returns>An instance of the appropriate handler to convert the shape record to a Geometry</returns>
        </member>
        <member name="M:MapAround.IO.ShapeFile.GetShapeType(MapAround.Geometry.IGeometry)">
            <summary>
            Given a geomtery object, returns the equilivent shape file type.
            </summary>
            <param name="geom">A Geometry object.</param>
            <returns>The equilivent for the geometry object.</returns>
        </member>
        <member name="P:MapAround.IO.ShapeFile.DbaseHeader">
            <summary>
            Gets or sets a header of dBase file 
            (attributes file).
            </summary>
        </member>
        <member name="P:MapAround.IO.ShapeFile.FileHeader">
            <summary>
            Gets an object representing the header of this shape file.
            </summary>
        </member>
        <member name="P:MapAround.IO.ShapeFile.AttributeNames">
            <summary>
            Gets a collection containing the attribute names.
            </summary>
        </member>
        <member name="P:MapAround.IO.ShapeFile.Records">
            <summary>
            Gets a collection containing the records of this shape file.
            </summary>
        </member>
        <member name="P:MapAround.IO.ShapeFile.AttributesEncoding">
            <summary>
            Gets or sets an encoding of attributes.
            </summary>
        </member>
        <member name="T:MapAround.Mapping.PolygonStyle">
            <summary>
            Defines a polygon rendering style.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.PolygonStyle.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance</returns>
        </member>
        <member name="M:MapAround.Mapping.PolygonStyle.GetBrush">
            <summary/>                
        </member>
        <member name="M:MapAround.Mapping.PolygonStyle.GetPen">
            <summary/>
        </member>
        <member name="P:MapAround.Mapping.PolygonStyle.FillPatternInternal">
            <summary>
            
            </summary>
        </member>
        <member name="P:MapAround.Mapping.PolygonStyle.FillPattern">
            <summary>
            Gets or sets a fill pattern.
            This value has a priority over the UseHatch 
            and HatchStyle properties.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.PolygonStyle.BorderColor">
            <summary>
            Gets or sets a polygon border color.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.PolygonStyle.FillForeColor">
            <summary>
            Gets or sets a foreground color 
            of the polygon interior.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.PolygonStyle.FillBackColor">
            <summary>
            Gets or sets a background color 
            of the polygon interior.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.PolygonStyle.BorderWidth">
            <summary>
            Gets or sets a with of the 
            polygon border.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.PolygonStyle.BorderVisible">
            <summary>
            Gets or sets a value indicating whether
            a polygon border is visible.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.PolygonStyle.BorderDashCap">
            <summary>
            Gets or sets a dash cap 
            of the polygon border.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.PolygonStyle.HatchStyle">
            <summary>
            Gets or sets a filling 
            hatch style.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.PolygonStyle.UseHatch">
            <summary>
            Gets of sets a value indicating 
            whether a hatch will be used
            for filling.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.PolygonStyle.BorderDashStyle">
            <summary>
            Gets or sets a dash style 
            of the border.
            </summary>
        </member>
        <member name="T:MapAround.Mapping.PolylineStyle">
            <summary>
            Defines a polyline rendering style.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.PolylineStyle.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance</returns>
        </member>
        <member name="M:MapAround.Mapping.PolylineStyle.GetPen">
            <summary/>
        </member>
        <member name="M:MapAround.Mapping.PolylineStyle.GetAnnexPen">
            <summary/>
        </member>
        <member name="M:MapAround.Mapping.PolylineStyle.GetOutlinePen">
            <summary/>
        </member>
        <member name="P:MapAround.Mapping.PolylineStyle.UseAnnexLine">
            <summary>
            Gets or sets a value indicating wheter
            an annex line is rendered.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.PolylineStyle.AnnexCompound">
            <summary>
            Gets or sets a compound
            of the annex line.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.PolylineStyle.IsAnnexCompound">
            <summary>
            Gets or sets a value indicating whether 
            the annex line has a compound.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.PolylineStyle.AnnexDashPattern">
            <summary>
            Gets or sets a dash pattern 
            of the annex line.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.PolylineStyle.AnnexDashCap">
            <summary>
            Gets or sets a dash cap 
            of the annex line.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.PolylineStyle.AnnexColor">
            <summary>
            Gets or sets a color of the annex line.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.PolylineStyle.AnnexDashStyle">
            <summary>
            Gets or sets a dash style 
            of the annex line.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.PolylineStyle.IsCompound">
            <summary>
            Gets or sets a value indicating whether 
            the main line has a compound.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.PolylineStyle.Compound">
            <summary>
            Gets or sets a dash pattern 
            of the main line.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.PolylineStyle.DashPattern">
            <summary>
            Gets or sets a dash pattern 
            of the main line.        
            </summary>
        </member>
        <member name="P:MapAround.Mapping.PolylineStyle.OutlineColor">
            <summary>
            Gets or sets an outline color.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.PolylineStyle.OutlineWidth">
            <summary>
            Gets or sets an outline width in pixels.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.PolylineStyle.UseOutline">
            <summary>
            Gets or sets a value indicating 
            whether an outline is visible.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.PolylineStyle.DashCap">
            <summary>
            Gets or sets a dash cap 
            of the main line.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.PolylineStyle.Color">
            <summary>
            Gets or seta a color ot the main line.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.PolylineStyle.Width">
            <summary>
            Gets or sets a width in pixels.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.PolylineStyle.DashStyle">
            <summary>
            Gets or sets a dash style 
            of the main line.
            </summary>
        </member>
        <member name="T:MapAround.Mapping.TitleStyle">
            <summary>
            Defines a title rendering style.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.TitleStyle.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance</returns>
        </member>
        <member name="P:MapAround.Mapping.TitleStyle.UseOutline">
            <summary>
            Gets or sets a value indicating whether
            a hallo-like outline is visible.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.TitleStyle.OutlineSize">
            <summary>
            Gets or sets a size inpixels 
            of the a hallo-like outline.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.TitleStyle.LeadAlong">
            <summary>
            Gets or sets a value indicating
            whether a titles will lead
            along features when possible.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.TitleStyle.RenderPriority">
            <summary>
            Gets or sets a render ptiority value.
            Titles with greater priority are rendered first.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.TitleStyle.FontFamily">
            <summary>
            Gets or sets a font family which is 
            used to render the title.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.TitleStyle.FontSize">
            <summary>
            Gets or sets a size of font.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.TitleStyle.FontStyle">
            <summary>
            Gets or sets a style of font.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.TitleStyle.Color">
            <summary>
            Gets or sets a color.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.TitleStyle.TitlesVisible">
            <summary>
            Gets or sets a value indicating 
            whether a title is visible.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.TitleStyle.VisibleScale">
            <summary>
            Gets or sets a maximum scale (pixels in map unit) 
            at which the title should be visible.
            </summary>
        </member>
        <member name="T:MapAround.Mapping.PointDisplayKind">
            <summary>
            Defines a types of point 
            feature display.
            </summary>
        </member>
        <member name="F:MapAround.Mapping.PointDisplayKind.Symbol">
            <summary>
            Symbol.
            <para>
            Point feature is displayd as a symbol.
            </para>
            </summary>
        </member>
        <member name="F:MapAround.Mapping.PointDisplayKind.Image">
            <summary>
            Image.
            <para>
            Point feature is displayd 
            as a raster image.
            </para>
            </summary>
        </member>
        <member name="T:MapAround.Mapping.PointStyle">
            <summary>
            Defines a point rendering style.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.PointStyle.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance</returns>
        </member>
        <member name="P:MapAround.Mapping.PointStyle.DisplayKind">
            <summary>
            Gets or sets an object defining 
            a display type of point object.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.PointStyle.FontName">
            <summary>
            Gets or sets o font family which is used 
            to display a symbol of point feature.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.PointStyle.Image">
            <summary>
            Gets or sets an image which is displayed 
            at the point feature position.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.PointStyle.Symbol">
            <summary>
            Gets or sets a symbol which is displayed 
            at the point feature position.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.PointStyle.Size">
            <summary>
            Gets or sets a syze of vector symbol.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.PointStyle.Color">
            <summary>
            Gets or sets a color of vector symbol.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.PointStyle.ContentAlignment">
            <summary>
            Location relative to the center of the object.
            </summary>
        </member>
        <member name="T:MapAround.Mapping.AutoTitleSettings">
            <summary>
            Represents an object defining the settings 
            of automatic displaying titles.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.AutoTitleSettings.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance</returns>
        </member>
        <member name="M:MapAround.Mapping.AutoTitleSettings.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of MapAround.Mapping.AutoTitleSettings.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.AutoTitleSettings.AttributeIndex">
            <summary>
            Gets or sets an index ot the non-spatial attribute
            which value is used to displaying a title.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.AutoTitleSettings.AttributeName">
            <summary>
            Gets or sets a name ot the non-spatial attribute
            which value is used to displaying a title.
            </summary>
        </member>
        <member name="T:MapAround.Mapping.BuiltInFillPatterns">
            <summary>
            Represents a builtin fill patterns.
            </summary>
        </member>
        <member name="F:MapAround.Mapping.BuiltInFillPatterns.None">
            <summary>
            Missing pattern.
            </summary>
        </member>
        <member name="F:MapAround.Mapping.BuiltInFillPatterns.Pattern1">
            <summary>
            Pattern 1.
            </summary>
        </member>
        <member name="F:MapAround.Mapping.BuiltInFillPatterns.Pattern2">
            <summary>
            Pattern 2.
            </summary>
        </member>
        <member name="F:MapAround.Mapping.BuiltInFillPatterns.Pattern3">
            <summary>
            Pattern 3.
            </summary>
        </member>
        <member name="F:MapAround.Mapping.BuiltInFillPatterns.Pattern4">
            <summary>
            Pattern 4.
            </summary>
        </member>
        <member name="F:MapAround.Mapping.BuiltInFillPatterns.Pattern5">
            <summary>
            Pattern 5.
            </summary>
        </member>
        <member name="F:MapAround.Mapping.BuiltInFillPatterns.Pattern6">
            <summary>
            Pattern 6.
            </summary>
        </member>
        <member name="F:MapAround.Mapping.BuiltInFillPatterns.Pattern7">
            <summary>
            Pattern 7.
            </summary>
        </member>
        <member name="F:MapAround.Mapping.BuiltInFillPatterns.Pattern8">
            <summary>
            Pattern 8.
            </summary>
        </member>
        <member name="F:MapAround.Mapping.BuiltInFillPatterns.Pattern9">
            <summary>
            Pattern 9.
            </summary>
        </member>
        <member name="F:MapAround.Mapping.BuiltInFillPatterns.Pattern10">
            <summary>
            Pattern 10.
            </summary>
        </member>
        <member name="F:MapAround.Mapping.BuiltInFillPatterns.Pattern11">
            <summary>
            Pattern 11.
            </summary>
        </member>
        <member name="F:MapAround.Mapping.BuiltInFillPatterns.Pattern12">
            <summary>
            Pattern 12.
            </summary>
        </member>
        <member name="F:MapAround.Mapping.BuiltInFillPatterns.Pattern13">
            <summary>
            Pattern 13.
            </summary>
        </member>
        <member name="F:MapAround.Mapping.BuiltInFillPatterns.Pattern14">
            <summary>
            Pattern 14.
            </summary>
        </member>
        <member name="F:MapAround.Mapping.BuiltInFillPatterns.Pattern15">
            <summary>
            Pattern 15.
            </summary>
        </member>
        <member name="F:MapAround.Mapping.BuiltInFillPatterns.Pattern16">
            <summary>
            Pattern 16.
            </summary>
        </member>
        <member name="F:MapAround.Mapping.BuiltInFillPatterns.Pattern17">
            <summary>
            Pattern 17.
            </summary>
        </member>
        <member name="F:MapAround.Mapping.BuiltInFillPatterns.Pattern18">
            <summary>
            Pattern 18.
            </summary>
        </member>
        <member name="F:MapAround.Mapping.BuiltInFillPatterns.Pattern19">
            <summary>
            Pattern 19.
            </summary>
        </member>
        <member name="F:MapAround.Mapping.BuiltInFillPatterns.Pattern20">
            <summary>
            Pattern 20.
            </summary>
        </member>
        <member name="F:MapAround.Mapping.BuiltInFillPatterns.Pattern21">
            <summary>
            Pattern 21.
            </summary>
        </member>
        <member name="F:MapAround.Mapping.BuiltInFillPatterns.Pattern22">
            <summary>
            Pattern 22.
            </summary>
        </member>
        <member name="F:MapAround.Mapping.BuiltInFillPatterns.Pattern23">
            <summary>
            Pattern 23.
            </summary>
        </member>
        <member name="F:MapAround.Mapping.BuiltInFillPatterns.Pattern24">
            <summary>
            Pattern 24.
            </summary>
        </member>
        <member name="F:MapAround.Mapping.BuiltInFillPatterns.Pattern25">
            <summary>
            Pattern 25.
            </summary>
        </member>
        <member name="F:MapAround.Mapping.BuiltInFillPatterns.Min">
            <summary>
            Minimal pattern.
            </summary>
        </member>
        <member name="F:MapAround.Mapping.BuiltInFillPatterns.Max">
            <summary>
            Maximal pattern.
            </summary>
        </member>
        <member name="T:MapAround.Mapping.BuiltInFillPatternsAcccessor">
            <summary>
            Provides an access to built-in patterns.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.BuiltInFillPatternsAcccessor.Bitmaps">
            <summary>
            Gets a collecion containing a bitmaps 
            of builtin patterns.
            </summary>
        </member>
        <member name="T:MapAround.Mapping.HatchFillPatternsAcccessor">
            <summary>
            Provides an access to patterns coincides to the hatch styles.
            This allows to workaround a mono bug (incorrect opacity handling 
            in hatch styles).
            </summary>
        </member>
        <member name="P:MapAround.Mapping.HatchFillPatternsAcccessor.Bitmaps">
            <summary>
            Gets a collecion containing a bitmaps 
            of hatch patterns.
            </summary>
        </member>
        <member name="T:MapAround.Rendering.FillBase">
            <summary>
            Базовый класс заливки.
            </summary>
        </member>
        <member name="M:MapAround.Rendering.FillBase.GetPixelColor(System.Int32,System.Int32)">
            <summary>
            Реализация должна вычислять цвет пикселя.
            </summary>
            <param name="x">Координата x</param>
            <param name="y">Координата y</param>
            <returns>Цвет пикселя</returns>
        </member>
        <member name="T:MapAround.Rendering.SolidFill">
            <summary>
            Сплошная заливка.
            </summary>
        </member>
        <member name="M:MapAround.Rendering.SolidFill.GetPixelColor(System.Int32,System.Int32)">
            <summary>
            Вычисляет цвет пикселя.
            </summary>
            <param name="x">Координата x</param>
            <param name="y">Координата y</param>
            <returns>Цвет пикселя</returns>
        </member>
        <member name="M:MapAround.Rendering.SolidFill.#ctor(System.Int32)">
            <summary>
            Создает экземпляр SoldFill.
            </summary>
            <param name="color">Цвет</param>
        </member>
        <member name="P:MapAround.Rendering.SolidFill.Color">
            <summary>
            Получает или устанавливает цвет.
            </summary>
        </member>
        <member name="T:MapAround.Rendering.PatternFill">
            <summary>
            Шаблонная заливка
            </summary>
        </member>
        <member name="M:MapAround.Rendering.PatternFill.GetPixelColor(System.Int32,System.Int32)">
            <summary>
            Вычисляет цвет пикселя.
            </summary>
            <param name="x">Координата x</param>
            <param name="y">Координата y</param>
            <returns>Цвет пикселя</returns>
        </member>
        <member name="M:MapAround.Rendering.PatternFill.#ctor(System.Int32[0:,0:],System.Int32,System.Int32)">
            <summary>
            Создает экземпляр PatternFill.
            </summary>
            <param name="pattern">Таблица значений пиекселй шаблона</param>
            <param name="originX">Координата x начала отсчета</param>
            <param name="originY">Координата y начала отсчета</param>
        </member>
        <member name="P:MapAround.Rendering.PatternFill.Pattern">
            <summary>
            Получает или устанавливает шаблон заливки.
            </summary>
        </member>
        <member name="T:MapAround.Rendering.HatchFill">
            <summary>
            Штриховая заливка.
            </summary>
        </member>
        <member name="M:MapAround.Rendering.HatchFill.GetPixelColor(System.Int32,System.Int32)">
            <summary>
            Вычисляет цвет пикселя
            </summary>
            <param name="x">Координата x пикселя</param>
            <param name="y">Координата y пикселя</param>
            <returns>Цвет пикселя</returns>
        </member>
        <member name="M:MapAround.Rendering.HatchFill.#ctor(System.Boolean[0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Создает экземпляр HatchFill.
            </summary>
            <param name="pattern">Таблица штриховки</param>
            <param name="color1">Цвет 1</param>
            <param name="color2">Цвет 2</param>
            <param name="originX">Координата x начала отсчета</param>
            <param name="originY">Координата y начала отсчета</param>
        </member>
        <member name="P:MapAround.Rendering.HatchFill.Pattern">
            <summary>
            Получает или устанавливает таблицу штриховки.
            </summary>
        </member>
        <member name="T:MapAround.Rendering.ILineTransformer">
            <summary>
            Интерфейс объекта преобразующего линейные объекты в другие линейные объекты.
            Такие преобразования используются для генерации штрихов, зигзагов (и других
            повторяющихся структур), для генерации параллельных линий.
            </summary>
        </member>
        <member name="M:MapAround.Rendering.ILineTransformer.GetLines(MapAround.Geometry.LinePath)">
            <summary>
            Преобразует ломаную линию в коллекцию линейных объектов.
            </summary>
            <param name="path">Ломаная линия</param>
            <returns>Коллекция линейных объектов (LinePath и Contour)</returns>
        </member>
        <member name="M:MapAround.Rendering.ILineTransformer.GetLines(MapAround.Geometry.Contour)">
            <summary>
            Преобразует контур в коллекцию линейных объектов.
            </summary>
            <param name="contour">Контур</param>
            <returns>Коллекция линейных объектов (LinePath и Contour)</returns>
        </member>
        <member name="P:MapAround.Rendering.ILineTransformer.Offset">
            <summary>
            Смещение шаблона.
            </summary>
        </member>
        <member name="T:MapAround.Rendering.LineTransformationSequence">
            <summary>
            Последовательность преобразований линий.
            </summary>
        </member>
        <member name="M:MapAround.Rendering.LineTransformationSequence.GetLines(MapAround.Geometry.LinePath)">
            <summary>
            Применяет последовательность преобразований к ломаной линии.
            </summary>
            <param name="path">Ломаная линия</param>
            <returns>Коллекция преобразованных объектов</returns>
        </member>
        <member name="M:MapAround.Rendering.LineTransformationSequence.GetLines(MapAround.Geometry.Contour)">
            <summary>
            Применяет последовательность преобразований к контуру.
            </summary>
            <param name="contour">Контур</param>
            <returns>Коллекция преобразованных объектов</returns>
        </member>
        <member name="M:MapAround.Rendering.LineTransformationSequence.GetLines(MapAround.Geometry.GeometryCollection)">
            <summary>
            Применяет последовательность преобразований к коллекции линейных объектов.
            </summary>
            <param name="sourceGeometries">Коллекция линейных объектов</param>
            <returns>Коллекция преобразованных объектов</returns>
        </member>
        <member name="P:MapAround.Rendering.LineTransformationSequence.Transformers">
            <summary>
            Преобразователи линий.
            </summary>
        </member>
        <member name="T:MapAround.Rendering.StrokeGenerator">
            <summary>
            Генератор штрихов.
            </summary>
        </member>
        <member name="M:MapAround.Rendering.StrokeGenerator.GetLines(MapAround.Geometry.LinePath)">
            <summary>
            Преобразует ломаную линию в коллекцию линейных объектов.
            </summary>
            <param name="path">Ломаная линия</param>
            <returns>Коллекция линейных объектов (LinePath и Contour)</returns>
        </member>
        <member name="M:MapAround.Rendering.StrokeGenerator.GetLines(MapAround.Geometry.Contour)">
            <summary>
            Преобразует контур в коллекцию линейных объектов.
            </summary>
            <param name="contour">Контур</param>
            <returns>Коллекция линейных объектов (LinePath и Contour)</returns>
        </member>
        <member name="P:MapAround.Rendering.StrokeGenerator.Strokes">
            <summary>
            Значения штрихов.
            </summary>
        </member>
        <member name="P:MapAround.Rendering.StrokeGenerator.Offset">
            <summary>
            Смещение шаблона штриховки относительно начала линии.
            </summary>
        </member>
        <member name="T:MapAround.Rendering.IPolygonizer">
            <summary>
            Интерфейс объекта выполняющего преобразование
            линейных объектов в площадные.
            </summary>
        </member>
        <member name="M:MapAround.Rendering.IPolygonizer.GetPolygon(MapAround.Geometry.LinePath)">
            <summary>
            Преобразует ломаную линию в полигон.
            </summary>
            <param name="path">Ломаная линия</param>
            <returns>Контуры полигона</returns>
        </member>
        <member name="M:MapAround.Rendering.IPolygonizer.GetPolygon(MapAround.Geometry.Contour)">
            <summary>
            Преобразует контур в полигон.
            </summary>
            <param name="contour">Контур</param>
            <returns>Контуры полигона</returns>
        </member>
        <member name="T:MapAround.Rendering.LineCap">
            <summary>
            Окончание линии.
            </summary>
        </member>
        <member name="F:MapAround.Rendering.LineCap.Flat">
            <summary>
            Плоское окончание.
            </summary>
        </member>
        <member name="F:MapAround.Rendering.LineCap.Square">
            <summary>
            Квадратное окончание.
            </summary>
        </member>
        <member name="F:MapAround.Rendering.LineCap.Round">
            <summary>
            Круглое окончание.
            </summary>
        </member>
        <member name="F:MapAround.Rendering.LineCap.Triangle">
            <summary>
            Треугольное окончание.
            </summary>
        </member>
        <member name="T:MapAround.Rendering.LineJoin">
            <summary>
            Соединение линии.
            </summary>
        </member>
        <member name="F:MapAround.Rendering.LineJoin.Miter">
            <summary>
            Ус.
            </summary>
        </member>
        <member name="F:MapAround.Rendering.LineJoin.Bevel">
            <summary>
            Скос.
            </summary>
        </member>
        <member name="F:MapAround.Rendering.LineJoin.Round">
            <summary>
            Круг.
            </summary>
        </member>
        <member name="F:MapAround.Rendering.LineJoin.MiterClipped">
            <summary>
            Ус с ограничением.
            </summary>
        </member>
        <member name="T:MapAround.Rendering.Polygonizer">
            <summary>
            Преобразователь линий в полигон.
            </summary>
        </member>
        <member name="M:MapAround.Rendering.Polygonizer.getAngle(MapAround.Geometry.ICoordinate,MapAround.Geometry.ICoordinate,MapAround.Geometry.ICoordinate,System.Boolean)">
            <summary>
            Возвращает угол между лучами p2p1 и p2p3 отсчитываемый 
            от луча p2p1
            </summary>
        </member>
        <member name="M:MapAround.Rendering.Polygonizer.GetPolygon(MapAround.Geometry.LinePath)">
            <summary>
            Преобразует ломаную линию в полигон.
            </summary>
            <param name="path">Ломаная линия</param>
            <returns>Контуры полигона</returns>
        </member>
        <member name="M:MapAround.Rendering.Polygonizer.GetPolygon(MapAround.Geometry.Contour)">
            <summary>
            Преобразует контур в полигон.
            </summary>
            <param name="contour">Контур</param>
            <returns>Контуры полигона</returns>
        </member>
        <member name="P:MapAround.Rendering.Polygonizer.MiterLimit">
            <summary>
            Получает или устанавливает значение ограничивающее длину
            соединения линий типа "ус".
            </summary>
        </member>
        <member name="P:MapAround.Rendering.Polygonizer.LineJoin">
            <summary>
            Получает или устанавливает соединение линий.
            </summary>
        </member>
        <member name="P:MapAround.Rendering.Polygonizer.Width">
            <summary>
            Получает или устанавливает базовую толщину полигона.
            </summary>
        </member>
        <member name="P:MapAround.Rendering.Polygonizer.LineStartCap">
            <summary>
            Получает или устанавливает тип начала линии.
            </summary>
        </member>
        <member name="P:MapAround.Rendering.Polygonizer.LineEndCap">
            <summary>
            Получает или устанавливает тип окончания линии.
            </summary>
        </member>
        <member name="T:MapAround.Rendering.RasterData">
            <summary>
            Класс для выполнения низкоуровневых операций (на уровне пикселей 
            и их последовательностей) над буфером изображения.
            </summary>
        </member>
        <member name="M:MapAround.Rendering.RasterData.SetPixel(System.Int32,System.Int32,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Устанавливает значения пикселя.
            </summary>
            <param name="x">Координата х</param>
            <param name="y">Координата y</param>
            <param name="r">Значение красного канала</param>
            <param name="g">Значение зеленого канала</param>
            <param name="b">Значение синего канала</param>
            <param name="a">Значение альфа-канала</param>
        </member>
        <member name="M:MapAround.Rendering.RasterData.SetPixel(System.Int32,System.Int32,System.Int32)">
            <summary>
            Устанавливает значения пикселя.
            </summary>
            <param name="x">Координата х</param>
            <param name="y">Координата y</param>
            <param name="pixelData">Данные пикселя в формате 32bppArgb</param>
        </member>
        <member name="M:MapAround.Rendering.RasterData.BlendPixel(System.Int32,System.Int32,System.Int32)">
            <summary>
            Смешивает значение пикселя.
            </summary>
            <param name="x">Координата x</param>
            <param name="y">Координата y</param>
            <param name="pixelData">Данные пикселя в формате 32bppArgb</param>
        </member>
        <member name="M:MapAround.Rendering.RasterData.SetSpan(MapAround.Rendering.PixelSpan)">
            <summary>
            Записывает в буфер последовательность пикселей.
            </summary>
            <param name="span">Последовательность пикселей</param>
        </member>
        <member name="M:MapAround.Rendering.RasterData.BlendSpan(MapAround.Rendering.PixelSpan)">
            <summary>
            Смешивает последовательность пикселей.
            </summary>
            <param name="span">Последовательность пикселей</param>
        </member>
        <member name="M:MapAround.Rendering.RasterData.Clear(System.Int32)">
            <summary>
            Устанавливает значения всех пикселей в pixelData.
            </summary>
            <param name="pixelData">Значение пикселя</param>
        </member>
        <member name="M:MapAround.Rendering.RasterData.GetBitmap">
            <summary>
            Формирует объект Bitmap
            </summary>
            <returns>Объект Bitmap</returns>
        </member>
        <member name="M:MapAround.Rendering.RasterData.FromBitmap(System.Drawing.Bitmap)">
            <summary>
            Создает ScanlineRenderer и копирует в него изображение из Bitmap.
            </summary>
            <param name="bitmap">Объект Bitmap</param>
            <returns>Экземпляр RasterData</returns>
        </member>
        <member name="M:MapAround.Rendering.RasterData.#ctor(System.Int32,System.Int32)">
            <summary>
            Создает экземпляр RasterData.
            </summary>
            <param name="width">Ширина изображения в пикселях</param>
            <param name="height">Высота изображения в пикселях</param>
        </member>
        <member name="P:MapAround.Rendering.RasterData.Height">
            <summary>
            Высота изображения в пикселях.
            </summary>
        </member>
        <member name="P:MapAround.Rendering.RasterData.Width">
            <summary>
            Ширина изображения в пикселях.
            </summary>
        </member>
        <member name="P:MapAround.Rendering.RasterData.Buffer">
            <summary>
            Массив чисел представляющих пиксели растра.
            </summary>
        </member>
        <member name="T:MapAround.Rendering.Orientation">
            <summary>
            Ориентация.
            <remarks>
            Элементы этого перечисления используются для задания ориентации
            последовательностей пикселей и для определения направления сканирования.
            </remarks>
            </summary>
        </member>
        <member name="F:MapAround.Rendering.Orientation.Horizontal">
            <summary>
            Горизонтальная ориентация.
            </summary>
        </member>
        <member name="F:MapAround.Rendering.Orientation.Vertical">
            <summary>
            Вертикальная ориентация.
            </summary>
        </member>
        <member name="T:MapAround.Rendering.PixelSpan">
            <summary>
            Горизонтальная или вертикальная последовательность пикселей.
            </summary>
        </member>
        <member name="M:MapAround.Rendering.PixelSpan.#ctor(MapAround.Rendering.Orientation,System.Int32,System.Int32,System.Int32[])">
            <summary>
            Создает экземпляр PixelSpan.
            </summary>
            <param name="orientation">Ориентация последовательности пикселей</param>
            <param name="x">Координата x самого левого пикселя в последовательности</param>
            <param name="y">Координата y последовательности</param>
            <param name="pixelValues">Значения пикселей</param>
        </member>
        <member name="M:MapAround.Rendering.PixelSpan.GetSolid(MapAround.Rendering.Orientation,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Генерирует однородную последовательность пикселей.
            </summary>
            <param name="orientation">Ориентация последовательности пикселей</param>
            <param name="x">Координата x самого левого пикселя в последовательности</param>
            <param name="y">Координата y последовательности</param>
            <param name="pixelData">Значение пикселей</param>
            <param name="length">Длина последовательности</param>
            <returns>Однородная последовательность пикселей</returns>
        </member>
        <member name="P:MapAround.Rendering.PixelSpan.Orientation">
            <summary>
            Ориентация последовательности пикселей.
            </summary>
        </member>
        <member name="P:MapAround.Rendering.PixelSpan.X">
            <summary>
            Получает координату x самого левого пикселя в последовательности.
            </summary>
        </member>
        <member name="P:MapAround.Rendering.PixelSpan.Y">
            <summary>
            Получает координату y последовательности пикселей.
            </summary>
        </member>
        <member name="P:MapAround.Rendering.PixelSpan.PixelValues">
            <summary>
            Получает или устанавливает массив значений пикселей.
            </summary>
        </member>
        <member name="T:MapAround.Mapping.NamespaceDoc">
            <summary>
            The MapAround.Mapping namespace contains 
            interfaces and classes defining various map objects 
            like layer, feature etc.
            </summary>
        </member>
        <member name="T:MapAround.Mapping.MapState">
            <summary>
             Specifies the possible states of the MapAround.Mapping.Map object.
            </summary>
        </member>
        <member name="F:MapAround.Mapping.MapState.Idle">
            <summary>
            The map is idle.
            </summary>
        </member>
        <member name="F:MapAround.Mapping.MapState.Loading">
            <summary>
            The map is in the loading state.
            This state is set when the data is querying. 
            </summary>
        </member>
        <member name="F:MapAround.Mapping.MapState.Rendering">
            <summary>
            The map is in the rendering state.
            This state is set when the map 
            rendering features.
            </summary>
        </member>
        <member name="T:MapAround.Mapping.Map">
            <summary>
            Represents a map.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.Map.AddLayer(MapAround.Mapping.LayerBase)">
            <summary>
            Adds a layer to the map.
            </summary>
            <param name="layer">A layer to add</param>
        </member>
        <member name="M:MapAround.Mapping.Map.RemoveLayer(MapAround.Mapping.LayerBase)">
            <summary>
            Removes a layer from map.
            </summary>
            <param name="layer">A layer to remove</param>
        </member>
        <member name="M:MapAround.Mapping.Map.RemoveAllLayers">
            <summary>
            Removes all layers from the map.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.Map.SetLayerIndex(System.Int32,System.Int32)">
            <summary>
            Set specified index to the layer.
            </summary>
            <param name="layerIndex">Layer index</param>
            <param name="newIndex">New layer index</param>
        </member>
        <member name="M:MapAround.Mapping.Map.CalculateBoundingRectangle">
            <summary>
            Computes bounding rectangle of all map data.
            </summary>
            <returns>Bounding rectangle of all map data</returns>
        </member>
        <member name="M:MapAround.Mapping.Map.LoadFeatures(System.Double,MapAround.Geometry.BoundingRectangle)">
            <summary>
            Loads features from sources.
            </summary>
            <param name="scale">The scale value (the number of pixels in map unit)</param>
            <param name="viewBox">A bounding rectangle defining an area 
            into which the features are loaded</param>
        </member>
        <member name="M:MapAround.Mapping.Map.LoadRasters(System.Double,MapAround.Geometry.BoundingRectangle)">
            <summary>
            Loads rasters from sources.
            </summary>
            <param name="scale">The scale value (the number of pixels in map unit)</param>
            <param name="viewBox">A bounding rectangle defining an area 
            into which the rasters are loaded</param>
        </member>
        <member name="M:MapAround.Mapping.Map.Render(System.Int32,System.Int32,MapAround.Geometry.BoundingRectangle)">
            <summary>
            Renders a map.
            </summary>
            <param name="bitmapWidth">Number in pixels The width of the returned image in pixels</param>
            <param name="bitmapHeight">The height of the returned image in pixels</param>
            <param name="viewBox">A bounding rectangle defining a rendered area</param>
        </member>
        <member name="M:MapAround.Mapping.Map.Render(System.Drawing.Image,MapAround.Geometry.BoundingRectangle)">
            <summary>
            Renders a map.
            </summary>
            <param name="image">An image to draq a map</param>
            <param name="viewBox">A bounding rectangle defining a rendered area</param>
        </member>
        <member name="M:MapAround.Mapping.Map.SelectTopObject(MapAround.Geometry.ICoordinate,System.Double,MapAround.Mapping.Feature@)">
            <summary>
            Selects a topmost feature at specified point.
            </summary>
            <remarks>
            <p>
            This method should be used mainly for handling user actions.
            </p>
            <p>
            The layers are analyzing top to bottom. 
            Invisible layers and layers which should not appear in the specified scale are not processed.
            The layers with false FeaturesSelectable value are not processed. 
            
            Each layer is handled as follows:
            1. Calculates the distance from the point features to the point of choice. 
            If the object is distant from point closer than SelectionPointRadius, it is selected.
            2. Calculates the distance from the linear features to the point of choice. 
            If the feature is distant from point closer than SelectionPointRadius, it is selected.
            3. Computes polygons, within which a point of choice is located. The first such polygon is selected.
            </p>
            <p>
            You should not make assumptions about what the features that satisfy the selection criteria 
            will be selected first. The order of selection may be dependent of the specific usage 
            of spatial indices and its settings. To find all the objects around a specified point, 
            use the <see cref="M:MapAround.Mapping.Map.SelectObjects(MapAround.Geometry.ICoordinate,System.Double,System.Collections.Generic.IList{MapAround.Mapping.Feature}@)"/> method.
            </p>
            </remarks>
            <param name="coordinate">Coordinate of selection point (after on-the-fly transofrmation is applied)</param>
            <param name="scale">A scale value (a numer of pixels in the map unit)</param>
            <param name="selectedFeature">Selected feature</param>
        </member>
        <member name="M:MapAround.Mapping.Map.SelectObjects(MapAround.Geometry.ICoordinate,System.Double,System.Collections.Generic.IList{MapAround.Mapping.Feature}@)">
            <summary>
            Selects features.
            The layers are analyzing top to bottom. 
            Invisible layers and layers which should not appear in the specified scale are not processed.
            The layers with false FeaturesSelectable value are not processed. 
            Each layer is handled as follows:
            1. Calculates the distance from the point features to the point of choice. 
            Each feature that is distant from this point closer than SelectionPointRadius 
            is added to the list.
            2. Calculates the distance from the linear features to the point of choice. 
            Each feature that is distant from this point closer than SelectionPointRadius 
            is added to the list.
            3. Computes polygons, within which a point of choice is located. All such 
            polygons are added to the list.
            </summary>
            <param name="coordinate">Coordinate of selection point (after on-the-fly transofrmation is applied)</param>
            <param name="scale">A scale value (a numer of pixels in the map unit)</param>
            <param name="selectedFeatures">A list for selected features</param>
        </member>
        <member name="M:MapAround.Mapping.Map.MapViewBoxFromPresentationViewBox(MapAround.Geometry.BoundingRectangle)">
            <summary>
            Calculates the bounding rectangle in the map coordinates
            from the bounding rectangle in coordinates transformed by 
            on-the-fly transformation.
            <seealso cref="M:MapAround.Mapping.Map.PresentationViewBoxFromMapViewBox(MapAround.Geometry.BoundingRectangle)"/>
            </summary>
        </member>
        <member name="M:MapAround.Mapping.Map.PresentationViewBoxFromMapViewBox(MapAround.Geometry.BoundingRectangle)">
            <summary>
            Calculates the bounding rectangle in the transformed 
            coordinates from the bounding rectangle in the map coordinates.
            <seealso cref="M:MapAround.Mapping.Map.MapViewBoxFromPresentationViewBox(MapAround.Geometry.BoundingRectangle)"/>
            </summary>
        </member>
        <member name="M:MapAround.Mapping.Map.RenderPointSampleInternal(System.Drawing.Graphics,MapAround.Geometry.BoundingRectangle,MapAround.Mapping.PointStyle)">
            <summary>
            Draws a sample of point feature.
            </summary>
            <param name="g">A System.Drawing.Graphics instance that represents a surface for drawing a feature sample</param> 
            <param name="viewBox">A bounding rectangle dfefining the drawing area</param>
            <param name="pointStyle">An object defining point style</param>
        </member>
        <member name="M:MapAround.Mapping.Map.RenderTitleSampleInternal(System.Drawing.Graphics,MapAround.Geometry.BoundingRectangle,MapAround.Mapping.TitleStyle,System.String)">
            <summary>
            Draws a sample of title.
            </summary>
            <param name="g">A System.Drawing.Graphics instance that represents a surface for drawing title sample</param> 
            <param name="viewBox">A bounding rectangle dfefining the drawing area</param>
            <param name="titleStyle">An object defining title style</param>
            <param name="sample">Sample string</param>
        </member>
        <member name="M:MapAround.Mapping.Map.RenderPolylineSampleInternal(System.Drawing.Graphics,MapAround.Geometry.BoundingRectangle,MapAround.Mapping.PolylineStyle,System.Int32)">
            <summary>
            Draws a sample of linear feature.
            </summary>
            <param name="g">A System.Drawing.Graphics instance that represents a surface for drawing a feature sample</param> 
            <param name="viewBox">A bounding rectangle dfefining the drawing area</param>
            <param name="margin">An indent (in pixels) from the edges of the rectangle</param>
            <param name="polylineStyle">An object defining polyline style</param>
        </member>
        <member name="M:MapAround.Mapping.Map.RenderPolygonSampleInternal(System.Drawing.Graphics,MapAround.Geometry.BoundingRectangle,MapAround.Mapping.PolygonStyle,System.Int32)">
            <summary>
            Draws a sample of areal feature.
            </summary>
            <param name="g">A System.Drawing.Graphics instance that represents a surface for drawing a feature sample</param> 
            <param name="viewBox">A bounding rectangle dfefining the drawing area</param>
            <param name="margin">An indent (in pixels) from the edges of the rectangle</param>
            <param name="polygonStyle">An object defining polygon style</param>
        </member>
        <member name="M:MapAround.Mapping.Map.RenderPointSample(System.Drawing.Image,MapAround.Mapping.PointStyle)">
            <summary>
            Draws a sample of point feature.
            </summary>
            <param name="image">A System.Drawing.Image instance for drawing the sample</param> 
            <param name="pointStyle">An object defining point style</param>
        </member>
        <member name="M:MapAround.Mapping.Map.RenderPolylineSample(System.Drawing.Image,MapAround.Mapping.PolylineStyle)">
            <summary>
            Draws a sample of linear feature.
            </summary>
            <param name="image">A System.Drawing.Image instance for drawing the sample</param> 
            <param name="polylineStyle">An object defining polyline style</param>
        </member>
        <member name="M:MapAround.Mapping.Map.RenderPolygonSample(System.Drawing.Image,MapAround.Mapping.PolygonStyle)">
            <summary>
            Draws a sample of areal feature.
            </summary>
            <param name="image">A System.Drawing.Image instance for drawing the sample</param> 
            <param name="polygonStyle">An object defining polygon style</param>
        </member>
        <member name="M:MapAround.Mapping.Map.RenderTitleSample(System.Drawing.Image,MapAround.Mapping.TitleStyle,System.String)">
            <summary>
            Draws a sample of title.
            </summary>
            <param name="image">A System.Drawing.Image instance for drawing the sample</param> 
            <param name="titleStyle">An object defining title style</param>
            <param name="sample">Sample string</param>
        </member>
        <member name="P:MapAround.Mapping.Map.OnTheFlyTransform">
            <summary>
            Gets or sets a coordinate transformation which is 
            applied to the data before rendering.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.Map.CoodrinateSystemWKT">
            <summary>
            Gets or sets a WKT-representation of 
            the map coordinate system.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.Map.ApplicationXmlData">
            <summary>
            Gets or sets an xml content that can be used in applications.
            This property is stored in workspace files.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.Map.FeatureRenderer">
            <summary>
            Gets or sets an object which 
            is used to render features.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.Map.RasterRenderer">
            <summary>
            Gets or sets an object which 
            is used to render rasters.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.Map.State">
            <summary>
            Gets a state of the map.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.Map.RenderedObjectCount">
            <summary>
            Gets a number of objects that was rendered 
            by last Map.Render() call.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.Map.SelectionPointRadius">
            <summary>
            Gets or sets a value defining radius of the selection point.
            This value should used to tune up the selection behavior
            of the map.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.Map.RenderingSettings">
            <summary>
            Gets or sets rendering settings.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.Map.Title">
            <summary>
            Gets or sets a title of map.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.Map.Description">
            <summary>
             Gets or sets a description of map.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.Map.Layers">
            <summary>
            Gets a collection containing layers of this map.
            Returning collection is immutable.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.Map.CosmeticRaster">
            <summary>
            Gets or sets a cosmetic raster.
            </summary>
        </member>
        <member name="E:MapAround.Mapping.Map.MapRendered">
            <summary>
            Raises when a map was rendered.
            </summary>
        </member>
        <member name="T:MapAround.Mapping.LayerCollection">
            <summary>
            Represents a collection of map layers.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.LayerCollection.#ctor(System.Collections.Generic.IList{MapAround.Mapping.LayerBase})">
            <summary>
            Initializes a new instance of MapAround.Mapping.LayerCollection.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.LayerCollection.Item(System.String)">
            <summary>
            Gets an element of collection by alias.
            </summary>
        </member>
        <member name="T:MapAround.Mapping.MapRenderedEventArgs">
            <summary>
            Instances of Maparound.Mapping.MapRenderedEventArgs contains data
            for the MapRendered event.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.MapRenderedEventArgs.#ctor(System.Drawing.Image,MapAround.Geometry.BoundingRectangle)">
            <summary>
            Initializes a new instance of Maparound.Mapping.MapRenderedEventArgs
            </summary>
            <param name="image">A System.Drawing.Image instance that contains the rendered map image</param>
            <param name="viewBox">An object representing a viewing area of map</param>
        </member>
        <member name="P:MapAround.Mapping.MapRenderedEventArgs.ViewBox">
            <summary>
            Gets or sets a bounding rectangle 
            defining the drawing area.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.MapRenderedEventArgs.Image">
            <summary>
            Gets or sets a System.Drawing.Image 
            instance that contains the rendered 
            map image.
            </summary>
        </member>
        <member name="T:MapAround.Mapping.FeatureRenderEventArgs">
            <summary>
            Instances of Maparound.Mapping.FeatureRenderEventArgs contains data
            for the BeforePointRender, BeforePolygonRender and BeforePolylineRendet events.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.FeatureRenderEventArgs.#ctor(MapAround.Mapping.Feature,System.Boolean)">
            <summary>
            Initializes a new instance of Maparound.Mapping.FeatureRenderEventArgs.
            </summary>
            <param name="feature">A feature for which an event arose.</param>
            <param name="titleVisible">A value indicating whether a title of feature is visible</param>
        </member>
        <member name="P:MapAround.Mapping.FeatureRenderEventArgs.Feature">
            <summary>
            Gets a feature for which an event arose.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.FeatureRenderEventArgs.TitleVisible">
            <summary>
            Gets a value indicating whether a title 
            of feature is visible.
            </summary>
        </member>
        <member name="T:MapAround.Mapping.RasterRenderEventArgs">
            <summary>
            Instances of Maparound.Mapping.RasterRenderEventArgs contains data
            for the BeforeRasterRender event.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.RasterRenderEventArgs.#ctor(MapAround.Mapping.RasterStyle)">
            <summary>
            Initializes a new instance of Maparound.Mapping.RasterRenderEventArgs.
            </summary>
            <param name="style">A style which is applied to render the raster</param>
        </member>
        <member name="P:MapAround.Mapping.RasterRenderEventArgs.Style">
            <summary>
            Gets or sets a style which is applied to render the raster.
            </summary>
        </member>
        <member name="T:MapAround.Mapping.FeatureDataSourceEventArgs">
            <summary>
            Instances of Maparound.Mapping.FeatureDataSourceEventArgs contains data
            for the DataSourceNeeded and DataSourceReadyToRelease events of FeatureLayer.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.FeatureDataSourceEventArgs.Provider">
            <summary>
            Gets or sets an instance of 
            spatial data provider.
            </summary>
        </member>
        <member name="T:MapAround.Mapping.RasterDataSourceEventArgs">
            <summary>
            Instances of Maparound.Mapping.RasterDataSourceEventArgs contains data
            for the DataSourceNeeded and DataSourceReadyToRelease events of RasterLayer.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.RasterDataSourceEventArgs.Provider">
            <summary>
            Gets or sets an instance of raster provider.
            </summary>
        </member>
        <member name="T:MapAround.Mapping.LayerDataSourceType">
            <summary>
            Represents a possible types of spatial data sources.
            </summary>
        </member>
        <member name="F:MapAround.Mapping.LayerDataSourceType.File">
            <summary>
            File datasource.
            </summary>
        </member>
        <member name="F:MapAround.Mapping.LayerDataSourceType.Database">
            <summary>
            Database source.
            </summary>
        </member>
        <member name="T:MapAround.Mapping.IndexSettings">
            <summary>
            Represents an indexing settings.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.IndexSettings.#ctor(System.Int32,System.Double,System.Int32)">
            <summary>
            Initializes a new instance of MapAround.Mapping.IndexSettings.
            </summary>
            <param name="maxDepth">A maximum depth of index</param>
            <param name="boxSquareThreshold">A threshold value of cell square</param>
            <param name="minFeatureCount">A minimum number of features in cell</param>
        </member>
        <member name="P:MapAround.Mapping.IndexSettings.IndexType">
            <summary>
            Gets or sets a string value that defines index type.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.IndexSettings.MinFeatureCount">
            <summary>
            Gets or sets a minimum number of features in cell.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.IndexSettings.BoxSquareThreshold">
            <summary>
            Gets or sets a threshold value of cell square.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.IndexSettings.MaxDepth">
            <summary>
            Gets or sets a maximum depth of index.
            </summary>
        </member>
        <member name="T:MapAround.Mapping.Raster">
            <summary>
            Represents a raster.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.Raster.#ctor(System.Boolean,MapAround.Geometry.BoundingRectangle,System.Drawing.Drawing2D.InterpolationMode,System.Drawing.Bitmap)">
            <summary>
            Initializes a new instance of MapAround.Mapping.Raster.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.Raster.Image">
            <summary>
            Gets or sets a System.Drawing.Image instance
            containing raster.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.Raster.Visible">
            <summary>
            Gets or sets a value indicating whether the raster is visible.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.Raster.Bounds">
            <summary>
            Gets or sets a bounds of the raster.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.Raster.InterpolationMode">
            <summary>
            Gets or sets an interpolation mode for the raster.
            </summary>
        </member>
        <member name="T:MapAround.Mapping.MapRenderingSettings">
            <summary>
            Represents a rendering settings of the map.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.MapRenderingSettings.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of MapAround.Mapping.MapRenderingSettings
            </summary>
        </member>
        <member name="P:MapAround.Mapping.MapRenderingSettings.AntiAliasText">
            <summary>
            Gets or sets a value indicating whether the text will
            be rendered with anti-aliasing.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.MapRenderingSettings.AntiAliasGeometry">
            <summary>
            Gets or sets a value indicating whether 
            the featuers will be rendered with anti-aliasing.
            </summary>
        </member>
        <member name="T:MapAround.Mapping.IFeatureReceiver">
            <summary>
            Предоставляет доступ к свойствам и методам объекта, который получает геометрический объект.
            <para>
            Используется в основном с интерфейсом ISpatialDataProvider.
            </para>
            </summary>
        </member>
        <member name="M:MapAround.Mapping.IFeatureReceiver.AddFeature(MapAround.Mapping.Feature)">
            <summary>
            Adds a feature.
            </summary>
            <param name="feature">Feature to add</param>
        </member>
        <member name="P:MapAround.Mapping.IFeatureReceiver.FeatureAttributeNames">
            <summary>
            Gets or sets a list containing attribute names.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.IFeatureReceiver.Alias">
            <summary>
            Gets or sets an alias value.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.IFeatureReceiver.DefaultPointsIndexSettings">
            <summary>
            Gets or sets the default indexing settings 
            for the point features.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.IFeatureReceiver.DefaultPolylinesIndexSettings">
            <summary>
            Gets or sets the default indexing settings 
            for the linear features.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.IFeatureReceiver.DefaultPolygonsIndexSettings">
            <summary>
            Gets or sets the default indexing settings 
            for the polygonal features.
            </summary>
        </member>
        <member name="T:MapAround.Mapping.LayerBase">
            <summary>
            Base class for map layers.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.LayerBase.CheckOperationPossibility(System.String)">
            <summary>
            Checks if the operation is possible now.
            If the map is rendering or the query is performing
            method throws an InvalidOperationException.
            </summary>
            <param name="errorMessage"></param>
        </member>
        <member name="P:MapAround.Mapping.LayerBase.ApplicationXmlData">
            <summary>
            Gets or sets an xml content that can be used in applications.
            This property is stored in workspace files.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.LayerBase.Querying">
            <summary>
            Gets or sets a value indicating whether
            a data is querying.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.LayerBase.Map">
            <summary>
            Gets or sets the MapAround.Mapping.Map instance
            on which this layer is.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.LayerBase.MaxVisibleScale">
            <summary>
            Gets or sets the maximum scale at which 
            the features should be visible.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.LayerBase.MinVisibleScale">
            <summary>
            Gets or sets the minimum scale at which 
            the features should be visible.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.LayerBase.Visible">
            <summary>
            Gets or sets a value indicating whether this layer is visible.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.LayerBase.Cacheable">
            <summary>
            Get or set a value indicating whether this layer is cacheable.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.LayerBase.Alias">
            <summary>
            Gets or sets an alias of this layer.
            <para> 
            Alias is a unique (within the layers of one map) 
            string, used to access the layer by string index.
            </para>
            <para> 
            The map can contain multiple layers 
            with a null or System.String.Empty aliases. 
            All other values may be found in the 
            collection of map layers only once.
            </para>
            </summary>
        </member>
        <member name="P:MapAround.Mapping.LayerBase.Title">
            <summary>
            Gets or sets a title of this layer.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.LayerBase.Description">
            <summary>
            Gets or sets a description of this layer.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.LayerBase.Controllable">
            <summary>
            Gets or sets a value indicating whether 
            is it possible to control this layer (visibility, etc.) from
            user interface.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.LayerBase.DataProviderRegName">
            <summary>
            Gets or sets the registered name of the spatial data provider.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.LayerBase.DataProviderParameters">
            <summary>
            Gets or sets the data provider parameters.
            </summary>
        </member>
        <member name="T:MapAround.Mapping.RasterLayer">
            <summary>
            Represents a raster layer.
            </summary>
        </member>
        <member name="T:MapAround.Mapping.IRasterReceiver">
            <summary>
            Provides access to methods of object that can 
            receive rasters from IRasterProvider implementors.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.IRasterReceiver.AddRasterPreview(System.Drawing.Bitmap,MapAround.Geometry.BoundingRectangle,System.Int32,System.Int32)">
            <summary>
            Adds a raster preview to the receiver.
            </summary>
            <param name="bitmap">A System.Drawing.Bitmap instance representing the reveiving raster</param>
            <param name="bounds">A bounding rectangle defining a bounds of the receiving preview on the map</param>
            <param name="originalWidth">A width (in pixels) of original raster</param>
            <param name="originalHeight">A height (in pixels) of original raster</param>
        </member>
        <member name="M:MapAround.Mapping.RasterLayer.Dispose">
            <summary>
            Disposes current instance.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.RasterLayer.GetBoundingRectangle">
            <summary>
            Gets or sets an extent of raster layer.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.RasterLayer.LoadRasterPreview(MapAround.Geometry.BoundingRectangle,System.Double)">
            <summary>
            Loads a preview of raster from the raster source.
            </summary>
            <param name="viewBox">A bounding rectangle defining the preview area of the map</param>
            <param name="pixelSize">A size of pixel of the raster preview. 
            This value determines the resulting size of preview.</param>
        </member>
        <member name="M:MapAround.Mapping.RasterLayer.AddRasterPreview(System.Drawing.Bitmap,MapAround.Geometry.BoundingRectangle,System.Int32,System.Int32)">
            <summary>
            Adds a raster to the receiver.
            </summary>
            <param name="bitmap">A System.Drawing.Bitmap instance representing the reveiving raster</param>
            <param name="bounds">A bounding rectangle defining a bounds of the receiving raster on the map</param>
            <param name="originalWidth">A width (in pixels) of original raster</param>
            <param name="originalHeight">A height (in pixels) of original raster</param>
        </member>
        <member name="P:MapAround.Mapping.RasterLayer.RasterPreview">
            <summary>
            Gets a preview of the raster 
            that is loaded from raster source.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.RasterLayer.Binding">
            <summary>
            Gets or sets an object containing information for
            how to place a raster image on the map.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.RasterLayer.Style">
            <summary>
            Gets or sets an object defining a style 
            of raster rendering.
            </summary>
        </member>
        <member name="E:MapAround.Mapping.RasterLayer.BeforeRasterRender">
            <summary>
            Raises before render a raster.
            </summary>
        </member>
        <member name="E:MapAround.Mapping.RasterLayer.DataSourceNeeded">
            <summary>
            Raises when the data provider needs to perform data query.
            </summary>
        </member>
        <member name="E:MapAround.Mapping.RasterLayer.DataSourceReadyToRelease">
            <summary>
            Raises when the data provider may release managed and unmanaged resources.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.RasterLayer.RasterRenderer">
            <summary>
            Gets or sets an object which 
            is used to render rasters.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.RasterLayer.Map">
            <summary>
            Gets or sets the MapAround.Mapping.Map instance
            on which this layer is.
            </summary>
        </member>
        <member name="T:MapAround.Mapping.RasterLayer.RasterBinding">
            <summary>
            Represents an object containing information for
            how to place a raster image on the map.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.RasterLayer.RasterBinding.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance</returns>
        </member>
        <member name="M:MapAround.Mapping.RasterLayer.RasterBinding.#ctor(System.Int32,System.Int32,MapAround.Geometry.ICoordinate,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the MapAround.Mapping.RasterLayer.RasterBinding.
            </summary>
            <param name="rasterX">An X coordinate of binding pixel</param>
            <param name="rasterY">A Y coordinate of binding pixel</param>
            <param name="mapPoint">A binding point on the map</param>
            <param name="pixelWidth">A width of the pixel in map units</param>
            <param name="pixelHeight">A height of the pixel in map units</param>
        </member>
        <member name="M:MapAround.Mapping.RasterLayer.RasterBinding.#ctor">
            <summary>
            Initializes a new instance of the MapAround.Mapping.RasterLayer.RasterBinding.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.RasterLayer.RasterBinding.RasterX">
            <summary>
            Gets or sets an X coordinate of binding pixel.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.RasterLayer.RasterBinding.RasterY">
            <summary>
            Gets or sets an Y coordinate of binding pixel.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.RasterLayer.RasterBinding.MapPoint">
            <summary>
            Gets or sets a binding point on the map.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.RasterLayer.RasterBinding.PixelWidth">
            <summary>
            Gets or sets a width of the pixel in map units.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.RasterLayer.RasterBinding.PixelHeight">
            <summary>
            Gets or sets a height of the pixel in map units.
            </summary>
        </member>
        <member name="T:MapAround.Mapping.RasterPreview">
            <summary>
            Represents a preview of the raster.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.RasterPreview.Dispose">
            <summary>
            Disposes current instance.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.RasterPreview.#ctor(MapAround.Geometry.BoundingRectangle,System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of MapAround.Mapping.RasterPreview.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.RasterPreview.Image">
            <summary>
            Gets or sets a System.Drawing.Image instance
            containing the preview of raster.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.RasterPreview.Bounds">
            <summary>
            Gets or sets a bounds of the raster in map units.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.RasterPreview.OriginalWidth">
            <summary>
            
            </summary>
        </member>
        <member name="P:MapAround.Mapping.RasterPreview.OriginalHeight">
            <summary>
            
            </summary>
        </member>
        <member name="T:MapAround.Mapping.FeatureLayer">
            <summary>
            Represents a layer based on vector data.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.FeatureLayer.GetBoundingRectangle">
            <summary>
            Computes the bounding rectangle of all 
            features of this layer.
            </summary>
            <returns>Bounding rectangle of all features of this layer</returns>
        </member>
        <member name="M:MapAround.Mapping.FeatureLayer.DropPointsIndex">
            <summary>
            Removes spatial index of point features.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.FeatureLayer.DropPolylinesIndex">
            <summary>
            Removes spatial index of linear features.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.FeatureLayer.DropPolygonsIndex">
            <summary>
            Removes spatial index of polygon features.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.FeatureLayer.AddPoint(MapAround.Mapping.Feature)">
            <summary>
            Adds a point feature to this layer.
            </summary>
            <param name="point">A point feature to add</param>
        </member>
        <member name="M:MapAround.Mapping.FeatureLayer.RemovePoint(System.Int32)">
            <summary>
            Removes a point feature from this layer.
            </summary>
            <param name="index">A zero-based index of feature (in Points collection) to delete</param>
        </member>
        <member name="M:MapAround.Mapping.FeatureLayer.RemovePoint(MapAround.Mapping.Feature)">
            <summary>
            Removes a point feature from this layer.
            </summary>
            <param name="point">A point feature to delete</param>
        </member>
        <member name="M:MapAround.Mapping.FeatureLayer.RemoveAllPoints">
            <summary>
            Removes all point features.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.FeatureLayer.AddMultiPoint(MapAround.Mapping.Feature)">
            <summary>
            Adds a multipoint features to this layer.
            </summary>
            <param name="multiPoint">A multipoint feature to add</param>
        </member>
        <member name="M:MapAround.Mapping.FeatureLayer.RemoveMultiPoint(System.Int32)">
            <summary>
            Removes a multipoint feature from this layer.
            </summary>
            <param name="index">A zero-based index of feature (in MultiPoints collection) to delete</param>
        </member>
        <member name="M:MapAround.Mapping.FeatureLayer.RemoveMultiPoint(MapAround.Mapping.Feature)">
            <summary>
            Removes a multipoint feature from this layer.
            </summary>
            <param name="multiPoint">A multipoint feature to delete</param>
        </member>
        <member name="M:MapAround.Mapping.FeatureLayer.RemoveAllMultiPoints">
            <summary>
            Removes all multipoint features.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.FeatureLayer.AddPolyline(MapAround.Mapping.Feature)">
            <summary>
            Adds a polyline feature to this layer.
            </summary>
            <param name="polyline">A polyline feature to add</param>
        </member>
        <member name="M:MapAround.Mapping.FeatureLayer.RemovePolyline(System.Int32)">
            <summary>
            Removes a polyline feature from this layer.
            </summary>
            <param name="index">A zero-based index of feature (in Polylines collection) to delete</param>
        </member>
        <member name="M:MapAround.Mapping.FeatureLayer.RemovePolyline(MapAround.Mapping.Feature)">
            <summary>
            Removes a polyline feature from this layer.
            </summary>
            <param name="polyline">A polyline feature to delete</param>
        </member>
        <member name="M:MapAround.Mapping.FeatureLayer.RemoveAllPolylines">
            <summary>
            Removes all polyline features.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.FeatureLayer.AddPolygon(MapAround.Mapping.Feature)">
            <summary>
            Adds a polygon feature to this layer.
            </summary>
            <param name="polygon">A polygon feature to add</param>
        </member>
        <member name="M:MapAround.Mapping.FeatureLayer.RemovePolygon(System.Int32)">
            <summary>
            Removes a polygon feature from this layer.
            </summary>
            <param name="index">A zero-based index of feature (in Polygons collection) to delete</param>
        </member>
        <member name="M:MapAround.Mapping.FeatureLayer.RemovePolygon(MapAround.Mapping.Feature)">
            <summary>
            Removes a polygon feature from this layer.
            </summary>
            <param name="polygon">A polygon feature to delete</param>
        </member>
        <member name="M:MapAround.Mapping.FeatureLayer.RemoveAllPolygons">
            <summary>
            Removes all polygon features.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.FeatureLayer.RemoveAllFeatures">
            <summary>
            Removes all features.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.FeatureLayer.AddFeature(MapAround.Mapping.Feature)">
            <summary>
            Adds a feature to this layer.
            </summary>
            <param name="feature">Feature to add</param>
        </member>
        <member name="M:MapAround.Mapping.FeatureLayer.BuildPointsIndex(MapAround.Mapping.IndexSettings)">
            <summary>
            Builds an index of point features.
            </summary>
            <param name="indexSettings">An index settings</param>
        </member>
        <member name="M:MapAround.Mapping.FeatureLayer.BuildPolylinesIndex(MapAround.Mapping.IndexSettings)">
            <summary>
            Builds an index of linear features.
            </summary>
            <param name="indexSettings">An index settings</param>
        </member>
        <member name="M:MapAround.Mapping.FeatureLayer.BuildPolygonsIndex(MapAround.Mapping.IndexSettings)">
            <summary>
            Builds an index of areal features.
            </summary>
            <param name="indexSettings">An index settings</param> 
        </member>
        <member name="M:MapAround.Mapping.FeatureLayer.BuildPointsIndex">
            <summary>
            Builds an index of point features.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.FeatureLayer.BuildPolylinesIndex">
            <summary>
            Builds an index of linear features.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.FeatureLayer.BuildPolygonsIndex">
            <summary>
            Builds an index of areal features.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.FeatureLayer.RenderFeaturesSample(System.Drawing.Image,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Renders a sample of features of this layer.
            </summary>
            <param name="image">A System.Drawing.Image instance to render</param> 
            <param name="drawPoint">A value indicating whether a point sample will be rendered</param> 
            <param name="drawPolyline">A value indicating whether a line sample will be rendered</param> 
            <param name="drawPolygon">A value indicating whether a polygon sample will be rendered</param> 
        </member>
        <member name="M:MapAround.Mapping.FeatureLayer.CalculatePointsInRectangle(MapAround.Geometry.BoundingRectangle,System.Collections.Generic.List{MapAround.Mapping.Feature})">
            <summary>
            Adds point features that are located within specified rectangle to the list.
            </summary>
            <param name="box">A bounding rectangle</param> 
            <param name="features">A list to add features</param> 
        </member>
        <member name="M:MapAround.Mapping.FeatureLayer.CalculatePolylinesInRectangle(MapAround.Geometry.BoundingRectangle,System.Collections.Generic.List{MapAround.Mapping.Feature})">
            <summary>
            Adds polyline features which bounding rectangles intersect specified rectangle to the list.
            </summary>
            <param name="box">A bounding rectangle</param> 
            <param name="features">A list to add features</param> 
        </member>
        <member name="M:MapAround.Mapping.FeatureLayer.CalculatePolygonsInRectangle(MapAround.Geometry.BoundingRectangle,System.Collections.Generic.List{MapAround.Mapping.Feature})">
            <summary>
            Adds polygon features which bounding rectangles intersect specified rectangle to the list.
            </summary>
            <param name="box">A bounding rectangle</param> 
            <param name="features">A list to add features</param> 
        </member>
        <member name="M:MapAround.Mapping.FeatureLayer.SelectPoints(MapAround.Geometry.BoundingRectangle,System.Collections.Generic.ICollection{MapAround.Mapping.Feature})">
            <summary>
            Adds point features that are located within specified rectangle to the collection.
            </summary>
            <param name="rectangle">A bounding rectangle</param>
            <param name="features">A collection to add features</param>
        </member>
        <member name="M:MapAround.Mapping.FeatureLayer.SelectPolylines(MapAround.Geometry.BoundingRectangle,System.Collections.Generic.ICollection{MapAround.Mapping.Feature})">
            <summary>
            Adds polyline features which intersect specified rectangle to the collection.
            </summary>
            <param name="rectangle">A bounding rectangle</param> 
            <param name="features">A collection to add features</param> 
        </member>
        <member name="M:MapAround.Mapping.FeatureLayer.SelectPolygons(MapAround.Geometry.BoundingRectangle,System.Collections.Generic.ICollection{MapAround.Mapping.Feature})">
            <summary>
            Adds polygon features which intersect specified rectangle to the collection.
            </summary>
            <param name="rectangle">A bounding rectangle</param> 
            <param name="features">A collection to add features</param> 
        </member>
        <member name="M:MapAround.Mapping.FeatureLayer.SelectObjects(MapAround.Geometry.BoundingRectangle,System.Collections.Generic.ICollection{MapAround.Mapping.Feature})">
            <summary>
            Adds features which intersect specified rectangle to the collection.
            </summary>
            <param name="rectangle">A bounding rectangle</param> 
            <param name="features">A collection to add features</param>
        </member>
        <member name="M:MapAround.Mapping.FeatureLayer.SelectObject(MapAround.Geometry.ICoordinate,MapAround.Mapping.Feature@)">
            <summary>
            Selects a feature of this layer.
            <p>
            Features is handled as follows:
            1. Calculates the distance from the point features to the point of choice. 
            If the object is distant from point closer than SelectionPointRadius, it is selected.
            2. Calculates the distance from the linear features to the point of choice. 
            If the feature is distant from point closer than SelectionPointRadius, it is selected.
            3. Computes polygons, within which a point of choice is located. The first such polygon is selected.
            </p>
            <p>
            You should not make assumptions about what the features that satisfy the selection criteria 
            will be selected first. The order of selection may be dependent of the specific usage 
            of spatial indices and its settings. To find all the objects around a specified point, 
            use the <see cref="M:MapAround.Mapping.FeatureLayer.SelectObjects(MapAround.Geometry.BoundingRectangle,System.Collections.Generic.ICollection{MapAround.Mapping.Feature})"/> method.
            </p>
            </summary>
            <param name="coordinate">A selection point</param> 
            <param name="selectedFeature">Selected feature</param> 
        </member>
        <member name="M:MapAround.Mapping.FeatureLayer.SelectObject(MapAround.Geometry.ICoordinate,System.Double,System.Double,System.Drawing.ContentAlignment,MapAround.Mapping.Feature@)">
            <summary>
            Selects a feature of this layer.
            </summary>
            <param name="coordinate">The coords</param>
            <param name="width">A width of a picture</param>
            <param name="height">A height of a picture</param>
            <param name="contentAlignment">A content alignment of a picture</param>
            <param name="selectedFeature">A selected feature</param>
        </member>
        <member name="M:MapAround.Mapping.FeatureLayer.LoadFeatures">
            <summary>
            Load features from the data source.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.FeatureLayer.LoadFeatures(MapAround.Geometry.BoundingRectangle)">
            <summary>
            Load features from the data source.
            </summary>
            <param name="viewBox">A bounding rectangle defining an area which is filled with features</param>
        </member>
        <member name="M:MapAround.Mapping.FeatureLayer.QueryFeatures(MapAround.Mapping.IFeatureReceiver)">
            <summary>
            Adds the features of this layer to the receiver.
            <para>
            Only features that exist in the Features 
            collection were added. Query to layer data source 
            does not executes, the event DataSourceNeeded does not arise.
            </para>
            </summary>
            <param name="fr">An object that receives features</param> 
            <rereturns>A number of retrieved features</rereturns>
        </member>
        <member name="M:MapAround.Mapping.FeatureLayer.QueryFeatures(MapAround.Mapping.IFeatureReceiver,MapAround.Geometry.BoundingRectangle)">
            <summary>
            Adds the features of this layer to the receiver.
            <para>
            Only features that exist in the Features 
            collection were added. Query to layer data source 
            does not executes, the event DataSourceNeeded does not arise.
            </para>
            </summary>
            <param name="fr">An object that receives features</param> 
            <param name="bounds">Rectangular region you want to fill with the objects</param>
            <rereturns>A number of retrieved features</rereturns>
        </member>
        <member name="P:MapAround.Mapping.FeatureLayer.Map">
            <summary>
            Gets or sets the MapAround.Mapping.Map instance
            on which this layer is.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.FeatureLayer.Features">
            <summary>
            Enumerates a features of this layer.
            <para>
            Enumeration performs in the following order:
            point features, line features, polygonal features.
            </para>
            </summary>
        </member>
        <member name="P:MapAround.Mapping.FeatureLayer.DataSource">
            <summary>
            Gets or sets a string representing 
            the data source of this layer.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.FeatureLayer.RenderSubpixelDetails">
            <summary>
            Gets or sets a value indicating whether 
            the subpixel details of features will be 
            rendered.
            <remarks>
            Filtering of small details performs every time the map renders
            and may take some time, which depends on the selected scale 
            (pixel size). This option is useful only if the time of filtering
            and the time of rendering filtered features is less than the time 
            of rendering non-filtered features.
            </remarks>
            </summary>
        </member>
        <member name="P:MapAround.Mapping.FeatureLayer.AreFeaturesAutoLoadable">
            <summary>
            Gets or sets a value indicating whether 
            a features of this layer will be loaded
            automatically before the map rendering.
            <para>
            This property determines the policy of data queries. When the property 
            value is true, the query is executed every time you call Map.LoadFeatures. 
            If the property is false, query is not executed, but the application 
            can manage the extraction of data by itself.
            </para>
            <para>
            Data providers that supports caching can implement other 
            strategies for data retrieval. For example, to perform 
            the fetching of all data in the first request and a partial 
            recovery from the cache during subsequent queries.
            </para>
            </summary>
        </member>
        <member name="P:MapAround.Mapping.FeatureLayer.FeatureRenderer">
            <summary>
            Gets or sets an object that renders 
            features of this layer.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.FeatureLayer.DataSourceType">
            <summary>
            Gets or sets a type of data source.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.FeatureLayer.PolygonStyle">
            <summary>
            Gets or sets a style of polygonal features.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.FeatureLayer.PolylineStyle">
            <summary>
            Gets or sets a style of linear features.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.FeatureLayer.TitleStyle">
            <summary>
            Gets or sets a style of titles.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.FeatureLayer.PointStyle">
            <summary>
            Gets or sets a style of point features.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.FeatureLayer.AutoTitleSettings">
            <summary>
            Gets or sets the object that defines an automatic titles
            for this layer.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.FeatureLayer.FeaturesSelectable">
            <summary>
            Gets or sets a value indicating whether 
            is it possible to select the feratures 
            of this layer.
            </summary>
            <remarks>
            Mainly used by SelectObject() and SelectObjects() methods.
            </remarks>
        </member>
        <member name="P:MapAround.Mapping.FeatureLayer.Points">
            <summary>
            Gets a collection of point features.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.FeatureLayer.MultiPoints">
            <summary>
            Gets a collection of multipoint features.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.FeatureLayer.Polylines">
            <summary>
            Gets a collection of polyline features.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.FeatureLayer.Polygons">
            <summary>
            Gets a collection of polygonal features.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.FeatureLayer.PointsIndexExists">
            <summary>
            Gets a value indicating whether a 
            spatial index of point features exists.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.FeatureLayer.PolylinesIndexExists">
            <summary>
            Gets a value indicating whether a 
            spatial index of linear features exists.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.FeatureLayer.PolygonsIndexExists">
            <summary>
            Gets a value indicating whether a 
            spatial index of polygon features exists.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.FeatureLayer.DefaultPointsIndexSettings">
            <summary>
            Gets or sets the default index settings of point features.
            If the index type is not supported, KDTRee will be used.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.FeatureLayer.DefaultPolylinesIndexSettings">
            <summary>
            Gets or sets the default index settings of linear features.
            If the index type is not supported, KDTRee will be used.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.FeatureLayer.DefaultPolygonsIndexSettings">
            <summary>
            Gets or sets the default index settings of polygon features.
            If the index type is not supported, KDTRee will be used.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.FeatureLayer.FeatureAttributeNames">
            <summary>
            Gets or sets a names of non-spatial attributes.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.FeatureLayer.LegendSettings">
            <summary>
            Gets or sets a legend settings of this layer.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.FeatureLayer.FeatureLayerExtensions">
            <summary>
            Get Extesions by Layer
            </summary>
        </member>
        <member name="E:MapAround.Mapping.FeatureLayer.BeforePolygonRender">
            <summary>
            Raises before render a polygon feature.
            </summary>
        </member>
        <member name="E:MapAround.Mapping.FeatureLayer.BeforePolylineRender">
            <summary>
            Raises before render a polyline feature.
            </summary>
        </member>
        <member name="E:MapAround.Mapping.FeatureLayer.BeforePointRender">
            <summary>
            Raises before render apoint feature.
            </summary>
        </member>
        <member name="E:MapAround.Mapping.FeatureLayer.DataSourceNeeded">
            <summary>
            Raises when the data provider needs to perform data query.
            </summary>
        </member>
        <member name="E:MapAround.Mapping.FeatureLayer.DataSourceReadyToRelease">
            <summary>
            Raises when the data provider may release managed and unmanaged resources.
            </summary>
        </member>
        <member name="E:MapAround.Mapping.FeatureLayer.FeatureFetched">
            <summary>
            Raises when the feature is fetched.
            </summary>
        </member>
        <member name="T:MapAround.Mapping.LayerStatistics">
            <summary>
            Represents the statistical info of layer.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.LayerStatistics.FillFromLayer(MapAround.Mapping.FeatureLayer)">
            <summary>
            Calculates statistical info for specified layer.
            </summary>
            <param name="l">A layer to calculate statistics</param>
        </member>
        <member name="P:MapAround.Mapping.LayerStatistics.PointCount">
            <summary>
            Gets a number of point features. 
            </summary>
        </member>
        <member name="P:MapAround.Mapping.LayerStatistics.PolylineCount">
            <summary>
            Gets a number of linear features. 
            </summary>
        </member>
        <member name="P:MapAround.Mapping.LayerStatistics.PolygonCount">
            <summary>
            Gets a number of polyong features. 
            </summary>
        </member>
        <member name="P:MapAround.Mapping.LayerStatistics.AvgPolylinesBoxesSquare">
            <summary>
            Gets an average square of bounding rectangles of linear features.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.LayerStatistics.AvgPolygonsBoxesSquare">
            <summary>
            Gets an average square of bounding rectangles of polygon features.
            </summary>
        </member>
        <member name="T:MapAround.Mapping.LayerLegendSettings">
            <summary>
            Instances of this class describes 
            a legend elements for the layer.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.LayerLegendSettings.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance</returns>  
        </member>
        <member name="M:MapAround.Mapping.LayerLegendSettings.#ctor(System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of MapAround.Mapping.LayerLegendSettings.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.LayerLegendSettings.#ctor(MapAround.Mapping.LayerLegendSettings)">
            <summary>
            Initializes a new instance of MapAround.Mapping.LayerLegendSettings.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.LayerLegendSettings.PointSampleTitle">
            <summary>
            Gets or sets a title of point feature sample.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.LayerLegendSettings.PolylineSampleTitle">
            <summary>
            Gets or sets a title of linear feature sample.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.LayerLegendSettings.PolygonSampleTitle">
            <summary>
            Gets or sets a title of polygon feature sample.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.LayerLegendSettings.DisplayPointSample">
            <summary>
            Gets or sets a value indicating whether 
            a point sample should be displayed on a legend.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.LayerLegendSettings.DisplayPolylineSample">
            <summary>
            Gets or sets a value indicating whether 
            a line sample should be displayed on a legend.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.LayerLegendSettings.DisplayPolygonSample">
            <summary>
            Gets or sets a value indicating whether 
            a polygon sample should be displayed on a legend.
            </summary>
        </member>
        <member name="T:MapAround.Mapping.FeatureType">
            <summary>
            Enumerates types of features.
            </summary>
        </member>
        <member name="F:MapAround.Mapping.FeatureType.Point">
            <summary>
            Point type of feature.
            </summary>
        </member>
        <member name="F:MapAround.Mapping.FeatureType.Polyline">
            <summary>
            Polyline type of feature.
            </summary>
        </member>
        <member name="F:MapAround.Mapping.FeatureType.Polygon">
            <summary>
            Polygon type of feature.
            </summary>
        </member>
        <member name="F:MapAround.Mapping.FeatureType.MultiPoint">
            <summary>
            MultiPoint type of feature.
            </summary>
        </member>
        <member name="T:MapAround.Mapping.Feature">
            <summary>
            Represents a feature.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.Feature.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance</returns> 
        </member>
        <member name="M:MapAround.Mapping.Feature.#ctor(MapAround.Mapping.FeatureType)">
            <summary>
            Initializes a new instance of MapAround.Mapping.Feature.
            </summary>
            <param name="featureType">A type of feature</param>
        </member>
        <member name="M:MapAround.Mapping.Feature.#ctor(MapAround.Mapping.FeatureType,System.String)">
            <summary>
            Initializes a new instance of MapAround.Mapping.Feature.
            </summary>
            <param name="featureType">A type of feature</param>
            <param name="uniqKey">Uniq key value</param>
        </member>
        <member name="M:MapAround.Mapping.Feature.#ctor(MapAround.Geometry.IGeometry)">
            <summary>
            Initializes a new instance of MapAround.Mapping.Feature.
            </summary>
            <param name="geometry">Geometry object</param>
        </member>
        <member name="M:MapAround.Mapping.Feature.#ctor(MapAround.Geometry.IGeometry,System.String)">
            <summary>
            Initializes a new instance of MapAround.Mapping.Feature.
            </summary>
            <param name="geometry">Geometry object</param>
            <param name="uniqKey">Uniq key value</param>
        </member>
        <member name="M:MapAround.Mapping.Feature.#ctor(MapAround.Geometry.IGeometry,System.String,System.Object[])">
            <summary>
            Initializes a new instance of MapAround.Mapping.Feature.
            </summary>
            <param name="geometry">Geometry object</param>
            <param name="uniqKey">Uniq key value</param>
            <param name="attributes">An array containing attribute values</param>
        </member>
        <member name="P:MapAround.Mapping.Feature.Layer">
            <summary>
            Gets a layer having this feature.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.Feature.PointStyle">
            <summary>
            Gets or sets a style of rendering point.
            This value overrides layer settings.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.Feature.PolylineStyle">
            <summary>
            Gets or sets a style of rendering polyline.
            This value overrides layer settings.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.Feature.PolygonStyle">
            <summary>
            Gets or sets a style of rendering polygon.
            This value overrides layer settings.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.Feature.TitleStyle">
            <summary>
            Gets or sets a style of rendering title.
            This value overrides layer settings.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.Feature.Attributes">
            <summary>
            Gets or sets attribute values of this feature.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.Feature.Item(System.String)">
            <summary>
            Gets or sets an attribute value by name.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.Feature.BoundingRectangle">
            <summary>
            Gets a bounding rectangle of this feature.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.Feature.UniqKey">
            <summary>
            Gets or sets an uniq key.
            This value may use in custom purposes.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.Feature.Title">
            <summary>
            Gets or sets a title.
            <para>
            Titles renders as a text labels on map.
            </para>
            </summary>
        </member>
        <member name="P:MapAround.Mapping.Feature.Tag">
            <summary>
            Gets or sets an object which may 
            used in custom purposes.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.Feature.FeatureType">
            <summary>
            Gets a type of feature.
            <para>
            Type of feature defined by associated geometry.
            Instance of feature can not change its type.
            </para>
            </summary>
        </member>
        <member name="P:MapAround.Mapping.Feature.Selected">
            <summary>
            Gets or sets a selected state.
            <para>
            If it is true, a feature will rendered with the selection highlight.
            </para>
            </summary>
        </member>
        <member name="P:MapAround.Mapping.Feature.Visible">
            <summary>
            Get or sets visiable state.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.Feature.Point">
            <summary>
            Gets or sets a point geometry.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.Feature.MultiPoint">
            <summary>
            Gets or sets a multipoint geometry.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.Feature.Polyline">
            <summary>
            Gets or sets a polyline geometry.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.Feature.Polygon">
            <summary>
            Gets or sets a polygon geometry.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.Feature.Geometry">
            <summary>
            Gets or sets a geometry.
            </summary>
        </member>
        <member name="T:MapAround.Mapping.MapWorkspace">
            <summary>
            Represents a map workspace.
            <para>
            Instances of this class is used to store map settings like 
            a list of layers; data sources, colors, fonts, visible area, 
            the scale of the map etc.
            </para>
            </summary>
        </member>
        <member name="M:MapAround.Mapping.MapWorkspace.Load(System.String)">
            <summary>
            Loads a workspace from a file containing 
            an xml-representation of workspace.
            </summary>
            <param name="fileName">File name</param>
        </member>
        <member name="M:MapAround.Mapping.MapWorkspace.Save(System.String)">
            <summary>
            Saves xml-representation of this workspace to file.
            </summary>
            <param name="fileName">File name</param>
        </member>
        <member name="P:MapAround.Mapping.MapWorkspace.XmlRepresentation">
            <summary>
            Gets or sets an Xml-representation of workspace.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.MapWorkspace.Map">
            <summary>
            Gets or sets a MapAround.Mapping.Map 
            instance associated with this workspace.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.MapWorkspace.ViewBox">
            <summary>
            Gets or sets a bounding rectangle 
            defining a visible area of the map.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.MapWorkspace.RasterFileName">
            <summary>
            Gets or sets a filename of the raster.
            </summary>
        </member>
        <member name="T:MapAround.Mapping.RasterAlgorithms">
            <summary>
            Implements raster processing algorithms.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.RasterAlgorithms.BindRaster(System.Drawing.Bitmap,System.Drawing.Point[],MapAround.Geometry.ICoordinate[],MapAround.Geometry.BoundingRectangle@,MapAround.Mapping.RasterAlgorithms.RasterBindingProgress)">
            <summary>
            Performs a rubbersheeting transformation of raster.
            </summary>
            <param name="source">A System.Drawing.Bitmap instance containing the source image</param>
            <param name="sourceControlPoints">Control points of source</param>
            <param name="destinationControlPoints">Control points on the map</param>
            <param name="rectangle">A bounding rectangle defining a bouns of transformed raster</param>
            <param name="progress">Defines a method which is called to notify a subscriber about completion state.</param>
            <returns>A System.Drawing.Bitmap instance containing the transformed image</returns>
        </member>
        <member name="T:MapAround.Mapping.RasterAlgorithms.RasterBindingProgress">
            <summary>
            Defines a method which is called to notify a subscriber
            about completion state.
            </summary>
            <returns>Completion percent</returns>
        </member>
        <member name="T:MapAround.Mapping.IFeatureRenderer">
            <summary>
            Provides access to members of object that draws features on the map.
            MapAround.Mapping.Map.FeatureRenderer can be assigned with implementing objects.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.IFeatureRenderer.DrawPoint(MapAround.Mapping.Feature,System.Drawing.Graphics,MapAround.Mapping.PointStyle,MapAround.Mapping.TitleStyle,MapAround.Geometry.BoundingRectangle,System.Boolean,System.Double)">
            <summary>
            Draws a point feature.
            </summary>
            <param name="feature">A point feature to draw</param>
            <param name="g">A System.Drawing.Graphics instance that represents a surface for drawing a feature</param>
            <param name="style">An object defining point style</param>
            <param name="titleStyle">An object defining title style</param>
            <param name="viewBox">A bounding rectangle dfefining the drawing area</param>
            <param name="titleVisible">A value indicating whether a title is visible. This value overrides titleStyle.TitlesVisible.</param>
            <param name="scaleFactor">A number of pixels per map unit</param>
        </member>
        <member name="M:MapAround.Mapping.IFeatureRenderer.DrawPolyline(MapAround.Mapping.Feature,System.Drawing.Graphics,MapAround.Mapping.PolylineStyle,MapAround.Mapping.TitleStyle,MapAround.Geometry.BoundingRectangle,System.Boolean,System.Double)">
            <summary>
            Draws a polyline feature.
            </summary>
            <param name="feature">A polyline feature to draw</param>
            <param name="g">A System.Drawing.Graphics instance that represents a surface for drawing a feature</param>
            <param name="style">An object defining polyline style</param>
            <param name="titleStyle">An object defining title style</param>
            <param name="viewBox">A bounding rectangle dfefining the drawing area</param>
            <param name="titleVisible">A value indicating whether a title is visible. This value overrides titleStyle.TitlesVisible.</param>
            <param name="scaleFactor">A number of pixels per map unit</param>
        </member>
        <member name="M:MapAround.Mapping.IFeatureRenderer.DrawPolygon(MapAround.Mapping.Feature,System.Drawing.Graphics,MapAround.Mapping.PolygonStyle,MapAround.Mapping.TitleStyle,MapAround.Geometry.BoundingRectangle,System.Boolean,System.Double)">
            <summary>
            Draws a polygon feature.
            </summary>
            <param name="feature">A polygon feature to draw</param>
            <param name="g">A System.Drawing.Graphics instance that represents a surface for drawing a feature</param>
            <param name="style">An object defining polygon style</param>
            <param name="titleStyle">An object defining title style</param>
            <param name="viewBox">A bounding rectangle dfefining the drawing area</param>
            <param name="titleVisible">A value indicating whether a title is visible. This value overrides titleStyle.TitlesVisible.</param>
            <param name="scaleFactor">A number of pixels per map unit</param>
        </member>
        <member name="M:MapAround.Mapping.IFeatureRenderer.FlushSelectedFeatures(System.Drawing.Graphics,MapAround.Geometry.BoundingRectangle,System.Double)">
            <summary>
            Draws selected features.
            </summary>
            <param name="g">A System.Drawing.Graphics instance that represents a surface for drawing features</param>
            <param name="viewBox">A bounding rectangle dfefining the drawing area</param>
            <param name="scaleFactor">A number of pixels per map unit</param>
        </member>
        <member name="M:MapAround.Mapping.IFeatureRenderer.FlushTitles(System.Drawing.Graphics,MapAround.Geometry.BoundingRectangle,System.Double)">
            <summary>
            Draws titles of features.
            </summary>
            <param name="g">A System.Drawing.Graphics instance that represents a surface for drawing features</param>
            <param name="viewBox">A bounding rectangle dfefining the drawing area</param>
            <param name="scaleFactor">A number of pixels per map unit</param>
        </member>
        <member name="P:MapAround.Mapping.IFeatureRenderer.SelectionColor">
            <summary>
            Gets or sets a mask color of selected feature.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.IFeatureRenderer.ReduceSubpixelDetails">
            <summary>
            Gets or sets a value indicating whether 
            the subpixel details of features will be 
            rendered.
            <remarks>
            Filtering of small details performs every time the map renders
            and may take some time, which depends on the selected scale 
            (pixel size). This option is useful only if the time of filtering
            and the time of rendering filtered features is less than the time 
            of rendering non-filtered features.
            </remarks>
            </summary>
        </member>
        <member name="T:MapAround.Mapping.DefaultFeatureRenderer">
            <summary>
            Implements the MapAround.Mapping.IFeatureRenderer interface.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.DefaultFeatureRenderer.DrawPoint(MapAround.Mapping.Feature,System.Drawing.Graphics,MapAround.Mapping.PointStyle,MapAround.Mapping.TitleStyle,MapAround.Geometry.BoundingRectangle,System.Boolean,System.Double)">
            <summary>
            Draw a point.
            </summary>        
        </member>
        <member name="M:MapAround.Mapping.DefaultFeatureRenderer.DrawPolyline(MapAround.Mapping.Feature,System.Drawing.Graphics,MapAround.Mapping.PolylineStyle,MapAround.Mapping.TitleStyle,MapAround.Geometry.BoundingRectangle,System.Boolean,System.Double)">
            <summary>
            Drawing the line.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.DefaultFeatureRenderer.DrawPolygon(MapAround.Mapping.Feature,System.Drawing.Graphics,MapAround.Mapping.PolygonStyle,MapAround.Mapping.TitleStyle,MapAround.Geometry.BoundingRectangle,System.Boolean,System.Double)">
            <summary>
            Draw a polygon.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.DefaultFeatureRenderer.FlushSelectedFeatures(System.Drawing.Graphics,MapAround.Geometry.BoundingRectangle,System.Double)">
            <summary>
            Rendering selected objects.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.DefaultFeatureRenderer.FlushTitles(System.Drawing.Graphics,MapAround.Geometry.BoundingRectangle,System.Double)">
            <summary>
            Drawing object names.
            </summary>        
        </member>
        <member name="P:MapAround.Mapping.DefaultFeatureRenderer.SelectionColor">
            <summary>
            Gets or sets a mask color of selected feature.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.DefaultFeatureRenderer.ReduceSubpixelDetails">
            <summary>
            Gets or sets a value indicating whether 
            the subpixel details of features will be 
            rendered.
            <remarks>
            Filtering of small details performs every time the map renders
            and may take some time, which depends on the selected scale 
            (pixel size). This option is useful only if the time of filtering
            and the time of rendering filtered features is less than the time 
            of rendering non-filtered features.
            </remarks>
            </summary>
        </member>
        <member name="T:MapAround.Mapping.DefaultFeatureRenderer.TitleBufferElement">
            <summary>
            Buffer element labels.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.DefaultFeatureRenderer.TitleBufferElement.#ctor(MapAround.Mapping.TitleStyle,MapAround.Geometry.Segment,System.String,System.Int32)">
            <summary>
            Creates an instance of the appropriate TitleBufferElement simple inscription.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.DefaultFeatureRenderer.TitleBufferElement.#ctor(MapAround.Mapping.DefaultFeatureRenderer.FollowingTitle,MapAround.Mapping.TitleStyle,System.Int32)">
            <summary>
            Creates a copy of an inscription TitleBufferElement located along the object.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.DefaultFeatureRenderer.TitleBufferElement.FollowingTitle">
            <summary>
            Gets label located along the object.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.DefaultFeatureRenderer.TitleBufferElement.IsSimple">
            <summary>
            Gets a value indicating whether the label is simple.
            If false, then the inscription should be placed along the object.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.DefaultFeatureRenderer.TitleBufferElement.HasRendered">
            <summary>
            Gets a value indicating whether the legend is displayed on the map.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.DefaultFeatureRenderer.TitleBufferElement.Box">
            <summary>
            Gets the value of the segment defining the lower-left and 
            upper-right corner of the bounding rectangle of the image caption.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.DefaultFeatureRenderer.TitleBufferElement.Style">
            <summary>
            Gets the style of the inscription.
            </summary>
        </member>
        <member name="P:MapAround.Mapping.DefaultFeatureRenderer.TitleBufferElement.Title">
            <summary>
            Gets the row labels. Only used to display simple labels.
            </summary>
        </member>
        <member name="T:MapAround.Mapping.DefaultFeatureRenderer.PolygonBufferElement">
            <summary>
            Element buffer polygons.
            </summary>
        </member>
        <member name="T:MapAround.Mapping.DefaultFeatureRenderer.FollowingTitle">
            <summary>
            The inscription is along the object.
            </summary>
        </member>
        <member name="T:MapAround.Mapping.DefaultFeatureRenderer.FollowingTitleElement">
             <summary>
            Rectilinear element labels placed along the object.
             </summary>
        </member>
        <member name="T:MapAround.Mapping.DefaultFeatureRenderer.PolylineBufferElement">
            <summary>
            Buffer element polylines.
            </summary>
        </member>
        <member name="T:MapAround.Mapping.DefaultFeatureRenderer.PointBufferElement">
            <summary>
            Buffer element points.
            </summary>
        </member>
        <member name="M:MapAround.Mapping.RenderingUtils.BlendPixels(System.Int32,System.Int32)">
            <summary>
            Blends two pixels.
            </summary>
            <param name="pixelData1">Source pixel data (in 32bppArgb format)</param>
            <param name="pixelData2">Pixel data to blend with (in 32bppArgb format)</param>
        </member>
        <member name="T:MapAround.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MapAround.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MapAround.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:MapAround.Rendering.NamespaceDoc">
            <summary>
            Пространство имен MapAround.Rendering содержит классы, 
            выполняющие функции генерирования растров по векторным 
            данным. Это экспериментальное пространство имен для 
            исследования возможности замены GDI.
            </summary>
        </member>
        <member name="T:MapAround.Rendering.ParallelizationLevel">
            <summary>
            Степень распараллеливания процедур генерирования изображений.
            </summary>
        </member>
        <member name="F:MapAround.Rendering.ParallelizationLevel.Single">
            <summary>
            Распараллеливание не выполняется.
            </summary>
        </member>
        <member name="F:MapAround.Rendering.ParallelizationLevel.Duo">
            <summary>
            Процедуры выполняются в двух потоках.
            </summary>
        </member>
        <member name="F:MapAround.Rendering.ParallelizationLevel.Quad">
            <summary>
            Процедуры выполняются в четырех потоках.
            </summary>
        </member>
        <member name="T:MapAround.Rendering.RenderingPipeline">
            <summary>
            Конвейер рендеринга.
            </summary>
        </member>
        <member name="M:MapAround.Rendering.RenderingPipeline.Flush">
            <summary>
            Возвращает управление после завершения всех невыполненных заданий.
            </summary>
        </member>
        <member name="M:MapAround.Rendering.RenderingPipeline.Render(MapAround.Rendering.IScannable,MapAround.Rendering.FillBase)">
            <summary>
            Выводит объект.
            </summary>
            <param name="obj">Объект</param>
            <param name="fill">Заливка</param>
        </member>
        <member name="M:MapAround.Rendering.RenderingPipeline.#ctor(MapAround.Rendering.RasterData,MapAround.Rendering.SpanGenerator,MapAround.Rendering.ParallelizationLevel)">
            <summary>
            Создает экземпляр RenderingPipeline.
            </summary>
            <param name="rasterData">Растр</param>
            <param name="spanGenerator">Генератор последовательностей пикселей</param>
            <param name="parallelizationLevel">Степень распараллеливания</param>
        </member>
        <member name="P:MapAround.Rendering.RenderingPipeline.PoolSize">
            <summary>
            Количество объектов в пуле.
            <remarks>
            Большие значения увеличивают расход памяти и уменьшают время выполнения.
            </remarks>
            </summary>
        </member>
        <member name="P:MapAround.Rendering.RenderingPipeline.UnlimitedPool">
            <summary>
            Получает или устанавливает значение указывающее будет ли пакет
            заданий рендеринга ограничен значением PoolSize.
            </summary>
        </member>
        <member name="T:MapAround.Rendering.IScannable">
            <summary>
            Интерфейс объекта поддерживающего горизонтальное сканирование.
            </summary>
        </member>
        <member name="M:MapAround.Rendering.IScannable.InitScaning(System.Int32,System.Int32,System.Int32,System.Int32,MapAround.Rendering.Orientation)">
            <summary>
            Уведомляет объект о начале процесса сканирования.
            </summary>
            <param name="minX">Минимальная координата X области сканирования</param>
            <param name="maxX">Максимальная координата X области сканирования</param>
            <param name="minY">Минимальная координата Y области сканирования</param>
            <param name="maxY">Максимальная координата Y области сканирования</param>
            <param name="orientation">Направление сканирования</param>
        </member>
        <member name="M:MapAround.Rendering.IScannable.ComputeHorizontalIntersections(System.Single,System.Single[]@)">
            <summary>
            Вычисляет пересечения границ объекта с горизонтальным отрезком.
            </summary>
            <param name="scanY">Координата Y горизонтального отрезка</param>
            <param name="intersections">Пересечения</param>
        </member>
        <member name="M:MapAround.Rendering.IScannable.ComputeVerticalIntersections(System.Single,System.Single[]@)">
            <summary>
            Вычисляет пересечения границ объекта с вертикальным отрезком.
            </summary>
            <param name="scanX">Координата X вертикального отрезка</param>
            <param name="intersections">Пересечения</param>
        </member>
        <member name="P:MapAround.Rendering.IScannable.BoundingBox">
            <summary>
            Ограничивающий прямоугольник объекта.
            </summary>
        </member>
        <member name="T:MapAround.Rendering.InteriorFillMode">
            <summary>
            Режим заполнения внутренних областей.
            Тип аналогичен System.Drawing.Drawing2D.FillMode
            </summary>
        </member>
        <member name="F:MapAround.Rendering.InteriorFillMode.Alternate">
            <summary>
            Режим заполнения нечетных областей.
            </summary>
        </member>
        <member name="F:MapAround.Rendering.InteriorFillMode.Winding">
            <summary>
            Сплошной режим заполнения.
            </summary>
        </member>
        <member name="T:MapAround.Rendering.SpanGenerator">
            <summary>
            Генератор последовательностей пикселей
            для векторных данных.
            </summary>
        </member>
        <member name="M:MapAround.Rendering.SpanGenerator.GetHorizontalSpans(MapAround.Rendering.IScannable,System.Int32,System.Int32,System.Int32,System.Int32,MapAround.Rendering.FillBase)">
            <summary>
            Возвращает горизонтальные последовательности пикселей для
            геометрической фигуры.
            </summary>
            <param name="sourceGeometry"></param>
            <param name="fill">Заливка</param>
            <param name="minX"></param>
            <param name="minY"></param>
            <param name="maxX"></param>
            <param name="maxY"></param>
            <returns>Список горизонтальных последовательностей символов</returns>
        </member>
        <member name="M:MapAround.Rendering.SpanGenerator.GetVerticalSpans(MapAround.Rendering.IScannable,System.Int32,System.Int32,System.Int32,System.Int32,MapAround.Rendering.FillBase)">
            <summary>
            Возвращает вертикальные последовательности пикселей для
            геометрической фигуры.
            </summary>
            <param name="sourceGeometry"></param>
            <param name="fill">Заливка</param>
            <param name="minX"></param>
            <param name="minY"></param>
            <param name="maxX"></param>
            <param name="maxY"></param>
            <returns>Список вертикальных последовательностей символов</returns>
        </member>
        <member name="M:MapAround.Rendering.SpanGenerator.#ctor">
            <summary>
            Создает экземпляр SpanGenerator.
            </summary>
        </member>
        <member name="P:MapAround.Rendering.SpanGenerator.AntiAliasingGamma">
            <summary>
            Гамма антиалиасинга.
            </summary>
        </member>
        <member name="P:MapAround.Rendering.SpanGenerator.SubPixelLevel">
            <summary>
            Субпиксельный уровень.
            </summary>
        </member>
        <member name="T:MapAround.Rendering.SimpleCircle">
            <summary>
            Простая окружность.
            </summary>
        </member>
        <member name="M:MapAround.Rendering.SimpleCircle.Clone">
            <summary>
            Возвращает копию этого объекта.
            </summary>
        </member>
        <member name="M:MapAround.Rendering.SimpleCircle.InitScaning(System.Int32,System.Int32,System.Int32,System.Int32,MapAround.Rendering.Orientation)">
            <summary>
            Уведомляет объект о начале процесса сканирования.
            </summary>
            <param name="minX">Минимальная координата X области сканирования</param>
            <param name="maxX">Максимальная координата X области сканирования</param>
            <param name="minY">Минимальная координата Y области сканирования</param>
            <param name="maxY">Максимальная координата Y области сканирования</param>
            <param name="orientation">Направление сканирования</param>
        </member>
        <member name="M:MapAround.Rendering.SimpleCircle.ComputeHorizontalIntersections(System.Single,System.Single[]@)">
            <summary>
            Вычисляет пересечения границ объекта с горизонтальным отрезком.
            </summary>
            <param name="scanY">Координата Y горизонтального отрезка</param>
            <param name="intersections">Пересечения</param>
        </member>
        <member name="M:MapAround.Rendering.SimpleCircle.ComputeVerticalIntersections(System.Single,System.Single[]@)">
            <summary>
            Вычисляет пересечения границ объекта с вертикальным отрезком.
            </summary>
            <param name="scanX">Координата X вертикального отрезка</param>
            <param name="intersections">Пересечения</param>
        </member>
        <member name="M:MapAround.Rendering.SimpleCircle.#ctor(MapAround.Geometry.ICoordinate,System.Single)">
            <summary>
            Создает экземпляр SimpleCircle.
            </summary>
            <param name="center">Центр</param>
            <param name="radius">Радиус</param>
        </member>
        <member name="P:MapAround.Rendering.SimpleCircle.BoundingBox">
            <summary>
            Ограничивающий прямоугольник окружности.
            </summary>
        </member>
        <member name="T:MapAround.Rendering.Region">
            <summary>
            Регион (обертка для полигона).
            </summary>
        </member>
        <member name="M:MapAround.Rendering.Region.Clone">
            <summary>
            Возвращает копию этого объекта.
            </summary>
        </member>
        <member name="M:MapAround.Rendering.Region.InitScaning(System.Int32,System.Int32,System.Int32,System.Int32,MapAround.Rendering.Orientation)">
            <summary>
            Уведомляет объект о начале процесса сканирования.
            </summary>
            <param name="minX">Минимальная координата X области сканирования</param>
            <param name="maxX">Максимальная координата X области сканирования</param>
            <param name="minY">Минимальная координата Y области сканирования</param>
            <param name="maxY">Максимальная координата Y области сканирования</param>
            <param name="orientation">Направление сканирования</param>
        </member>
        <member name="M:MapAround.Rendering.Region.ComputeHorizontalIntersections(System.Single,System.Single[]@)">
            <summary>
            Вычисляет пересечения границобъекта с горизонтальным сканирующим отрезком.
            </summary>
            <param name="scanY">Координата Y сканирующего отрезка</param>
            <param name="intersections">Пересечения</param>
        </member>
        <member name="M:MapAround.Rendering.Region.ComputeVerticalIntersections(System.Single,System.Single[]@)">
            <summary>
            Вычисляет пересечения границ объекта с вертикальным сканирующим отрезком.
            </summary>
            <param name="scanX">Координата X вертикального отрезка</param>
            <param name="intersections">Пересечения</param>
        </member>
        <member name="M:MapAround.Rendering.Region.#ctor(MapAround.Geometry.Polygon,MapAround.Rendering.InteriorFillMode)">
            <summary>
            Создает экземпляр Region.
            </summary>
            <param name="polygon">Полигон</param>
            <param name="fillMode">Режим заполнения внутренних областей</param>
        </member>
        <member name="P:MapAround.Rendering.Region.FillMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:MapAround.Rendering.Region.BoundingBox">
            <summary>
            Возвращает ограничивающий прямоугольник объекта.
            </summary>
        </member>
        <member name="T:MapAround.Serialization.NamespaceDoc">
            <summary>
            The MapAround.Serialization contains interfaces and classes
            for serializing and deserializing geometries and other 
            geospatial objects.
            </summary>
        </member>
        <member name="T:MapAround.Serialization.BinaryGeometrySerializer">
            <summary>
            Serializes geometries into binary format.
            Also performs inverse operation.
            <para>
            Binary representation used by this class is non standart and 
            leaves original coordinate sequences unchanged. While other formats 
            like WKB has a strong constraints of topology and causes a changes 
            in coordinate sequences.
            </para>
            </summary>
        </member>
        <member name="M:MapAround.Serialization.BinaryGeometrySerializer.DeserializePoint(System.IO.Stream)">
            <summary>
            Deserializes an instance of MapAround.Geometry.PointD from the specified stream.
            </summary>
            <param name="stream">A stream containing the point geometry</param>
            <returns>Deserialized instance of MapAround.Geometry.PointD</returns>
        </member>
        <member name="M:MapAround.Serialization.BinaryGeometrySerializer.DeserializePolyline(System.IO.Stream)">
            <summary>
            Deserializes an instance of MapAround.Geometry.Polyline from the specified stream.
            </summary>
            <param name="stream">A stream containing the polyline geometry</param>
            <returns>Deserialized instance of MapAround.Geometry.Polyline</returns>
        </member>
        <member name="M:MapAround.Serialization.BinaryGeometrySerializer.DeserializeMultiPoint(System.IO.Stream)">
            <summary>
            Deserializes an instance of MapAround.Geometry.MultiPoint from the specified stream.
            </summary>
            <param name="stream">A stream containing the multipoint geometry</param>
            <returns>Deserialized instance of MapAround.Geometry.MultiPoint</returns>
        </member>
        <member name="M:MapAround.Serialization.BinaryGeometrySerializer.DeserializePolygon(System.IO.Stream)">
            <summary>
            Deserializes an instance of MapAround.Geometry.Polygon from the specified stream.
            </summary>
            <param name="stream">A stream containing the polygon geometry</param>
            <returns>Deserialized instance of MapAround.Geometry.Polygon</returns>
        </member>
        <member name="M:MapAround.Serialization.BinaryGeometrySerializer.DeserializeGeometry(System.IO.Stream)">
            <summary>
            Deserializes a geometry from the specified stream.
            </summary>
            <param name="stream">A stream containing the geometry</param>
            <returns>Deserialized geomtry</returns>
        </member>
        <member name="M:MapAround.Serialization.BinaryGeometrySerializer.SerializeGeometry(System.IO.Stream,MapAround.Geometry.IGeometry)">
            <summary>
            Serializes specified geometry into stream.
            </summary>
            <param name="stream">A stream to write serializing geometry</param>
            <param name="geometry">A geometry</param>
        </member>
        <member name="M:MapAround.Serialization.BinaryGeometrySerializer.SerializeMultiPoint(System.IO.Stream,MapAround.Geometry.MultiPoint)">
            <summary>
            Serializes an instance of MapAround.Geometry.MultiPoint into stream.
            </summary>
            <param name="stream">A stream to write serializing geometry</param>
            <param name="multiPoint">A multipoint geometry</param>
        </member>
        <member name="M:MapAround.Serialization.BinaryGeometrySerializer.SerializePoint(System.IO.Stream,MapAround.Geometry.PointD)">
            <summary>
            Serializes an instance of MapAround.Geometry.PointD into stream.
            </summary>
            <param name="stream">A stream to write serializing geometry</param>
            <param name="point">A point geometry</param>
        </member>
        <member name="M:MapAround.Serialization.BinaryGeometrySerializer.SerializePolyline(System.IO.Stream,MapAround.Geometry.Polyline)">
            <summary>
            Serializes an instance of MapAround.Geometry.Polyline into stream.
            </summary>
            <param name="stream">A stream to write serializing geometry</param>
            <param name="polyline">A polyline geometry</param>
        </member>
        <member name="M:MapAround.Serialization.BinaryGeometrySerializer.SerializePolygon(System.IO.Stream,MapAround.Geometry.Polygon)">
            <summary>
            Serializes an instance of MapAround.Geometry.Polygon into stream.
            </summary>
            <param name="stream">A stream to write serializing geometry</param>
            <param name="polygon">A polygon geometry</param>
        </member>
        <member name="T:MapAround.Serialization.WKTGeometrySerializer">
            <summary>
            Serializes geometries into well-known text 
            and constructs geometries from such representation.
            </summary>
        </member>
        <member name="M:MapAround.Serialization.WKTGeometrySerializer.GetPointWKT(MapAround.Geometry.PointD)">
            <summary>
            Computes a well-known text representation 
            of the point geometry.
            </summary>
            <param name="point">An instance of MapAround.Geometry.PointD to setialize</param>
            <returns>A well-known text representation of specified geometry.</returns>
        </member>
        <member name="M:MapAround.Serialization.WKTGeometrySerializer.GetPolylineWKT(MapAround.Geometry.Polyline)">
            <summary>
            Computes a well-known text representation 
            of the polyline geometry.
            </summary>
            <param name="polyline">An instance of MapAround.Geometry.Polyline to setialize</param>
            <returns>A well-known text representation of specified geometry.</returns>
        </member>
        <member name="M:MapAround.Serialization.WKTGeometrySerializer.GetMultiPointWKT(MapAround.Geometry.MultiPoint)">
            <summary>
            Computes a well-known text representation 
            of the multipoint geometry.
            </summary>
            <param name="multiPoint">An instance of MapAround.Geometry.MultiPoint to setialize</param>
            <returns>A well-known text representation of specified geometry.</returns>
        </member>
        <member name="M:MapAround.Serialization.WKTGeometrySerializer.GetPolygonWKT(MapAround.Geometry.Polygon)">
            <summary>
            Computes a well-known text representation 
            of the polygon geometry.
            </summary>
            <param name="polygon">An instance of MapAround.Geometry.Polygon to setialize</param>
            <returns>A well-known text representation of specified geometry.</returns>
        </member>
        <member name="M:MapAround.Serialization.WKTGeometrySerializer.GetPolygonWKT(MapAround.Geometry.Polygon,System.Boolean)">
            <summary>
            Computes a well-known text representation 
            of the polygon geometry.
            </summary>
            <param name="polygon">An instance of MapAround.Geometry.Polygon to setialize</param>
            <param name="reverseVerticesOrder">A value indicating whether a standart order of vertices
            should be inverted in WKT</param>
            <returns>A well-known text representation of specified geometry.</returns>
        </member>
        <member name="M:MapAround.Serialization.WKTGeometrySerializer.GetGeometryWKT(MapAround.Geometry.IGeometry)">
            <summary>
            Computes a well-known text representation of geometry.
            </summary>
            <param name="geometry">A geometry to setialize</param>
            <returns>A well-known text representation of specified geometry.</returns>
        </member>
        <member name="M:MapAround.Serialization.WKTGeometrySerializer.GeometryFromWKT(System.String)">
            <summary>
            Constructs a geometry from its well-known text representation.
            </summary>
            <returns>A constructed geometry</returns>
        </member>
        <member name="T:MapAround.Serialization.WKBGeometryType">
            <summary>
            WKB Geometry Types.
            </summary>
        </member>
        <member name="F:MapAround.Serialization.WKBGeometryType.Point">
            <summary>
            Point.
            </summary>
        </member>
        <member name="F:MapAround.Serialization.WKBGeometryType.LineString">
            <summary>
            LineString.
            </summary>
        </member>
        <member name="F:MapAround.Serialization.WKBGeometryType.Polygon">
            <summary>
            Polygon.
            </summary>
        </member>
        <member name="F:MapAround.Serialization.WKBGeometryType.MultiPoint">
            <summary>
            MultiPoint.
            </summary>
        </member>
        <member name="F:MapAround.Serialization.WKBGeometryType.MultiLineString">
            <summary>
            MultiLineString.
            </summary>
        </member>
        <member name="F:MapAround.Serialization.WKBGeometryType.MultiPolygon">
            <summary>
            MultiPolygon.
            </summary>
        </member>
        <member name="F:MapAround.Serialization.WKBGeometryType.GeometryCollection">
            <summary>
            GeometryCollection.
            </summary>
        </member>
        <member name="T:MapAround.Serialization.WKBByteOrder">
            <summary>
            Byte order.
            </summary>
        </member>
        <member name="F:MapAround.Serialization.WKBByteOrder.Xdr">
            <summary>
            XDR (Big Endian) 
            </summary>
            <remarks>
            <para>The XDR representation of an Unsigned Integer is Big Endian (most significant byte first).</para>
            <para>The XDR representation of a Double is Big Endian (sign bit is first byte).</para>
            </remarks>
        </member>
        <member name="F:MapAround.Serialization.WKBByteOrder.Ndr">
            <summary>
            NDR (Little Endian) 
            </summary>
            <remarks>
            <para>The NDR representation of an Unsigned Integer is Little Endian (least significant byte first).</para>
            <para>The NDR representation of a Double is Little Endian (sign bit is last byte).</para>
            </remarks>
        </member>
        <member name="T:MapAround.Serialization.WKBGeometrySerializer">
            <summary>
            Serializes geometries into well-known binary 
            and constructs them from such representation.
            </summary>
        </member>
        <member name="M:MapAround.Serialization.WKBGeometrySerializer.writeUInt32(System.UInt32,System.IO.Stream,MapAround.Serialization.WKBByteOrder)">
            <summary>
            Writes an unsigned integer to stream using specified byte order.
            </summary>
            <param name="value">An integer value to write</param>
            <param name="stream">A stream instance</param>
            <param name="byteOrder">A byte order</param>
        </member>
        <member name="M:MapAround.Serialization.WKBGeometrySerializer.writeDouble(System.Double,System.IO.Stream,MapAround.Serialization.WKBByteOrder)">
            <summary>
            Writes a double value to stream using specified byte order.
            </summary>
            <param name="value">A double value to write</param>
            <param name="stream">A stream instance</param>
            <param name="byteOrder">A byte order</param>
        </member>
        <member name="M:MapAround.Serialization.WKBGeometrySerializer.SerializeGeometry(System.IO.Stream,MapAround.Geometry.IGeometry,MapAround.Serialization.WKBByteOrder)">
            <summary>
            Serializes a geometry into stream using a specified byte order.
            </summary>
            <param name="stream">A stream instance</param>
            <param name="geometry">A geometry to serialize</param>
            /// <param name="byteOrder">A byte order which is used to write integer and double values</param>
        </member>
        <member name="M:MapAround.Serialization.WKBGeometrySerializer.SerializeMultiPoint(System.IO.Stream,MapAround.Geometry.MultiPoint,MapAround.Serialization.WKBByteOrder)">
            <summary>
            Serializes a multipoint geometry into stream using a specified byte order.
            </summary>
            <param name="stream">A stream instance</param>
            <param name="multiPoint">A multipoint geometry to serialize</param>
            <param name="byteOrder">A byte order which is used to write integer and double values</param>
        </member>
        <member name="M:MapAround.Serialization.WKBGeometrySerializer.SerializePoint(System.IO.Stream,MapAround.Geometry.PointD,MapAround.Serialization.WKBByteOrder)">
            <summary>
            Serializes a point geometry into stream using a specified byte order.
            </summary>
            <param name="stream">A stream instance</param>
            <param name="point">A point geometry to serialize</param>
            <param name="byteOrder">A byte order which is used to write integer and double values</param>
        </member>
        <member name="M:MapAround.Serialization.WKBGeometrySerializer.SerializePolyline(System.IO.Stream,MapAround.Geometry.Polyline,MapAround.Serialization.WKBByteOrder)">
            <summary>
            Serializes a polyline geometry into stream using a specified byte order.
            </summary>
            <param name="stream">A stream instance</param>
            <param name="polyline">A polyline geometry to serialize</param>
            <param name="byteOrder">A byte order which is used to write integer and double values</param>
        </member>
        <member name="M:MapAround.Serialization.WKBGeometrySerializer.SerializePolygon(System.IO.Stream,MapAround.Geometry.Polygon,MapAround.Serialization.WKBByteOrder)">
            <summary>
            Serializes a polygon geometry into stream using a specified byte order.
            </summary>
            <param name="stream">A stream instance</param>
            <param name="polygon">A polygon geometry to serialize</param>
            <param name="byteOrder">A byte order which is used to write integer and double values</param>
        </member>
        <member name="M:MapAround.Serialization.WKBGeometrySerializer.SerializePolygon(System.IO.Stream,MapAround.Geometry.Polygon,MapAround.Serialization.WKBByteOrder,System.Boolean)">
            <summary>
            Serializes a polygon geometry into stream using a specified byte order.
            </summary>
            <param name="stream">A stream instance</param>
            <param name="polygon">A polygon geometry to serialize</param>
            <param name="byteOrder">A byte order which is used to write integer and double values</param>
            <param name="reverseVertices">A value indicating whether a standart order of vertices
            should be inverted in WKB</param>
        </member>
        <member name="M:MapAround.Serialization.WKBGeometrySerializer.DeserializeGeometry(System.IO.Stream)">
            <summary>
            Seserializes geometry from its well-known binary representation.
            </summary>
            <param name="stream">A stream containing well-known binary representation of geometry</param>
            <returns>A deserialized geometry</returns>
        </member>
        <member name="T:MapAround.Serialization.CoordinateSystemWktDeserializer">
            <summary>
            Deserializes coordinate system objects from well-known text.
            </summary>
        </member>
        <member name="M:MapAround.Serialization.CoordinateSystemWktDeserializer.Parse(System.String)">
            <summary>
            Constructs a coordinate system object from well-known text.
            </summary>
            <param name="wkt">Well-known text representation of object</param>
            <returns>An object constructed from well-known text</returns>
            <exception cref="T:System.ArgumentException">Raises when parsing of string fails.</exception>
        </member>
        <member name="M:MapAround.Serialization.CoordinateSystemWktDeserializer.ReadUnit(MapAround.IO.WktStreamTokenizer)">
            <summary>
            Reads a unit.
            </summary>
        </member>
        <member name="M:MapAround.Serialization.CoordinateSystemWktDeserializer.ReadAuthority(MapAround.IO.WktStreamTokenizer,System.String@,System.Int64@)">
            <summary>
            Reads am authority and authority code.
            </summary>
        </member>
        <member name="M:MapAround.Serialization.CoordinateSystemWktDeserializer.ReadLinearUnit(MapAround.IO.WktStreamTokenizer)">
            <summary>
            Reads a linear unit.
            </summary>
        </member>
        <member name="M:MapAround.Serialization.CoordinateSystemWktDeserializer.ReadAngularUnit(MapAround.IO.WktStreamTokenizer)">
            <summary>
            Reads an anglular unit.
            </summary>
        </member>
        <member name="M:MapAround.Serialization.CoordinateSystemWktDeserializer.ReadAxis(MapAround.IO.WktStreamTokenizer)">
            <summary>
            Reads an axis info.
            </summary>
        </member>
        <member name="M:MapAround.Serialization.CoordinateSystemWktDeserializer.ReadCoordinateSystem(System.String,MapAround.IO.WktStreamTokenizer)">
            <summary>
            Reads a coordinate system.
            </summary>
        </member>
        <member name="M:MapAround.Serialization.CoordinateSystemWktDeserializer.ReadWGS84ConversionInfo(MapAround.IO.WktStreamTokenizer)">
            <summary>
            Reads a WGS84 conversion info.
            </summary>
        </member>
        <member name="M:MapAround.Serialization.CoordinateSystemWktDeserializer.ReadEllipsoid(MapAround.IO.WktStreamTokenizer)">
            <summary>
            Reads an ellipsiod.
            </summary>
        </member>
        <member name="M:MapAround.Serialization.CoordinateSystemWktDeserializer.ReadProjection(MapAround.IO.WktStreamTokenizer)">
            <summary>
            Reads a projection.
            </summary>
        </member>
        <member name="M:MapAround.Serialization.CoordinateSystemWktDeserializer.ReadProjectedCoordinateSystem(MapAround.IO.WktStreamTokenizer)">
            <summary>
            Reads a projected coordinate system.
            </summary>
        </member>
        <member name="M:MapAround.Serialization.CoordinateSystemWktDeserializer.ReadGeographicCoordinateSystem(MapAround.IO.WktStreamTokenizer)">
            <summary>
            Reads a geographic coordinate system.
            </summary>
        </member>
        <member name="M:MapAround.Serialization.CoordinateSystemWktDeserializer.ReadHorizontalDatum(MapAround.IO.WktStreamTokenizer)">
            <summary>
            Reads a horizontal datum.
            </summary>
        </member>
        <member name="M:MapAround.Serialization.CoordinateSystemWktDeserializer.ReadPrimeMeridian(MapAround.IO.WktStreamTokenizer)">
            <summary>
            Reads a prime meridian.
            </summary>
        </member>
        <member name="T:MapAround.UI.NamespaceDoc">
            <summary>
            The MapAround.UI namespace contains interfaces and classes
            which may used in the user interface implementations.
            </summary>
        </member>
        <member name="T:MapAround.UI.LegendElement">
            <summary>
            Represents a legent element.
            </summary>
        </member>
        <member name="M:MapAround.UI.LegendElement.#ctor(System.Drawing.Image,System.String)">
            <summary>
            Initializes a new instance of MapAround.UI.LegendElement.
            </summary>
            <param name="image">A System.Drawing.Image instance containing the image of element</param>
            <param name="label">A label of the element</param>
        </member>
        <member name="P:MapAround.UI.LegendElement.Label">
            <summary>
            Gets or sets a label.
            </summary>
        </member>
        <member name="P:MapAround.UI.LegendElement.Image">
            <summary>
            Gets or sets an image.
            </summary>
        </member>
        <member name="T:MapAround.UI.LegendBase">
            <summary>
            Base class for legend classes.
            <para>
            Contains common methods for managing elements.
            </para>
            </summary>
        </member>
        <member name="M:MapAround.UI.LegendBase.CheckNewElement(MapAround.UI.LegendElement)">
            <summary>
            Checks an element.
            <para>
            Implementations should throw an exception if an element
            may not be added.
            </para>
            </summary>
            <param name="element">An element to check</param>
        </member>
        <member name="M:MapAround.UI.LegendBase.CheckCaption(System.String)">
            <summary>
            Checks a legend caption.
            <para>
            Implementations should throw an exception 
            if a caption value is impossible.
            </para>
            </summary>
            <param name="caption">A caption value to check</param>
        </member>
        <member name="M:MapAround.UI.LegendBase.AddElement(MapAround.UI.LegendElement)">
            <summary>
            Adds an element to this legend.
            </summary>
            <param name="element">An element to add</param>
        </member>
        <member name="M:MapAround.UI.LegendBase.InsertElement(MapAround.UI.LegendElement,System.Int32)">
            <summary>
            Interts an element to this legend.
            </summary>
            <param name="element">An element to insert</param>
            <param name="index">A zero-based index at which insert the element</param>
        </member>
        <member name="M:MapAround.UI.LegendBase.AddElementsForLayer(MapAround.Mapping.LayerBase,System.Int32,System.Int32)">
            <summary>
            Creates legend elements for the specified layer and adds it
            to this legend.
            </summary>
            <param name="layer">A layer which is used to generate elements</param>
            <param name="imagesWidth">A value specifying a width of images of the elements</param>
            <param name="imagesHeight">A value specifying a height of images of the elements</param>
        </member>
        <member name="M:MapAround.UI.LegendBase.BuildLegendForMap(MapAround.Mapping.Map,System.Int32,System.Int32)">
            <summary>
            Builds a legend for a layers of a map.
            </summary>
        </member>
        <member name="M:MapAround.UI.LegendBase.ClearElements">
            <summary>
            Removes all elements from this legend.
            </summary>
        </member>
        <member name="P:MapAround.UI.LegendBase.Caption">
            <summary>
            Gets or sets a caption value.
            </summary>
        </member>
        <member name="P:MapAround.UI.LegendBase.Elements">
            <summary>
            Gets a collection of elements.
            </summary>
        </member>
        <member name="T:MapAround.UI.ImageLegend">
            <summary>
            Represents a legend which appears as a simple image.
            </summary>
        </member>
        <member name="M:MapAround.UI.ImageLegend.CheckNewElement(MapAround.UI.LegendElement)">
            <summary>
            Checks an element.
            </summary>
            <param name="element">An element to check</param>
        </member>
        <member name="M:MapAround.UI.ImageLegend.CheckCaption(System.String)">
            <summary>
            Checks a legend caption.
            <para>
            Implementations should throw an exception 
            if a caption value is impossible.
            </para>
            </summary>
            <param name="caption">A caption value to check</param>
        </member>
        <member name="M:MapAround.UI.ImageLegend.DrawLegend">
            <summary>
            Generates a legend bitmap.
            </summary>
        </member>
        <member name="P:MapAround.UI.ImageLegend.Width">
            <summary>
            Gets a width of a legend image in pixels.
            </summary>
        </member>
        <member name="P:MapAround.UI.ImageLegend.Height">
            <summary>
            Gets a height of a legend image in pixels.
            </summary>
        </member>
        <member name="P:MapAround.UI.ImageLegend.Margin">
            <summary>
            Gets or sets an indent of drawing area 
            from the edges of the image in pixels.
            </summary>
        </member>
        <member name="P:MapAround.UI.ImageLegend.ElementHorizontalSpacing">
            <summary>
            Gets or sets a horizontal spacing between elements in pixels.
            </summary>
        </member>
        <member name="P:MapAround.UI.ImageLegend.ElementsVerticalSpacing">
            <summary>
            Gets or sets a vertical spacing between elements in pixels.
            </summary>
        </member>
        <member name="P:MapAround.UI.ImageLegend.ElementFont">
            <summary>
            Gets or sets a font of element labels.
            </summary>
        </member>
        <member name="P:MapAround.UI.ImageLegend.CaptionFont">
            <summary>
            Gets or sets a font used to 
            display a caption of this legend.
            </summary>
        </member>
        <member name="P:MapAround.UI.ImageLegend.ElementLabelsColor">
            <summary>
            Gets or sets a color of element labels.
            </summary>
        </member>
        <member name="P:MapAround.UI.ImageLegend.CaptionColor">
            <summary>
            Gets or sets a color of caption.
            </summary>
        </member>
        <member name="P:MapAround.UI.ImageLegend.BackgroundColor">
            <summary>
            Gets or sets a background color of this legeng.
            </summary>
        </member>
        <member name="T:MapAround.Web.IMapServer">
            <summary>
            Map server interface
            </summary>
        </member>
        <member name="M:MapAround.Web.IMapServer.GetResponse(System.Collections.Specialized.NameValueCollection,System.IO.Stream,System.String@)">
            <summary>
            Create response
            </summary>        
        </member>
        <member name="P:MapAround.Web.IMapServer.SupportServiceType">
            <summary>
            Get  the type of support the service
            </summary>
        </member>
        <member name="P:MapAround.Web.IMapServer.ImageQuality">
            <summary>
            Sets an integer value defining the quality
            of the response images.
            <para>
            The smaller value is set the stronger compression 
            level is used to pack the result image.
            The value must be in the range from 0 to 100.
            </para>
            </summary>
        </member>
        <member name="P:MapAround.Web.IMapServer.DrawingRequestSemaphore">
            <summary>
            Sets a System.Threading.Semaphore instance 
            to limit the number of simultaneously drawing images.
            <remarks>
            Use this property to limit the usage of GDI resources.
            </remarks>
            </summary>
        </member>
        <member name="P:MapAround.Web.IMapServer.DrawingResourcesTimeOut">
            <summary>
            Sets an interval for waiting a release of GDI 
            resources to generate the map image. Use with 
            DrawingRequestSemaphore.
            </summary>
        </member>
        <member name="P:MapAround.Web.IMapServer.TileCacheAccessor">
            <summary>
            Sets an object providing access to the cache of tiles.
            </summary>
        </member>
        <member name="P:MapAround.Web.IMapServer.JSONCacheAccessor">
            <summary>
            Sets an object providing access to the cache of JSON objects.
            </summary>
        </member>
        <member name="P:MapAround.Web.IMapServer.Map">
            <summary>
            Sets the MapAround.Mapping.Map instance
            which is used to render images and generate 
            other responces.
            </summary>
        </member>
        <member name="P:MapAround.Web.IMapServer.GutterSize">
            <summary>
            Sets the gutter size in pizels.
            Gutters causes a rendered images are slightly large sizes, 
            but eliminates undesirable edge effects like clipping symbols.
            Gutters do not affect the sizes of the final images because 
            they are cut.
            </summary>
        </member>
        <member name="P:MapAround.Web.IMapServer.SelectionMargin">
            <summary>
            Sets a value (in pixels) defining
            the selection tolerance.
            This value should be used to tune up the selection behavior.
            </summary>
        </member>
        <member name="E:MapAround.Web.IMapServer.FeaturesInfoNeeded">
            <summary>
            Raises when in response to a GetFeatureInfo request need
            to be placed the information about the selected features.
            </summary>
        </member>
        <member name="E:MapAround.Web.IMapServer.BeforeRenderNewImage">
            <summary>
            Rasies before the new map image rendering.
            If the requested image exists in cache, the event does not occur.
            <remarks>
            Use this event to execute long runnig operations such as extraction 
            of spatial data from a file or database in the when they are really 
            needed.
            </remarks>
            </summary>
        </member>
        <member name="E:MapAround.Web.IMapServer.PrepareRenderFeatureLayer">
            <summary>
            Rasies before the new Layer  rendering.
            </summary>
        </member>
        <member name="E:MapAround.Web.IMapServer.UnknownRequest">
            <summary>
            Raises when the value of REQUEST does not match any of those listed in 
            Web Map Service Implementation Specification V 1.1.1. Handler subscribed 
            to this event should generate a response to the request itself, or to 
            signal that the request may not be processed.
            </summary>
        </member>
        <member name="T:MapAround.Web.MapServerBase">
            <summary>
            Базова реализация сервера WMxS
            </summary>
        </member>
        <member name="F:MapAround.Web.MapServerBase._syncRoot">
            <summary>
            Service description
            </summary>        
        </member>
        <member name="F:MapAround.Web.MapServerBase.version">
            <summary>
            Версия сервера.
            </summary>
        </member>
        <member name="F:MapAround.Web.MapServerBase.serverType">
             <summary>        
            Тип Сервера.
             </summary>
        </member>
        <member name="M:MapAround.Web.MapServerBase.#ctor(System.String,System.String,MapAround.Web.Wms.BaseServiceDescription)">
            <summary>
            Конструктор.
            </summary>        
            <param name="Version">Версия.</param>
            <param name="ServiceType">Тип сервиса.</param>
            <param name="description">Описание сервиса</param>
        </member>
        <member name="M:MapAround.Web.MapServerBase.GetImage(System.Int32,System.Int32,System.Drawing.Color,MapAround.Mapping.LayerBase[],MapAround.Geometry.BoundingRectangle)">
            <summary>
            Gets image
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="backColor"></param>
            <param name="useLayers"></param>
            <param name="bboxWithGutters"></param>
            <returns></returns>
        </member>
        <member name="M:MapAround.Web.MapServerBase.WriteLayer(Newtonsoft.Json.Linq.JObject,MapAround.Mapping.FeatureLayer,MapAround.Geometry.BoundingRectangle,MapAround.Geometry.BoundingRectangle,System.Double,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Writes information about layers
            </summary>
        </member>
        <member name="M:MapAround.Web.MapServerBase.GetVector(System.Int32,System.Int32,System.Int32,MapAround.Mapping.LayerBase[],MapAround.Geometry.BoundingRectangle,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Returns a vector of objects
            </summary>
        </member>
        <member name="M:MapAround.Web.MapServerBase.GetVectorInfo(System.Collections.Specialized.NameValueCollection,System.IO.Stream,System.String@)">
            <summary>
            Получение информации о карте в формате json.
            </summary>       
        </member>
        <member name="M:MapAround.Web.MapServerBase.CheckRequestParams(System.Collections.Specialized.NameValueCollection,System.IO.Stream,System.String@,MapAround.Geometry.BoundingRectangle@,System.Int32@,System.Int32@)">
            <summary>
            Checks and tries to parse special request params for WMxS server
            WMS: BBOX, WIDTH, HEIGHT, SRS
            WMTS: TILEMATRIXSET, TILEMATRIX, TILEROW, TILECOL, SRS
            </summary>
            <param name="requestParams"></param>
            <param name="responseOutputStream"></param>
            <param name="responseContentType"></param>
            <param name="originalBbox"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:MapAround.Web.MapServerBase.GetImageFromChach(MapAround.Mapping.LayerBase,System.Byte[]@,MapAround.Geometry.BoundingRectangle)">
            <summary>
            Загрузка данных из кэша
            </summary>        
        </member>
        <member name="M:MapAround.Web.MapServerBase.SetImageToChach(MapAround.Mapping.LayerBase,System.Drawing.Image,System.Byte[],MapAround.Geometry.BoundingRectangle)">
            <summary>
             Сохранения данных в кэш.
            </summary>        
        </member>
        <member name="M:MapAround.Web.MapServerBase.GetJSONFromCache(MapAround.Mapping.LayerBase,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Gets a JSON object from a cache
            </summary>
        </member>
        <member name="M:MapAround.Web.MapServerBase.SetJSONToCache(MapAround.Mapping.LayerBase,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Sets a JSON object to a cache
            </summary>
        </member>
        <member name="M:MapAround.Web.MapServerBase.getTileString(MapAround.Geometry.BoundingRectangle)">
            <summary>
            Получение текстового описания области видимости.
            </summary>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="M:MapAround.Web.MapServerBase.CopyImageClipped(System.Drawing.Image,System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Копирования картинки с обрезанием.
            </summary>
        </member>
        <member name="M:MapAround.Web.MapServerBase.WmsException(MapAround.Web.MapServerBase.WmsExceptionCode,System.String,System.IO.Stream,System.String@)">
            <summary>
            Writes an error message into specified stream in compliance to WMS standard.
            </summary>
            <param name="code">The WMS error code</param>
            <param name="Message">The error message</param>
            <param name="responseOutputStream">The System.IO.Stream to write the error message</param>
            <param name="responseContentType">String for mime-type of response</param>
        </member>
        <member name="M:MapAround.Web.MapServerBase.WmtsException(MapAround.Web.MapServerBase.WmtsExceptionCode,System.String,System.IO.Stream,System.String@)">
            <summary>
            Writes an error message into specified stream in compliance to WMTS standard.
            </summary>
            <param name="code">The WMTS error code</param>
            <param name="Message">The error message</param>
            <param name="responseOutputStream">The System.IO.Stream to write the error message</param>
            <param name="responseContentType">String for mime-type of response</param>
        </member>
        <member name="M:MapAround.Web.MapServerBase.OnFeaturesInfoNeeded(MapAround.Web.Wms.WmsFeaturesInfoNeededEventArgs)">
            <summary>
            Вызвать событие FeaturesInfoNeeded
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:MapAround.Web.MapServerBase.OnBeforeRenderNewImage(MapAround.Web.Wms.RenderNewImageEventArgs)">
            <summary>
            Вызвать событие BeforeRenderNewImage
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:MapAround.Web.MapServerBase.OnPrepareRenderFeatureLayer(MapAround.Web.Wms.PrepareRenderFeatureLayerArgs)">
            <summary>
            Вызвать событие PrepareRenderFeatureLayer
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:MapAround.Web.MapServerBase.OnUnknownRequest(MapAround.Web.Wms.WmsUnknownRequestEventArgs)">
            <summary>
            Вызвать событие UnknownRequest
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:MapAround.Web.MapServerBase.TestEnvironment(System.IO.Stream,System.String@)">
            <summary>
            Проверка настройки окружения.
            </summary>
        </member>
        <member name="M:MapAround.Web.MapServerBase.TestCommonParams(System.Collections.Specialized.NameValueCollection,System.IO.Stream,System.String@)">
            <summary>
            Проверка общих параметров запроса.
            </summary>                
        </member>
        <member name="M:MapAround.Web.MapServerBase.GetCapabilities(System.Collections.Specialized.NameValueCollection,System.IO.Stream,System.String@)">
            <summary>
            Запрос GetCapabilities
            </summary>
        </member>
        <member name="M:MapAround.Web.MapServerBase.GetFeatureInfo(System.Collections.Specialized.NameValueCollection,System.IO.Stream,System.String@)">
            <summary>
            Запрос GetFeatureInfo
            </summary>       
        </member>
        <member name="M:MapAround.Web.MapServerBase.RequestAction(System.Collections.Specialized.NameValueCollection,System.IO.Stream,System.String@)">
            <summary>
            Перенаправляет на обработчик запроса.
            </summary>        
            <returns>Если <code>false</code> - обработчик не был найден.</returns>
        </member>
        <member name="M:MapAround.Web.MapServerBase.GetResponse(System.Collections.Specialized.NameValueCollection,System.IO.Stream,System.String@)">
            <summary>
            Create response
            </summary>        
        </member>
        <member name="M:MapAround.Web.MapServerBase.ParseBbox(System.String)">
            <summary>
            Чтение BBOX;
            </summary>        
        </member>
        <member name="P:MapAround.Web.MapServerBase.SupportServiceType">
            <summary>
            Get  the type of support the service
            </summary>
        </member>
        <member name="P:MapAround.Web.MapServerBase.ImageQuality">
            <summary>
            Gets or sets an integer value defining the quality
            of the response images.
            <para>
            The smaller value is set the stronger compression 
            level is used to pack the result image.
            The value must be in the range from 0 to 100.
            </para>
            </summary>
        </member>
        <member name="P:MapAround.Web.MapServerBase.DrawingRequestSemaphore">
            <summary>
            Gets or sets a System.Threading.Semaphore instance 
            to limit the number of simultaneously drawing images.
            <remarks>
            Use this property to limit the usage of GDI resources.
            </remarks>
            </summary>
        </member>
        <member name="P:MapAround.Web.MapServerBase.DrawingResourcesTimeOut">
            <summary>
            Gets or sets an interval for waiting a release of GDI 
            resources to generate the map image. Use with 
            DrawingRequestSemaphore.
            </summary>
        </member>
        <member name="P:MapAround.Web.MapServerBase.TileCacheAccessor">
            <summary>
            Gets or sets an object providing access to the cache of tiles.
            </summary>
        </member>
        <member name="P:MapAround.Web.MapServerBase.JSONCacheAccessor">
            <summary>
            Gets or sets an object providing accsess to the cache of JSON objects.
            </summary>
        </member>
        <member name="P:MapAround.Web.MapServerBase.Map">
            <summary>
            Gets or sets the MapAround.Mapping.Map instance
            which is used to render images and generate 
            other responces.
            </summary>
        </member>
        <member name="P:MapAround.Web.MapServerBase.GutterSize">
            <summary>
            Gets or sets the gutter size in pizels.
            Gutters causes a rendered images are slightly large sizes, 
            but eliminates undesirable edge effects like clipping symbols.
            Gutters do not affect the sizes of the final images because 
            they are cut.
            </summary>
        </member>
        <member name="P:MapAround.Web.MapServerBase.SelectionMargin">
            <summary>
            Gets or sets a value (in pixels) defining
            the selection tolerance.
            This value should be used to tune up the selection behavior.
            </summary>
        </member>
        <member name="E:MapAround.Web.MapServerBase.FeaturesInfoNeeded">
            <summary>
            Raises when in response to a GetFeatureInfo request need
            to be placed the information about the selected features.
            </summary>
        </member>
        <member name="E:MapAround.Web.MapServerBase.BeforeRenderNewImage">
            <summary>
            Rasies before the new map image rendering.
            If the requested image exists in cache, the event does not occur.
            <remarks>
            Use this event to execute long runnig operations such as extraction 
            of spatial data from a file or database in the when they are really 
            needed.
            </remarks>
            </summary>
        </member>
        <member name="E:MapAround.Web.MapServerBase.PrepareRenderFeatureLayer">
            <summary>
            Rasies before the new Layer  rendering.
            </summary>
        </member>
        <member name="E:MapAround.Web.MapServerBase.UnknownRequest">
            <summary>
            Raises when the value of REQUEST does not match any of those listed in 
            Web Map Service Implementation Specification V 1.1.1. Handler subscribed 
            to this event should generate a response to the request itself, or to 
            signal that the request may not be processed.
            </summary>
        </member>
        <member name="T:MapAround.Web.MapServerBase.WmsExceptionCode">
            <summary>
            Represents WMS error codes.
            </summary>
        </member>
        <member name="F:MapAround.Web.MapServerBase.WmsExceptionCode.InvalidFormat">
            <summary>
            Request contains a Format not offered by the server.
            </summary>
        </member>
        <member name="F:MapAround.Web.MapServerBase.WmsExceptionCode.InvalidSRS">
            <summary>
            Request contains a SRS not offered by the server for one or more of the
            Layers in the request.
            </summary>
        </member>
        <member name="F:MapAround.Web.MapServerBase.WmsExceptionCode.LayerNotDefined">
            <summary>
            GetMap request is for a Layer not offered by the server, or GetFeatureInfo
            request is for a Layer not shown on the map.
            </summary>
        </member>
        <member name="F:MapAround.Web.MapServerBase.WmsExceptionCode.StyleNotDefined">
            <summary>
            Request is for a Layer in a Style not offered by the server.
            </summary>
        </member>
        <member name="F:MapAround.Web.MapServerBase.WmsExceptionCode.LayerNotQueryable">
            <summary>
            GetFeatureInfo request is applied to a Layer which is not declared queryable.
            </summary>
        </member>
        <member name="F:MapAround.Web.MapServerBase.WmsExceptionCode.InvalidPoint">
            <summary>
            GetFeatureInfo request contains invalid X or Y value.
            </summary>
        </member>
        <member name="F:MapAround.Web.MapServerBase.WmsExceptionCode.CurrentUpdateSequence">
            <summary>
            Value of (optional) UpdateSequence parameter in GetCapabilities request is
            equal to current value of service metadata update sequence number.
            </summary>
        </member>
        <member name="F:MapAround.Web.MapServerBase.WmsExceptionCode.InvalidUpdateSequence">
            <summary>
            Value of (optional) UpdateSequence parameter in GetCapabilities request is
            greater than current value of service metadata update sequence number.
            </summary>
        </member>
        <member name="F:MapAround.Web.MapServerBase.WmsExceptionCode.MissingDimensionValue">
            <summary>
            Request does not include a sample dimension value, and the server did not
            declare a default value for that dimension.
            </summary>
        </member>
        <member name="F:MapAround.Web.MapServerBase.WmsExceptionCode.InvalidDimensionValue">
            <summary>
            Request contains an invalid sample dimension value.
            </summary>
        </member>
        <member name="F:MapAround.Web.MapServerBase.WmsExceptionCode.OperationNotSupported">
            <summary>
            Request is for an optional operation that is not supported by the server.
            </summary>
        </member>
        <member name="F:MapAround.Web.MapServerBase.WmsExceptionCode.NotApplicable">
            <summary>
            No error code
            </summary>
        </member>
        <member name="T:MapAround.Web.MapServerBase.WmtsExceptionCode">
            <summary>
            Represents WMTS error codes.
            </summary>
        </member>
        <member name="F:MapAround.Web.MapServerBase.WmtsExceptionCode.InvalidFormat">
            <summary>
            Request contains a Format not offered by the server.
            </summary>
        </member>
        <member name="F:MapAround.Web.MapServerBase.WmtsExceptionCode.InvalidSRS">
            <summary>
            Request contains a SRS not offered by the server for one or more of the
            Layers in the request.
            </summary>
        </member>
        <member name="F:MapAround.Web.MapServerBase.WmtsExceptionCode.LayerNotDefined">
            <summary>
            GetMap request is for a Layer not offered by the server, or GetFeatureInfo
            request is for a Layer not shown on the map.
            </summary>
        </member>
        <member name="F:MapAround.Web.MapServerBase.WmtsExceptionCode.StyleNotDefined">
            <summary>
            Request is for a Layer in a Style not offered by the server.
            </summary>
        </member>
        <member name="F:MapAround.Web.MapServerBase.WmtsExceptionCode.LayerNotQueryable">
            <summary>
            GetFeatureInfo request is applied to a Layer which is not declared queryable.
            </summary>
        </member>
        <member name="F:MapAround.Web.MapServerBase.WmtsExceptionCode.InvalidPoint">
            <summary>
            GetFeatureInfo request contains invalid X or Y value.
            </summary>
        </member>
        <member name="F:MapAround.Web.MapServerBase.WmtsExceptionCode.CurrentUpdateSequence">
            <summary>
            Value of (optional) UpdateSequence parameter in GetCapabilities request is
            equal to current value of service metadata update sequence number.
            </summary>
        </member>
        <member name="F:MapAround.Web.MapServerBase.WmtsExceptionCode.InvalidUpdateSequence">
            <summary>
            Value of (optional) UpdateSequence parameter in GetCapabilities request is
            greater than current value of service metadata update sequence number.
            </summary>
        </member>
        <member name="F:MapAround.Web.MapServerBase.WmtsExceptionCode.MissingDimensionValue">
            <summary>
            Request does not include a sample dimension value, and the server did not
            declare a default value for that dimension.
            </summary>
        </member>
        <member name="F:MapAround.Web.MapServerBase.WmtsExceptionCode.InvalidDimensionValue">
            <summary>
            Request contains an invalid sample dimension value.
            </summary>
        </member>
        <member name="F:MapAround.Web.MapServerBase.WmtsExceptionCode.OperationNotSupported">
            <summary>
            Request is for an optional operation that is not supported by the server.
            </summary>
        </member>
        <member name="F:MapAround.Web.MapServerBase.WmtsExceptionCode.NotApplicable">
            <summary>
            No error code
            </summary>
        </member>
        <member name="T:MapAround.Web.JSONMpHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:MapAround.Web.JSONMpHelper.DrawPoint(MapAround.Mapping.Feature,Newtonsoft.Json.Linq.JObject,MapAround.Geometry.BoundingRectangle,System.Double)">
            <summary>
            Рисование точки.
            </summary>        
        </member>
        <member name="M:MapAround.Web.JSONMpHelper.DrawPolyline(MapAround.Mapping.Feature,Newtonsoft.Json.Linq.JObject,MapAround.Geometry.BoundingRectangle,System.Double)">
            <summary>
            Рисование линии.
            </summary>
        </member>
        <member name="M:MapAround.Web.JSONMpHelper.DrawPolygon(MapAround.Mapping.Feature,Newtonsoft.Json.Linq.JObject,MapAround.Geometry.BoundingRectangle,System.Double)">
            <summary>
            Рисование полигона.
            </summary>
        </member>
        <member name="T:MapAround.Web.Wms.WmsCapabilities">
            <summary>
            Generates an XML containing WMS capabilities.
            </summary>
        </member>
        <member name="M:MapAround.Web.Wms.WmsCapabilities.GetCapabilities(MapAround.Mapping.Map,MapAround.Web.Wms.WmsServiceDescription)">
            <summary>
            Generates an XML containing WMS capabilities.
            </summary>
            <param name="map">A MapAround.Mapping.Map instance</param>
            <param name="serviceDescription">A MapAround.Web.Wms.WmsServiceDescription instance</param>
            <returns>A System.Xml.XmlDocument instance containing WMS capabilities in compliance to the WMS standard</returns>
        </member>
        <member name="T:MapAround.Web.Wms.WmsContactInformation">
            <summary>
            Stores contact metadata about WMS service.
            </summary>
        </member>
        <member name="F:MapAround.Web.Wms.WmsContactInformation.Address">
            <summary>
            Address.
            </summary>
        </member>
        <member name="F:MapAround.Web.Wms.WmsContactInformation.ElectronicMailAddress">
            <summary>
            E-mail address.
            </summary>
        </member>
        <member name="F:MapAround.Web.Wms.WmsContactInformation.FacsimileTelephone">
            <summary>
            Fax number.
            </summary>
        </member>
        <member name="F:MapAround.Web.Wms.WmsContactInformation.PersonPrimary">
            <summary>
            Primary contact person.
            </summary>
        </member>
        <member name="F:MapAround.Web.Wms.WmsContactInformation.Position">
            <summary>
            Position of contact person.
            </summary>
        </member>
        <member name="F:MapAround.Web.Wms.WmsContactInformation.VoiceTelephone">
            <summary>
            Telephone.
            </summary>
        </member>
        <member name="T:MapAround.Web.Wms.WmsContactInformation.ContactAddress">
            <summary>
            Information about a contact address for the service.
            </summary>
        </member>
        <member name="F:MapAround.Web.Wms.WmsContactInformation.ContactAddress.Address">
            <summary>
            Contact address.
            </summary>
        </member>
        <member name="F:MapAround.Web.Wms.WmsContactInformation.ContactAddress.AddressType">
            <summary>
            Type of address (usually "postal").
            </summary>
        </member>
        <member name="F:MapAround.Web.Wms.WmsContactInformation.ContactAddress.City">
            <summary>
            Contact City.
            </summary>
        </member>
        <member name="F:MapAround.Web.Wms.WmsContactInformation.ContactAddress.Country">
            <summary>
            Country of contact address.
            </summary>
        </member>
        <member name="F:MapAround.Web.Wms.WmsContactInformation.ContactAddress.PostCode">
            <summary>
            Zipcode of contact.
            </summary>
        </member>
        <member name="F:MapAround.Web.Wms.WmsContactInformation.ContactAddress.StateOrProvince">
            <summary>
            State or province of contact.
            </summary>
        </member>
        <member name="T:MapAround.Web.Wms.WmsContactInformation.ContactPerson">
            <summary>
            Information about a contact person for the service.
            </summary>
        </member>
        <member name="F:MapAround.Web.Wms.WmsContactInformation.ContactPerson.Organisation">
            <summary>
            Organisation of primary person.
            </summary>
        </member>
        <member name="F:MapAround.Web.Wms.WmsContactInformation.ContactPerson.Person">
            <summary>
            Primary contact person.
            </summary>
        </member>
        <member name="T:MapAround.Web.Wms.WmsFeatureRender">
            <summary>
            Special rendering for FeatureLayer using wms with caching.
            </summary>
        </member>
        <member name="M:MapAround.Web.Wms.WmsFeatureRender.BeginLayerRender">
            <summary>
            Rendorim new layer.
             <remarks>
             Clears the buffer of the old paint layer.
            
            </remarks>
            </summary>
        </member>
        <member name="M:MapAround.Web.Wms.WmsFeatureRender.#ctor(MapAround.Mapping.MapRenderingSettings)">
            <summary>
            Conctructor.
            </summary>
            <param name="renderingSettings">Setting the drawing.</param>
        </member>
        <member name="M:MapAround.Web.Wms.WmsFeatureRender.Seralize(System.Collections.Generic.IList{MapAround.Mapping.DefaultFeatureRenderer.TitleBufferElement})">
            <summary>
            Serialization of text.
            </summary>        
        </member>
        <member name="M:MapAround.Web.Wms.WmsFeatureRender.Deserialize(System.Byte[])">
            <summary>
            Deserialization text.
            </summary>
        </member>
        <member name="M:MapAround.Web.Wms.WmsFeatureRender.RenderTitle(System.Drawing.Image,MapAround.Geometry.BoundingRectangle)">
             <summary>
            Drawing names.
              <remarks>
             Algorithm uses the base class.
              </remarks>
             </summary>        
        </member>
        <member name="M:MapAround.Web.Wms.WmsFeatureRender.AddTitleInfo(System.Byte[])">
             <summary>
            Add new data on the text in the general collection.
             </summary>
             <param name="titleinfo">Serialized data.</param>
        </member>
        <member name="M:MapAround.Web.Wms.WmsFeatureRender.FlushTitles(System.Drawing.Graphics,MapAround.Geometry.BoundingRectangle,System.Double)">
            <summary>
            Overriding the <see cref="M:MapAround.Mapping.DefaultFeatureRenderer.FlushTitles(System.Drawing.Graphics,MapAround.Geometry.BoundingRectangle,System.Double)"/>.
            </summary>        
        </member>
        <member name="P:MapAround.Web.Wms.WmsFeatureRender.CurrentTitleInfo">
            <summary>
            Serialized data about the names on the card.
            </summary>
        </member>
        <member name="T:MapAround.Web.Wms.WmsFeaturesInfoNeededEventArgs">
            <summary>
            Provides data for the FeaturesInfoNeeded event.
            </summary>
        </member>
        <member name="M:MapAround.Web.Wms.WmsFeaturesInfoNeededEventArgs.#ctor(System.Collections.Generic.List{MapAround.Mapping.Feature},System.String,System.IO.Stream,System.String)">
            <summary>
            Initializes a new instance of the MapAround.Web.Wms.WmsFeaturesInfoNeededEventArgs.
            </summary>
            <param name="features">A list containing features to provide info</param>
            <param name="mimeTypeNeeded">Requested mime-type</param>
            <param name="responseOutputStream">The output stream into which to write the responce</param>
            <param name="responseContentType">Current responce mime-type</param>
        </member>
        <member name="P:MapAround.Web.Wms.WmsFeaturesInfoNeededEventArgs.ResponseOutputStream">
            <summary>
            Gets a reference to the output stream 
            into which the responce is writing.
            </summary>
        </member>
        <member name="P:MapAround.Web.Wms.WmsFeaturesInfoNeededEventArgs.ResponseContentType">
            <summary>
            Gets or sets a mime-type of the response.
            </summary>
        </member>
        <member name="P:MapAround.Web.Wms.WmsFeaturesInfoNeededEventArgs.MimeTypeNeeded">
            <summary>
            Gets the requested mime-type of the response.
            </summary>
        </member>
        <member name="P:MapAround.Web.Wms.WmsFeaturesInfoNeededEventArgs.Features">
            <summary>
            Gets a list containing features to provide info.
            </summary>
        </member>
        <member name="T:MapAround.Web.Wms.NamespaceDoc">
            <summary>
            The MapArounde.Web.Wms workspace containing classes 
            that implement The OpenGIS® Web Map Service Interface Standard (WMS) 
            provides a simple HTTP interface for requesting geo-registered map 
            images from one or more distributed geospatial databases. 
            <para>
            A WMS request defines the geographic layer(s) and area of interest to 
            be processed. The response to the request is one or more geo-registered 
            map images (returned as JPEG, PNG, etc) that can be displayed in a 
            browser application. The interface also supports the ability to specify 
            whether the returned images should be transparent so that layers from 
            multiple servers can be combined or not.
            </para>
            </summary>
        </member>
        <member name="T:MapAround.Web.Wms.RenderNewImageEventArgs">
            <summary>
            Instances of this class provides data for 
            BeforeRenderNewImage event.
            </summary>
        </member>
        <member name="M:MapAround.Web.Wms.RenderNewImageEventArgs.#ctor(MapAround.Geometry.BoundingRectangle,MapAround.Mapping.LayerBase)">
            <summary>
            Initializes a new instance of the MapAround.Web.Wms.RenderNewImageEventArgs.
            </summary>
            <param name="bboxWithGutters">A bounding rectangle defining the drawing area with gutters</param>
            <param name="layer">Layer</param>
        </member>
        <member name="P:MapAround.Web.Wms.RenderNewImageEventArgs.BboxWithGutters">
            <summary>
            Gets a bounding rectangle defining the 
            drawing area with gutters.
            </summary>
        </member>
        <member name="P:MapAround.Web.Wms.RenderNewImageEventArgs.Layer">
            <summary>
            Gets  Layer
             </summary>
        </member>
        <member name="T:MapAround.Web.Wms.PrepareRenderFeatureLayerArgs">
            <summary>
            Training event layer to render.
            </summary>
        </member>
        <member name="M:MapAround.Web.Wms.PrepareRenderFeatureLayerArgs.#ctor(MapAround.Mapping.FeatureLayer)">
            <summary/>         
        </member>
        <member name="P:MapAround.Web.Wms.PrepareRenderFeatureLayerArgs.Layer">
            <summary>
            Layer <see cref="T:MapAround.Mapping.FeatureLayer"/>.
            </summary>
        </member>
        <member name="T:MapAround.Web.Wms.WMSServer">
            <summary>
            Implements The OpenGIS® Web Map Service Interface.
            <remarks>
            As the names of layers appearing in http-queries used their aliases 
            (MapAround.Mapping.Layer.Alias)
            </remarks>
            </summary>
        </member>
        <member name="M:MapAround.Web.Wms.WMSServer.#ctor(MapAround.Web.Wms.WmsServiceDescription)">
            <summary>
            
            </summary>
            <param name="description"></param>
        </member>
        <member name="M:MapAround.Web.Wms.WMSServer.RequestAction(System.Collections.Specialized.NameValueCollection,System.IO.Stream,System.String@)">
            <summary>
            Redirects to the request handler.
            </summary>        
            <returns>If <code>false</code> -handler was not found.</returns>
        </member>
        <member name="M:MapAround.Web.Wms.WMSServer.GetCapabilities(System.Collections.Specialized.NameValueCollection,System.IO.Stream,System.String@)">
            <summary>
            GetCapabilities request
            </summary>
        </member>
        <member name="M:MapAround.Web.Wms.WMSServer.GetFeatureInfo(System.Collections.Specialized.NameValueCollection,System.IO.Stream,System.String@)">
            <summary>
            Request GetFeatureInfo
            </summary>       
        </member>
        <member name="M:MapAround.Web.Wms.WMSServer.CheckRequestParams(System.Collections.Specialized.NameValueCollection,System.IO.Stream,System.String@,MapAround.Geometry.BoundingRectangle@,System.Int32@,System.Int32@)">
            <summary>
            Overrides CheckRequestParams of MapServerBase
            </summary>
            <param name="requestParams"></param>
            <param name="responseOutputStream"></param>
            <param name="responseContentType"></param>
            <param name="originalBbox"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="P:MapAround.Web.Wms.WMSServer.SupportServiceType">
            <summary>
            Get  the type of support the service
            </summary>
        </member>
        <member name="T:MapAround.Web.Wms.BaseServiceDescription">
            <summary>
            Base MapServive description class
            </summary>
        </member>
        <member name="F:MapAround.Web.Wms.BaseServiceDescription.Abstract">
             <summary>
            Optional narrative description providing additional information.
             </summary>
        </member>
        <member name="F:MapAround.Web.Wms.BaseServiceDescription.AccessConstraints">
            <summary>
            <para>The optional element "AccessConstraints" may be omitted if it do not apply to the server. If
            the element is present, the reserved word "none" (case-insensitive) shall be used if there are no
            access constraints, as follows: "none".</para>
            <para>When constraints are imposed, no precise syntax has been defined for the text content of these elements, but
            client applications may display the content for user information and action.</para>
            </summary>
        </member>
        <member name="F:MapAround.Web.Wms.BaseServiceDescription.ContactInformation">
            <summary>
            Optional WMS contact information
            </summary>
        </member>
        <member name="F:MapAround.Web.Wms.BaseServiceDescription.Fees">
            <summary>
            The optional element "Fees" may be omitted if it do not apply to the server. If
            the element is present, the reserved word "none" (case-insensitive) shall be used if there are no
            fees, as follows: "none".
            </summary>
        </member>
        <member name="F:MapAround.Web.Wms.BaseServiceDescription.Keywords">
            <summary>
            Optional list of keywords or keyword phrases describing the server as a whole to help catalog searching
            </summary>
        </member>
        <member name="F:MapAround.Web.Wms.BaseServiceDescription.LayerLimit">
            <summary>
            Maximum number of layers allowed (0=no restrictions)
            </summary>
        </member>
        <member name="F:MapAround.Web.Wms.BaseServiceDescription.MaxHeight">
            <summary>
            Maximum height allowed in pixels (0=no restrictions)
            </summary>
        </member>
        <member name="F:MapAround.Web.Wms.BaseServiceDescription.MaxWidth">
            <summary>
            Maximum width allowed in pixels (0=no restrictions)
            </summary>
        </member>
        <member name="F:MapAround.Web.Wms.BaseServiceDescription.OnlineResource">
            <summary>
            Mandatory Top-level web address of service or service provider.
            </summary>
        </member>
        <member name="F:MapAround.Web.Wms.BaseServiceDescription.Title">
            <summary>
            Mandatory Human-readable title for pick lists
            </summary>
        </member>
        <member name="M:MapAround.Web.Wms.BaseServiceDescription.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the MapAround.Web.Wms.WmsServiceDescription.
            </summary>
            <param name="title">Mandatory Human-readable title for pick lists</param>
            <param name="onlineResource">Top-level web address of service or service provider.</param>
        </member>
        <member name="T:MapAround.Web.Wms.WmsServiceDescription">
            <summary>
            Stores metadata for a WMS service.
            </summary>
        </member>
        <member name="F:MapAround.Web.Wms.WmsServiceDescription.BoundingBox">
            <summary>
            
            </summary>
        </member>
        <member name="M:MapAround.Web.Wms.WmsServiceDescription.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the MapAround.Web.Wms.WmsServiceDescription.
            </summary>
            <param name="title">Mandatory Human-readable title for pick lists</param>
            <param name="onlineResource">Top-level web address of service or service provider.</param>
        </member>
        <member name="T:MapAround.Web.Wms.WmsUnknownRequestEventArgs">
            <summary>
            Provides data for the OnUnknownRequest event.
            </summary>
        </member>
        <member name="M:MapAround.Web.Wms.WmsUnknownRequestEventArgs.#ctor(System.Collections.Specialized.NameValueCollection,System.IO.Stream)">
            <summary>
            Initializes a new instance os MapAround.Web.Wms.WmsExtenedRequestEventArgs.
            </summary>
            <param name="requestParams">a collection containing the request parameters</param>
            <param name="responseOutputStream">An output stream to write the response</param>
        </member>
        <member name="P:MapAround.Web.Wms.WmsUnknownRequestEventArgs.IsHandled">
            <summary>
            Gets or sets a value indicating whether the request is handled.
            </summary>
        </member>
        <member name="P:MapAround.Web.Wms.WmsUnknownRequestEventArgs.ResponseContentType">
            <summary>
            Gets or sets a mime-type of the response.
            </summary>
        </member>
        <member name="P:MapAround.Web.Wms.WmsUnknownRequestEventArgs.ResponseOutputStream">
            <summary>
            Gets an output stream to write the response.
            </summary>
        </member>
        <member name="P:MapAround.Web.Wms.WmsUnknownRequestEventArgs.RequestParams">
            <summary>
            Gets a collection containing the request parameters.
            </summary>
        </member>
        <member name="T:MapAround.Web.Wmts.WmtsCapabilities">
            <summary>
            Generates an XML containing WMTS capabilities.
            </summary>
        </member>
        <member name="M:MapAround.Web.Wmts.WmtsCapabilities.GetCapabilities(MapAround.Mapping.Map,MapAround.Web.Wmts.WmtsServiceDescription)">
            <summary>
            Generates an XML containing WMTS capabilities.
            </summary>
            <param name="map">A MapAround.Mapping.Map instance</param>        
            <param name="serviceDescription"></param>
            <returns>A System.Xml.XmlDocument instance containing WMTS capabilities in compliance to the WMS standard</returns>
        </member>
        <member name="T:MapAround.Web.Wmts.WMTSServer">
            <summary>
            Implements The OpenGIS® Web Map Tile Service Interface.
            <remarks>
            As the names of layers appearing in http-queries used their aliases 
            (MapAround.Mapping.Layer.Alias)
            </remarks>
            </summary>
        </member>
        <member name="M:MapAround.Web.Wmts.WMTSServer.#ctor(MapAround.Web.Wmts.WmtsServiceDescription)">
            <summary>
            Designer.
            </summary>       
        </member>
        <member name="M:MapAround.Web.Wmts.WMTSServer.GetCapabilities(System.Collections.Specialized.NameValueCollection,System.IO.Stream,System.String@)">
            <summary>
            GetCapabilities request
            </summary>
        </member>
        <member name="M:MapAround.Web.Wmts.WMTSServer.GetFeatureInfo(System.Collections.Specialized.NameValueCollection,System.IO.Stream,System.String@)">
             <summary>
            GetFeatureInfo request
             </summary>       
        </member>
        <member name="M:MapAround.Web.Wmts.WMTSServer.GetTile(System.Collections.Specialized.NameValueCollection,System.IO.Stream,System.String@)">
            <summary>
            Request GetTile
            </summary>
        </member>
        <member name="M:MapAround.Web.Wmts.WMTSServer.RequestAction(System.Collections.Specialized.NameValueCollection,System.IO.Stream,System.String@)">
            <summary>
            Redirects to the request handler.
            </summary>        
            <returns>If <code>false</code> - handler was not found.</returns>
        </member>
        <member name="M:MapAround.Web.Wmts.WMTSServer.CheckRequestParams(System.Collections.Specialized.NameValueCollection,System.IO.Stream,System.String@,MapAround.Geometry.BoundingRectangle@,System.Int32@,System.Int32@)">
            <summary>
            Overrides CheckRequestParams of MapServerBase
            </summary>
            <param name="requestParams"></param>
            <param name="responseOutputStream"></param>
            <param name="responseContentType"></param>
            <param name="originalBbox"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="P:MapAround.Web.Wmts.WMTSServer.SupportServiceType">
            <summary>
            Get  the type of support the service
            </summary>
        </member>
        <member name="T:MapAround.Web.Wmts.WmtsServiceDescription">
            <summary>
            Stores metadata for a WMTS service.
            </summary>
        </member>
        <member name="F:MapAround.Web.Wmts.WmtsServiceDescription.Tile">
            <summary>
            Tile
            </summary>
        </member>
        <member name="F:MapAround.Web.Wmts.WmtsServiceDescription.ZoomLevel">
            <summary>
            ZoomLevel
            </summary>
        </member>
        <member name="F:MapAround.Web.Wmts.WmtsServiceDescription.CRS84Scale">
            <summary>
            Definition of Well-known scale set GoogleCRS84Quad
            </summary>
        </member>
        <member name="F:MapAround.Web.Wmts.WmtsServiceDescription.EPSGScale">
            <summary>
            Definition of Well-known scale set GoogleMapsCompatible
            </summary>
        </member>
        <member name="M:MapAround.Web.Wmts.WmtsServiceDescription.GetScaleDenominator(System.Int32)">
            <summary>
            Gets Scale Denominator for ith matrix
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:MapAround.Web.Wmts.WmtsServiceDescription.GetPixelSize(System.Int32)">
            <summary>
            Gets Pixel Size for ith matrix
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:MapAround.Web.Wmts.WmtsServiceDescription.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the MapAround.Web.Wmts.WmtsServiceDescription.
            </summary>
            <param name="title">Mandatory Human-readable title for pick lists</param>
            <param name="onlineResource">Top-level web address of service or service provider.</param>
        </member>
        <member name="P:MapAround.Web.Wmts.WmtsServiceDescription.EPSG">
            <summary>
            Sets matrix names and levels for them
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
